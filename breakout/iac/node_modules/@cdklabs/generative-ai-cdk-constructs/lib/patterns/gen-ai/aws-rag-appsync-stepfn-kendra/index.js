"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RagAppsyncStepfnKendra = void 0;
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const path = require("path");
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const appsync = require("aws-cdk-lib/aws-appsync");
const ec2 = require("aws-cdk-lib/aws-ec2");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const lambda = require("aws-cdk-lib/aws-lambda");
const logs = require("aws-cdk-lib/aws-logs");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const custom_resources_1 = require("aws-cdk-lib/custom-resources");
const base_class_1 = require("../../../common/base-class");
const dynamodb_helper_1 = require("../../../common/helpers/dynamodb-helper");
const kendra_construct_1 = require("../../../common/helpers/kendra-construct");
const kendra_helper_1 = require("../../../common/helpers/kendra-helper");
const lambda_builder_helper_1 = require("../../../common/helpers/lambda-builder-helper");
const utils_1 = require("../../../common/helpers/utils");
const vpc_helper_1 = require("../../../common/helpers/vpc-helper");
var ServiceEndpointTypeEnum;
(function (ServiceEndpointTypeEnum) {
    ServiceEndpointTypeEnum["DYNAMODB"] = "DDB";
    ServiceEndpointTypeEnum["ECR_API"] = "ECR_API";
    ServiceEndpointTypeEnum["ECR_DKR"] = "ECR_DKR";
    ServiceEndpointTypeEnum["EVENTS"] = "CLOUDWATCH_EVENTS";
    ServiceEndpointTypeEnum["KENDRA"] = "KENDRA";
    ServiceEndpointTypeEnum["KINESIS_FIREHOSE"] = "KINESIS_FIREHOSE";
    ServiceEndpointTypeEnum["KINESIS_STREAMS"] = "KINESIS_STREAMS";
    ServiceEndpointTypeEnum["S3"] = "S3";
    ServiceEndpointTypeEnum["SAGEMAKER_RUNTIME"] = "SAGEMAKER_RUNTIME";
    ServiceEndpointTypeEnum["SECRETS_MANAGER"] = "SECRETS_MANAGER";
    ServiceEndpointTypeEnum["SNS"] = "SNS";
    ServiceEndpointTypeEnum["SQS"] = "SQS";
    ServiceEndpointTypeEnum["SSM"] = "SSM";
    ServiceEndpointTypeEnum["STEP_FUNCTIONS"] = "STEP_FUNCTIONS";
})(ServiceEndpointTypeEnum || (ServiceEndpointTypeEnum = {}));
/**
 * @summary The RagAppsyncStepfnKendra class.
 */
class RagAppsyncStepfnKendra extends base_class_1.BaseClass {
    /**
       * @summary Constructs a new instance of the RagAppsyncStepfnKendra class.
       * @param {cdk.App} scope - represents the scope for all the resources.
       * @param {string} id - this is a scope-unique id.
       * @param {RagAppsyncStepfnKendraProps} props - user provided props for the construct.
       * @since 0.0.0
       * @access public
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.lambdaTracing = lambda.Tracing.ACTIVE;
        const baseProps = {
            stage: props.stage,
            enableOperationalMetric: props.enableOperationalMetric,
            constructName: base_class_1.ConstructName.AWSRAGAPPSYNCSTEPFNKENDRA,
            constructId: id,
            observability: props.observability,
        };
        this.updateEnvSuffix(baseProps);
        this.addObservabilityToConstruct(baseProps);
        this.cognito = props.cognitoUserPool;
        this.awsAccountId = cdk.Stack.of(this).account;
        this.awsRegion = cdk.Stack.of(this).region;
        this.stack = cdk.Stack.of(this);
        this.removalPolicy = cdk.RemovalPolicy.DESTROY;
        // Staging environment
        let stage = '-dev';
        if (props?.stage) {
            stage = props.stage;
        }
        if (props?.existingVpc) {
            this.vpc = props.existingVpc;
        }
        else {
            this.vpc = new ec2.Vpc(this, 'Vpc', props.vpcProps);
        }
        if (props?.existingSecurityGroup) {
            this.securityGroup = props.existingSecurityGroup;
        }
        else {
            this.securityGroup = new ec2.SecurityGroup(this, 'securityGroup', {
                vpc: this.vpc,
                allowAllOutbound: true,
                securityGroupName: 'securityGroup' + stage,
            });
        }
        let enableXRay = true;
        let apiLogConfig = {
            fieldLogLevel: appsync.FieldLogLevel.ALL,
            retention: logs.RetentionDays.TEN_YEARS,
        };
        if (props.observability === false) {
            enableXRay = false;
            apiLogConfig = {
                fieldLogLevel: appsync.FieldLogLevel.NONE,
                retention: logs.RetentionDays.TEN_YEARS,
            };
        }
        if (props.kendraIndexProps && props.existingKendraIndexObj) {
            throw new Error('You may not provide both kendraIndexProps and existingKendraIndexObj');
        }
        if (props.kendraIndexProps && props.kendraDataSourcesProps) {
            throw new Error('You may not provide both kendraDataSourcesProps and existingKendraIndexObj');
        }
        if (props.deployVpc || props.existingVpc) {
            this.vpc = (0, vpc_helper_1.buildVpc)(scope, {
                defaultVpcProps: (0, vpc_helper_1.createDefaultIsolatedVpcProps)(),
                existingVpc: props.existingVpc,
                userVpcProps: props.vpcProps,
                constructVpcProps: {
                    enableDnsHostnames: true,
                    enableDnsSupport: true,
                },
            });
            (0, vpc_helper_1.AddAwsServiceEndpoint)(scope, this.vpc, ServiceEndpointTypeEnum.KENDRA);
        }
        this.kendraInputBucket = new aws_s3_1.Bucket(this, 'kendraInputBucket', {
            accessControl: aws_s3_1.BucketAccessControl.PRIVATE,
            enforceSSL: true,
            eventBridgeEnabled: true,
        });
        this.cognito = props.cognitoUserPool;
        this.kendraIndex = new kendra_construct_1.KendraConstruct(this, 'llmDemoIndex', {
            IndexName: 'llmDemoKendraIndex',
            Edition: 'DEVELOPER_EDITION',
            kendraDataSyncInputBucketName: this.kendraInputBucket.bucketName,
            CognitoUserPoolId: this.cognito.userPoolId,
        });
        this.kendraIndexId = this.kendraIndex.KendraIndexId;
        this.kendraDataSourceIndexId = this.kendraIndex.KendraDataSourceIndexId;
        this.kendraInputBucketArn = this.kendraInputBucket.bucketArn;
        this.kendraInputBucket.addCorsRule({
            allowedOrigins: ['*'],
            allowedMethods: [aws_s3_1.HttpMethods.GET, aws_s3_1.HttpMethods.PUT, aws_s3_1.HttpMethods.POST, aws_s3_1.HttpMethods.DELETE, aws_s3_1.HttpMethods.HEAD],
            allowedHeaders: ['*'],
            exposedHeaders: ['ETag'], // For Storage Put with Object size > 5MB
            maxAge: 3000,
        });
        const kendraACL = [
            {
                keyPrefix: `s3://${this.kendraInputBucket.bucketName}/public/BusinessTeam1/`,
                aclEntries: [
                    {
                        Name: 'BusinessTeam1',
                        Type: 'GROUP',
                        Access: 'ALLOW',
                    },
                    {
                        Name: 'Admin',
                        Type: 'GROUP',
                        Access: 'ALLOW',
                    },
                ],
            },
            {
                keyPrefix: `s3://${this.kendraInputBucket.bucketName}/public/BusinessTeam2/`,
                aclEntries: [
                    {
                        Name: 'BusinessTeam2',
                        Type: 'GROUP',
                        Access: 'ALLOW',
                    },
                    {
                        Name: 'Admin',
                        Type: 'GROUP',
                        Access: 'ALLOW',
                    },
                ],
            },
            {
                keyPrefix: `s3://${this.kendraInputBucket.bucketName}/public/AdminsOnly/`,
                aclEntries: [
                    {
                        Name: 'Admin',
                        Type: 'GROUP',
                        Access: 'ALLOW',
                    },
                ],
            },
        ];
        const kendraAclUploader = new custom_resources_1.AwsCustomResource(this, 'kendraAclUploader', {
            onUpdate: {
                action: 'putObject',
                parameters: {
                    Body: JSON.stringify(kendraACL),
                    Bucket: this.kendraInputBucket.bucketName,
                    CacheControl: 'max-age=0, no-cache, no-store, must-revalidate',
                    ContentType: 'application/json',
                    Key: 'kendra_acl.json',
                },
                physicalResourceId: custom_resources_1.PhysicalResourceId.of('kendra_acl'),
                service: 'S3',
            },
            policy: custom_resources_1.AwsCustomResourcePolicy.fromStatements([
                new aws_iam_1.PolicyStatement({
                    actions: ['s3:PutObject'],
                    resources: [this.kendraInputBucket.arnForObjects('kendra_acl.json')],
                }),
            ]),
        });
        this.kendraIndex.node.addDependency(kendraAclUploader);
        new cdk.CfnOutput(this, 'KendraAccessControlListUrl', {
            value: `s3://${this.kendraInputBucket.bucketName}/kendra_acl.json`,
        });
        // TODO(miketran): Fix this schema.
        const ingestionGraphqlApi = new appsync.GraphqlApi(this, 'ingestionGraphqlApi', {
            name: 'ingestionGraphqlApi' + stage,
            definition: appsync.Definition.fromFile(path.join(__dirname, '../../../../resources/gen-ai/aws-rag-appsync-stepfn-kendra/schema.graphql')),
            authorizationConfig: {
                defaultAuthorization: {
                    authorizationType: appsync.AuthorizationType.USER_POOL,
                    userPoolConfig: { userPool: this.cognito },
                },
                additionalAuthorizationModes: [
                    {
                        authorizationType: appsync.AuthorizationType.IAM,
                    },
                ],
            },
            xrayEnabled: enableXRay,
            logConfig: apiLogConfig,
        });
        this.graphqlApi = ingestionGraphqlApi;
        this.syncRunTable = (0, dynamodb_helper_1.createKendraSyncRunTable)(this);
        const lambdaPropsEnv = {
            KENDRA_INDEX_ID: this.kendraIndexId,
            KENDRA_DATA_SOURCE_INDEX_ID: this.kendraDataSourceIndexId,
            DOCUMENTS_TABLE: this.syncRunTable.tableName,
            S3_BUCKET_NAME: this.kendraInputBucket.bucketName,
        };
        const generatePresignedUrlRole = (0, kendra_helper_1.getGeneratePresignedUrlLambdaRole)(this, this.kendraInputBucket);
        const constructGeneratePresignedUrlLambdaProps = {
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-rag-appsync-stepfn-kendra/generate_presigned_url/src')),
            functionName: 's3_pre_signed_links_generator_docker' + stage,
            description: 'Lambda function for pre-signed links generation',
            vpc: this.vpc,
            tracing: this.lambdaTracing,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.securityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769),
            timeout: aws_cdk_lib_1.Duration.minutes(15),
            role: generatePresignedUrlRole,
            environment: lambdaPropsEnv,
        };
        const generatePresignedUrlLambda = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'generatePresignedUrlFN', constructGeneratePresignedUrlLambdaProps, props.generatePresignedUrlLambdaProps);
        const startDataSyncRole = (0, kendra_helper_1.getKendraStartDataSyncLambdaRole)(this, this.syncRunTable, this.awsRegion, this.awsAccountId, this.kendraIndexId, this.kendraDataSourceIndexId);
        const constructStartDataSyncJobLambdaProps = {
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-rag-appsync-stepfn-kendra/kendra_sync/src')),
            functionName: 'kendra_start_sync_job_docker' + stage,
            description: 'Lambda function for Kendra  sync job starting',
            vpc: this.vpc,
            tracing: this.lambdaTracing,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.securityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769),
            timeout: aws_cdk_lib_1.Duration.minutes(15),
            role: startDataSyncRole,
            environment: lambdaPropsEnv,
        };
        const kendraSyncLambda = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'kendraStartDataSync', constructStartDataSyncJobLambdaProps, props.kendraStartDataSyncLambdaProps);
        const checkJobStatusLambdaRole = (0, kendra_helper_1.getCheckJobStatusLambdaRole)(this, this.awsRegion, this.awsAccountId, this.kendraIndexId, this.kendraDataSourceIndexId);
        const constructCheckJobStatusLambdaProps = {
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-rag-appsync-stepfn-kendra/kendra_sync_status/src')),
            functionName: 'kendra_check_sync_job_status_docker' + stage,
            description: 'Lambda function for getting kendra sync status',
            vpc: this.vpc,
            tracing: this.lambdaTracing,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.securityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769),
            timeout: aws_cdk_lib_1.Duration.minutes(15),
            environment: lambdaPropsEnv,
            role: checkJobStatusLambdaRole,
        };
        const createCheckJobsStatusLambda = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'checkJobStatusFN', constructCheckJobStatusLambdaProps, props.checkJobsStatusLambdaProps);
        const updateKendraJobStatusLambdaRole = (0, kendra_helper_1.getUpdateKendraJobStatusLambdaRole)(this, this.syncRunTable);
        const constructKendraJobStatusLambdaProps = {
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-rag-appsync-stepfn-kendra/kendra_job_manager/src')),
            functionName: 'kendra_job_manager_docker' + stage,
            description: 'Lambda function for Kendra job status updates',
            vpc: this.vpc,
            tracing: this.lambdaTracing,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.securityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769),
            timeout: aws_cdk_lib_1.Duration.minutes(15),
            role: updateKendraJobStatusLambdaRole,
            environment: lambdaPropsEnv,
        };
        const updateKendraJobStatusLambda = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'updateKendraJobStatusFn', constructKendraJobStatusLambdaProps, props.updateKendraJobStatusLambdaProps);
        this.docProcessingStateMachine = (0, kendra_helper_1.createKendraWorkflowStepFunction)(this.stack, updateKendraJobStatusLambda, kendraSyncLambda, createCheckJobsStatusLambda);
        this.stepFunctionsExecutionHandlerRole = (0, kendra_helper_1.createStepFunctionsExecutionHandlerRole)(this.stack, this.docProcessingStateMachine);
        const startKendraSyncStepFnRole = (0, kendra_helper_1.getStartKendraSyncStepFnRole)(this, this.docProcessingStateMachine);
        const constructStartKendraSyncStepFnLambdaProps = {
            code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../../../../lambda/aws-rag-appsync-stepfn-kendra/start_kendra_sync_stepfn/src')),
            functionName: 'start_kndra_sync_step_fn' + stage,
            description: 'Lambda for starting execution',
            vpc: this.vpc,
            tracing: this.lambdaTracing,
            vpcSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
            securityGroups: [this.securityGroup],
            memorySize: (0, utils_1.lambdaMemorySizeLimiter)(this, 1769),
            timeout: aws_cdk_lib_1.Duration.minutes(15),
            role: startKendraSyncStepFnRole,
            environment: {
                ...lambdaPropsEnv,
                STEP_FUNCTION_ARN: this.docProcessingStateMachine.stateMachineArn,
            },
        };
        const startKendraStepFnLambda = (0, lambda_builder_helper_1.buildDockerLambdaFunction)(this, 'startKendraStepFnLambda', constructStartKendraSyncStepFnLambdaProps, undefined);
        const presignedUrlDataSource = ingestionGraphqlApi.addLambdaDataSource('presignedUrlDataSource', generatePresignedUrlLambda);
        presignedUrlDataSource.createResolver('presignedUrlResolver', {
            typeName: 'Mutation',
            fieldName: 'generatePresignedUrl',
        });
        const kendraSyncLambdaDataSource = ingestionGraphqlApi.addLambdaDataSource('kendraSyncLambdaDataSource', startKendraStepFnLambda);
        kendraSyncLambdaDataSource.createResolver('kendraSyncLambdaResolver', {
            typeName: 'Mutation',
            fieldName: 'startKendraSyncJob',
            requestMappingTemplate: appsync.MappingTemplate.fromString(`
    {
      "version": "2017-02-28",
      "operation": "Invoke",
      "payload": {}
    }
  `),
            responseMappingTemplate: appsync.MappingTemplate.fromString(`
    $util.toJson($context.result)
  `),
        });
    }
}
exports.RagAppsyncStepfnKendra = RagAppsyncStepfnKendra;
//# sourceMappingURL=data:application/json;base64,