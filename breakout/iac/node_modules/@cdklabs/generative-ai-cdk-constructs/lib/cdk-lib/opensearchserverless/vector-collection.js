"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorCollection = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const oss = require("aws-cdk-lib/aws-opensearchserverless");
const constructs_1 = require("constructs");
const utils_1 = require("../../common/helpers/utils");
/**
 * Deploys an OpenSearch Serverless Collection to be used as a vector store.
 *
 * It includes all policies.
 */
class VectorCollection extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        /**
         * An OpenSearch Access Policy document that will become `dataAccessPolicy`.
         * @private
         */
        this.dataAccessPolicyDocument = [];
        this.collectionName = (0, utils_1.generatePhysicalNameV2)(this, 'VectorStore', { maxLength: 32, lower: true });
        const encryptionPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'EncryptionPolicy', { maxLength: 32, lower: true });
        const encryptionPolicy = new oss.CfnSecurityPolicy(this, 'EncryptionPolicy', {
            name: encryptionPolicyName,
            type: 'encryption',
            policy: JSON.stringify({
                Rules: [
                    {
                        ResourceType: 'collection',
                        Resource: [`collection/${this.collectionName}`],
                    },
                ],
                AWSOwnedKey: true,
            }),
        });
        const networkPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'NetworkPolicy', { maxLength: 32, lower: true });
        const networkPolicy = new oss.CfnSecurityPolicy(this, 'NetworkPolicy', {
            name: networkPolicyName,
            type: 'network',
            policy: JSON.stringify([
                {
                    Rules: [
                        {
                            ResourceType: 'collection',
                            Resource: [`collection/${this.collectionName}`],
                        },
                        {
                            ResourceType: 'dashboard',
                            Resource: [`collection/${this.collectionName}`],
                        },
                    ],
                    AllowFromPublic: true,
                },
            ]),
        });
        const collection = new oss.CfnCollection(this, 'VectorCollection', {
            name: this.collectionName,
            type: 'VECTORSEARCH',
        });
        this.collectionArn = collection.attrArn;
        this.collectionId = collection.attrId;
        this.aossPolicy = new iam.ManagedPolicy(this, 'AOSSApiAccessAll', {
            statements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: [
                        'aoss:APIAccessAll',
                    ],
                    resources: [collection.attrArn],
                }),
            ],
        });
        collection.addDependency(encryptionPolicy);
        collection.addDependency(networkPolicy);
        const isDataAccessPolicyNotEmpty = new cdk.CfnCondition(this, 'IsDataAccessPolicyNotEmpty', {
            expression: cdk.Fn.conditionNot(cdk.Fn.conditionEquals(0, cdk.Lazy.number({
                produce: () => this.dataAccessPolicyDocument.length,
            }))),
        });
        const dataAccessPolicyName = (0, utils_1.generatePhysicalNameV2)(this, 'DataAccessPolicy', { maxLength: 32, lower: true });
        this.dataAccessPolicy = new oss.CfnAccessPolicy(this, 'DataAccessPolicy', {
            name: dataAccessPolicyName,
            type: 'data',
            policy: cdk.Lazy.string({
                produce: () => JSON.stringify(this.dataAccessPolicyDocument),
            }),
        });
        this.dataAccessPolicy.cfnOptions.condition = isDataAccessPolicyNotEmpty;
    }
    /**
     * Grants the specified role access to data in the collection.
     * @param grantee The role to grant access to.
     */
    grantDataAccess(grantee) {
        this.dataAccessPolicyDocument.push({
            Rules: [
                {
                    Resource: [`collection/${this.collectionName}`],
                    Permission: [
                        'aoss:DescribeCollectionItems',
                        'aoss:CreateCollectionItems',
                        'aoss:UpdateCollectionItems',
                    ],
                    ResourceType: 'collection',
                },
                {
                    Resource: [`index/${this.collectionName}/*`],
                    Permission: [
                        'aoss:UpdateIndex',
                        'aoss:DescribeIndex',
                        'aoss:ReadDocument',
                        'aoss:WriteDocument',
                        'aoss:CreateIndex',
                    ],
                    ResourceType: 'index',
                },
            ],
            Principal: [
                grantee.roleArn,
            ],
            Description: '',
        });
        grantee.addManagedPolicy(this.aossPolicy);
    }
}
exports.VectorCollection = VectorCollection;
_a = JSII_RTTI_SYMBOL_1;
VectorCollection[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection", version: "0.1.122" };
//# sourceMappingURL=data:application/json;base64,