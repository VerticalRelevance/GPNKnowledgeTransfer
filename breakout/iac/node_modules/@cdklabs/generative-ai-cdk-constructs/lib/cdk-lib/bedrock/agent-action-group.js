"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentActionGroup = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
const custom_resource_provider_1 = require("./custom-resource-provider");
const utils_1 = require("../../common/helpers/utils");
class AgentActionGroup extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        validateAgentActionGroupProps(props);
        const apiSchema = props.apiSchema?.bind(this);
        validateApiSchema(apiSchema);
        const actionGroupName = props.actionGroupName ?? (0, utils_1.generatePhysicalNameV2)(this, 'action-group', { maxLength: 100, separator: '-' });
        let actionGroupExecutor = undefined;
        if (props.actionGroupExecutor?.functionArn) {
            actionGroupExecutor = { lambda: props.actionGroupExecutor.functionArn };
            props.actionGroupExecutor.addPermission('AgentLambdaInvocationPolicy', {
                principal: new iam.ServicePrincipal('bedrock.amazonaws.com'),
                sourceArn: props.agent.agentArn,
                sourceAccount: cdk.Stack.of(this).account,
            });
        }
        const crProvider = custom_resource_provider_1.BedrockCRProvider.getProvider(this);
        const agentActionGroup = new cdk.CustomResource(this, 'ActionGroup', {
            serviceToken: crProvider.serviceToken,
            resourceType: 'Custom::Bedrock-AgentActionGroup',
            properties: {
                agentId: props.agent.agentId,
                actionGroupExecutor,
                actionGroupName,
                actionGroupState: props.actionGroupState,
                apiSchema,
                description: props.description,
                parentActionGroupSignature: props.parentActionGroupSignature,
                shouldPrepareAgent: props.shouldPrepareAgent,
            },
        });
        this.actionGroupId = agentActionGroup.getAttString('actionGroupId');
        const actionGroupCRPolicy = new iam.Policy(this, 'AgentActionGroupCRPolicy', {
            roles: [crProvider.role],
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:CreateAgentActionGroup',
                        'bedrock:DeleteAgentActionGroup',
                        'bedrock:UpdateAgentActionGroup',
                    ],
                    resources: [
                        cdk.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'agent',
                            resourceName: '*',
                            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                    ],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(actionGroupCRPolicy, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'Bedrock AgentActionGroup calls have wildcards restricted to agents in the account.',
            },
        ], true);
        agentActionGroup.node.addDependency(actionGroupCRPolicy);
        props.agent._addAliasDependency(agentActionGroup.getAttString('updatedAt'));
    }
}
exports.AgentActionGroup = AgentActionGroup;
_a = JSII_RTTI_SYMBOL_1;
AgentActionGroup[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.AgentActionGroup", version: "0.1.122" };
function validateAgentActionGroupProps(props) {
    if (props.parentActionGroupSignature && props.description) {
        throw new Error('Cannot specify both description and parentActionSignature');
    }
}
function validateApiSchema(apiSchema) {
    // mutually exclusive
    if (apiSchema?.payload && apiSchema?.s3) {
        throw new Error('Cannot specify both apiSchema.payload and apiSchema.s3');
    }
}
//# sourceMappingURL=data:application/json;base64,