"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockFoundationModel = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
/**
 * Bedrock models.
 *
 * If you need to use a model name that doesn't exist as a static member, you
 * can instantiate a `BedrockFoundationModel` object, e.g: `new BedrockFoundationModel('my-model')`.
 */
class BedrockFoundationModel {
    constructor(value, props = {}) {
        this.modelId = value;
        this.supportsAgents = props.supportsAgents ?? false;
        this.vectorDimensions = props.vectorDimensions;
        this.supportsKnowledgeBase = props.supportsKnowledgeBase ?? false;
    }
    toString() {
        return this.modelId;
    }
    asArn(construct) {
        const region = cdk.Stack.of(construct).region;
        return `arn:aws:bedrock:${region}::foundation-model/${this.modelId}`;
    }
}
exports.BedrockFoundationModel = BedrockFoundationModel;
_a = JSII_RTTI_SYMBOL_1;
BedrockFoundationModel[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.BedrockFoundationModel", version: "0.1.122" };
BedrockFoundationModel.ANTHROPIC_CLAUDE_V2 = new BedrockFoundationModel('anthropic.claude-v2', { supportsAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_V2_1 = new BedrockFoundationModel('anthropic.claude-v2:1', { supportsAgents: true });
BedrockFoundationModel.ANTHROPIC_CLAUDE_INSTANT_V1_2 = new BedrockFoundationModel('anthropic.claude-instant-v1', { supportsAgents: true });
BedrockFoundationModel.AMAZON_TITAN_TEXT_EXPRESS_V1 = new BedrockFoundationModel('amazon.titan-text-express-v1', { supportsAgents: true });
BedrockFoundationModel.TITAN_EMBED_TEXT_V1 = new BedrockFoundationModel('amazon.titan-embed-text-v1', { supportsKnowledgeBase: true, vectorDimensions: 1536 });
BedrockFoundationModel.COHERE_EMBED_ENGLISH_V3 = new BedrockFoundationModel('cohere.embed-english-v3', { supportsKnowledgeBase: true, vectorDimensions: 1024 });
BedrockFoundationModel.COHERE_EMBED_MULTILINGUAL_V3 = new BedrockFoundationModel('cohere.embed-multilingual-v3', { supportsKnowledgeBase: true, vectorDimensions: 1024 });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9tb2RlbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILG1DQUFtQztBQXVCbkM7Ozs7O0dBS0c7QUFDSCxNQUFhLHNCQUFzQjtJQW1DakMsWUFBWSxLQUFhLEVBQUUsUUFBcUMsRUFBRTtRQUNoRSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLElBQUksS0FBSyxDQUFDO1FBQ3BELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7UUFDL0MsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQyxxQkFBcUIsSUFBSSxLQUFLLENBQUM7SUFDcEUsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELEtBQUssQ0FBQyxTQUFxQjtRQUN6QixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDOUMsT0FBTyxtQkFBbUIsTUFBTSxzQkFBc0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3ZFLENBQUM7O0FBakRILHdEQWtEQzs7O0FBakR3QiwwQ0FBbUIsR0FBRyxJQUFJLHNCQUFzQixDQUNyRSxxQkFBcUIsRUFDckIsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLENBQ3pCLENBQUM7QUFDcUIsNENBQXFCLEdBQUcsSUFBSSxzQkFBc0IsQ0FDdkUsdUJBQXVCLEVBQ3ZCLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxDQUN6QixDQUFDO0FBQ3FCLG9EQUE2QixHQUFHLElBQUksc0JBQXNCLENBQy9FLDZCQUE2QixFQUM3QixFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FDekIsQ0FBQztBQUNxQixtREFBNEIsR0FBRyxJQUFJLHNCQUFzQixDQUM5RSw4QkFBOEIsRUFDOUIsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLENBQ3pCLENBQUM7QUFFcUIsMENBQW1CLEdBQUcsSUFBSSxzQkFBc0IsQ0FDckUsNEJBQTRCLEVBQzVCLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxDQUN4RCxDQUFDO0FBQ3FCLDhDQUF1QixHQUFHLElBQUksc0JBQXNCLENBQ3pFLHlCQUF5QixFQUN6QixFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FDeEQsQ0FBQztBQUNxQixtREFBNEIsR0FBRyxJQUFJLHNCQUFzQixDQUM5RSw4QkFBOEIsRUFDOUIsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLENBQ3hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgSUNvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJlZHJvY2tGb3VuZGF0aW9uTW9kZWxQcm9wcyB7XG4gIC8qKlxuICAgKiBCZWRyb2NrIEFnZW50cyBjYW4gdXNlIHRoaXMgbW9kZWwuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IHN1cHBvcnRzQWdlbnRzPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEJlZHJvY2sgS25vd2xlZGdlIEJhc2UgY2FuIHVzZSB0aGlzIG1vZGVsLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGZhbHNlXG4gICAqL1xuICByZWFkb25seSBzdXBwb3J0c0tub3dsZWRnZUJhc2U/OiBib29sZWFuO1xuICAvKipcbiAgICogRW1iZWRkaW5nIG1vZGVscyBoYXZlIGRpZmZlcmVudCB2ZWN0b3IgZGltZW5zaW9ucy5cbiAgICogT25seSBhcHBsaWNhYmxlIGZvciBlbWJlZGRpbmcgbW9kZWxzLlxuICAgKi9cbiAgcmVhZG9ubHkgdmVjdG9yRGltZW5zaW9ucz86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBCZWRyb2NrIG1vZGVscy5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byB1c2UgYSBtb2RlbCBuYW1lIHRoYXQgZG9lc24ndCBleGlzdCBhcyBhIHN0YXRpYyBtZW1iZXIsIHlvdVxuICogY2FuIGluc3RhbnRpYXRlIGEgYEJlZHJvY2tGb3VuZGF0aW9uTW9kZWxgIG9iamVjdCwgZS5nOiBgbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoJ215LW1vZGVsJylgLlxuICovXG5leHBvcnQgY2xhc3MgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbCB7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQU5USFJPUElDX0NMQVVERV9WMiA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbnRocm9waWMuY2xhdWRlLXYyJyxcbiAgICB7IHN1cHBvcnRzQWdlbnRzOiB0cnVlIH0sXG4gICk7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQU5USFJPUElDX0NMQVVERV9WMl8xID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FudGhyb3BpYy5jbGF1ZGUtdjI6MScsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSB9LFxuICApO1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFOVEhST1BJQ19DTEFVREVfSU5TVEFOVF9WMV8yID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2FudGhyb3BpYy5jbGF1ZGUtaW5zdGFudC12MScsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSB9LFxuICApO1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFNQVpPTl9USVRBTl9URVhUX0VYUFJFU1NfVjEgPSBuZXcgQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbChcbiAgICAnYW1hem9uLnRpdGFuLXRleHQtZXhwcmVzcy12MScsXG4gICAgeyBzdXBwb3J0c0FnZW50czogdHJ1ZSB9LFxuICApO1xuXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVElUQU5fRU1CRURfVEVYVF9WMSA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdhbWF6b24udGl0YW4tZW1iZWQtdGV4dC12MScsXG4gICAgeyBzdXBwb3J0c0tub3dsZWRnZUJhc2U6IHRydWUsIHZlY3RvckRpbWVuc2lvbnM6IDE1MzYgfSxcbiAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBDT0hFUkVfRU1CRURfRU5HTElTSF9WMyA9IG5ldyBCZWRyb2NrRm91bmRhdGlvbk1vZGVsKFxuICAgICdjb2hlcmUuZW1iZWQtZW5nbGlzaC12MycsXG4gICAgeyBzdXBwb3J0c0tub3dsZWRnZUJhc2U6IHRydWUsIHZlY3RvckRpbWVuc2lvbnM6IDEwMjQgfSxcbiAgKTtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBDT0hFUkVfRU1CRURfTVVMVElMSU5HVUFMX1YzID0gbmV3IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwoXG4gICAgJ2NvaGVyZS5lbWJlZC1tdWx0aWxpbmd1YWwtdjMnLFxuICAgIHsgc3VwcG9ydHNLbm93bGVkZ2VCYXNlOiB0cnVlLCB2ZWN0b3JEaW1lbnNpb25zOiAxMDI0IH0sXG4gICk7XG5cbiAgcHVibGljIHJlYWRvbmx5IG1vZGVsSWQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHN1cHBvcnRzQWdlbnRzOiBib29sZWFuO1xuICBwdWJsaWMgcmVhZG9ubHkgdmVjdG9yRGltZW5zaW9ucz86IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IHN1cHBvcnRzS25vd2xlZGdlQmFzZTogYm9vbGVhbjtcbiAgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZywgcHJvcHM6IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWxQcm9wcyA9IHt9KSB7XG4gICAgdGhpcy5tb2RlbElkID0gdmFsdWU7XG4gICAgdGhpcy5zdXBwb3J0c0FnZW50cyA9IHByb3BzLnN1cHBvcnRzQWdlbnRzID8/IGZhbHNlO1xuICAgIHRoaXMudmVjdG9yRGltZW5zaW9ucyA9IHByb3BzLnZlY3RvckRpbWVuc2lvbnM7XG4gICAgdGhpcy5zdXBwb3J0c0tub3dsZWRnZUJhc2UgPSBwcm9wcy5zdXBwb3J0c0tub3dsZWRnZUJhc2UgPz8gZmFsc2U7XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm1vZGVsSWQ7XG4gIH1cblxuICBhc0Fybihjb25zdHJ1Y3Q6IElDb25zdHJ1Y3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IHJlZ2lvbiA9IGNkay5TdGFjay5vZihjb25zdHJ1Y3QpLnJlZ2lvbjtcbiAgICByZXR1cm4gYGFybjphd3M6YmVkcm9jazoke3JlZ2lvbn06OmZvdW5kYXRpb24tbW9kZWwvJHt0aGlzLm1vZGVsSWR9YDtcbiAgfVxufVxuIl19