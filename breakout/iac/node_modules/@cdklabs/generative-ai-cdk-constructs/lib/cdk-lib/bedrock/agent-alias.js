"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentAlias = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
const custom_resource_provider_1 = require("./custom-resource-provider");
class AgentAlias extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * TagManager facilitates a common implementation of tagging for Constructs
         */
        this.cdkTagManager = new cdk.TagManager(cdk.TagType.MAP, 'Custom::Bedrock-AgentAlias');
        const crProvider = custom_resource_provider_1.BedrockCRProvider.getProvider(this);
        const alias = new cdk.CustomResource(this, 'Alias', {
            serviceToken: crProvider.serviceToken,
            resourceType: 'Custom::Bedrock-AgentAlias',
            properties: {
                agentId: props.agentId,
                aliasName: props.aliasName ?? 'latest',
                resourceUpdates: props.resourceUpdates,
                agentVersion: props.agentVersion,
                tags: this.cdkTagManager.renderedTags,
            },
        });
        const aliasCRPolicy = new iam.Policy(this, 'AliasCRPolicy', {
            roles: [crProvider.role],
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:CreateAgentAlias',
                        'bedrock:UpdateAgentAlias',
                        'bedrock:DeleteAgentAlias',
                        'bedrock:PrepareAgent',
                        'bedrock:ListAgentAliases',
                        'bedrock:ListAgentVersions',
                        'bedrock:DeleteAgentVersion',
                        'bedrock:GetAgent',
                        'bedrock:TagResource',
                    ],
                    resources: [
                        cdk.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'agent-alias',
                            resourceName: '*',
                            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                        cdk.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'agent',
                            resourceName: '*',
                            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                    ],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(aliasCRPolicy, [
            {
                id: 'AwsSolutions-IAM5',
                reason: 'Bedrock Agent/Alias associations have wildcards restricted to agents and aliases in the account.',
            },
        ], true);
        alias.node.addDependency(aliasCRPolicy);
        alias.node.addDependency(crProvider);
        this.aliasId = alias.getAttString('agentAliasId');
        this.aliasArn = alias.getAttString('agentAliasArn');
        this.aliasName = alias.getAttString('agentAliasName');
    }
}
exports.AgentAlias = AgentAlias;
_a = JSII_RTTI_SYMBOL_1;
AgentAlias[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.AgentAlias", version: "0.1.122" };
//# sourceMappingURL=data:application/json;base64,