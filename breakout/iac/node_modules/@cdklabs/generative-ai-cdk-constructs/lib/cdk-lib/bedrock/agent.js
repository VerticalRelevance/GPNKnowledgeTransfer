"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePromptOverrideConfiguration = exports.validateInferenceConfiguration = exports.Agent = exports.PromptState = exports.PromptCreationMode = exports.ParserMode = exports.PromptType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
const agent_action_group_1 = require("./agent-action-group");
const agent_alias_1 = require("./agent-alias");
const custom_resource_provider_1 = require("./custom-resource-provider");
const utils_1 = require("../../common/helpers/utils");
/**
 * The step in the agent sequence that this prompt configuration applies to.
 */
var PromptType;
(function (PromptType) {
    PromptType["PRE_PROCESSING"] = "PRE_PROCESSING";
    PromptType["ORCHESTRATION"] = "ORCHESTRATION";
    PromptType["POST_PROCESSING"] = "POST_PROCESSING";
    PromptType["KNOWLEDGE_BASE_RESPONSE_GENERATION"] = "KNOWLEDGE_BASE_RESPONSE_GENERATION";
})(PromptType || (exports.PromptType = PromptType = {}));
/**
 * Specifies whether to override the default parser Lambda function when
 * parsing the raw foundation model output in the part of the agent sequence
 * defined by the promptType. If you set the field as OVERRIDEN, the
 * overrideLambda field in the PromptOverrideConfiguration must be specified
 * with the ARN of a Lambda function.
 */
var ParserMode;
(function (ParserMode) {
    ParserMode["DEFAULT"] = "DEFAULT";
    ParserMode["OVERRIDDEN"] = "OVERRIDDEN";
})(ParserMode || (exports.ParserMode = ParserMode = {}));
/**
 * Specifies whether to override the default prompt template for this
 * promptType. Set this value to OVERRIDDEN to use the prompt that you
 * provide in the basePromptTemplate. If you leave it as DEFAULT, the agent
 * uses a default prompt template.
 */
var PromptCreationMode;
(function (PromptCreationMode) {
    PromptCreationMode["DEFAULT"] = "DEFAULT";
    PromptCreationMode["OVERRIDDEN"] = "OVERRIDDEN";
})(PromptCreationMode || (exports.PromptCreationMode = PromptCreationMode = {}));
/**
 * Specifies whether to allow the agent to carry out the step specified in the
 * promptType. If you set this value to DISABLED, the agent skips that step.
 * The default state for each promptType is as follows.
 *
 *     PRE_PROCESSING – ENABLED
 *     ORCHESTRATION – ENABLED
 *     KNOWLEDGE_BASE_RESPONSE_GENERATION – ENABLED
 *     POST_PROCESSING – DISABLED
 */
var PromptState;
(function (PromptState) {
    PromptState["ENABLED"] = "ENABLED";
    PromptState["DISABLED"] = "DISABLED";
})(PromptState || (exports.PromptState = PromptState = {}));
/**
 * Deploy a Bedrock Agent.
 */
class Agent extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * TagManager facilitates a common implementation of tagging for Constructs
         */
        this.cdkTagManager = new cdk.TagManager(cdk.TagType.MAP, 'Custom::Bedrock-Agent');
        /**
         * A list of values to indicate if PrepareAgent or an Alias needs to be updated.
         * @private
         */
        this.resourceUpdates = [];
        validatePromptOverrideConfiguration(props.promptOverrideConfiguration);
        this.shouldPrepareAgent = props.shouldPrepareAgent ?? false;
        validateModel(props.foundationModel);
        this.name = props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'bedrock-agent', { maxLength: 32, lower: true, separator: '-' });
        this.role = new iam.Role(this, 'Role', {
            assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com'),
            roleName: (0, utils_1.generatePhysicalNameV2)(this, 'AmazonBedrockExecutionRoleForAgents_', { maxLength: 64, lower: false }),
        });
        this.role.assumeRolePolicy.addStatements(new iam.PolicyStatement({
            actions: ['sts:AssumeRole'],
            principals: [new iam.ServicePrincipal('bedrock.amazonaws.com')],
            conditions: {
                StringEquals: {
                    'aws:SourceAccount': cdk.Stack.of(this).account,
                },
                ArnLike: {
                    'aws:SourceArn': cdk.Stack.of(this).formatArn({
                        service: 'bedrock',
                        resource: 'agent',
                        resourceName: '*',
                        arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                    }),
                },
            },
        }));
        new iam.Policy(this, 'AgentFMPolicy', {
            roles: [this.role],
            statements: [
                new iam.PolicyStatement({
                    actions: ['bedrock:InvokeModel'],
                    resources: [props.foundationModel.asArn(this)],
                }),
            ],
        });
        if (props.knowledgeBases && props.knowledgeBases.length > 0) {
            new iam.Policy(this, 'AgentKBPolicy', {
                roles: [this.role],
                statements: [
                    new iam.PolicyStatement({
                        actions: [
                            'bedrock:UpdateKnowledgeBase',
                            'bedrock:Retrieve',
                        ],
                        resources: props.knowledgeBases.map(kb => kb.knowledgeBaseArn),
                    }),
                ],
            });
        }
        const crProvider = custom_resource_provider_1.BedrockCRProvider.getProvider(this);
        const agent = new cdk.CustomResource(this, 'Agent', {
            serviceToken: crProvider.serviceToken,
            resourceType: 'Custom::Bedrock-Agent',
            properties: {
                agentName: this.name,
                foundationModel: String(props.foundationModel),
                instruction: props.instruction,
                description: props.description,
                idleSessionTTLInSeconds: props.idleSessionTTL?.toSeconds(),
                agentResourceRoleArn: this.role.roleArn,
                customerEncryptionKeyArn: props.encryptionKey?.keyArn,
                tags: this.cdkTagManager.renderedTags,
                promptOverrideConfiguration: props.promptOverrideConfiguration,
                shouldPrepareAgent: this.shouldPrepareAgent,
            },
        });
        this.agentId = agent.getAttString('agentId');
        this.agentArn = agent.getAttString('agentArn');
        const agentCRPolicy = new iam.Policy(this, 'AgentCRPolicy', {
            roles: [crProvider.role],
            statements: [
                new iam.PolicyStatement({
                    actions: ['iam:PassRole'],
                    resources: [this.role.roleArn],
                }),
                new iam.PolicyStatement({
                    actions: ['bedrock:CreateAgent'],
                    resources: ['*'],
                }),
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:DeleteAgent',
                        'bedrock:UpdateAgent',
                        'bedrock:TagResource',
                        'bedrock:GetAgent',
                        'bedrock:PrepareAgent',
                    ],
                    resources: [
                        cdk.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'agent',
                            resourceName: '*',
                            arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                    ],
                }),
            ],
        });
        agent.node.addDependency(agentCRPolicy);
        agent.node.addDependency(crProvider);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(agentCRPolicy, [
            {
                id: 'AwsSolutions-IAM5',
                reason: "Bedrock CreateAgent can't be restricted by resource.",
            },
        ], true);
        this._addAliasDependency(agent.getAttString('updatedAt'));
        if (props.knowledgeBases && props.knowledgeBases.length > 0) {
            const kbAssocCRPolicy = new iam.Policy(this, 'KBAssocCRPolicy', {
                roles: [crProvider.role],
                statements: [
                    new iam.PolicyStatement({
                        actions: [
                            'bedrock:AssociateAgentKnowledgeBase',
                            'bedrock:UpdateAgentKnowledgeBase',
                            'bedrock:DisassociateAgentKnowledgeBase',
                        ],
                        resources: [
                            cdk.Stack.of(this).formatArn({
                                service: 'bedrock',
                                resource: 'agent',
                                resourceName: '*',
                                arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                            }),
                            cdk.Stack.of(this).formatArn({
                                service: 'bedrock',
                                resource: 'knowledge-base',
                                resourceName: '*',
                                arnFormat: cdk.ArnFormat.SLASH_RESOURCE_NAME,
                            }),
                        ],
                    }),
                ],
            });
            cdk_nag_1.NagSuppressions.addResourceSuppressions(kbAssocCRPolicy, [
                {
                    id: 'AwsSolutions-IAM5',
                    reason: 'Bedrock Agent/KB associations have wildcards restricted to agents and kbs in the account.',
                },
            ], true);
            for (let kb of props.knowledgeBases ?? []) {
                if (!kb.instruction) {
                    throw new Error('Agent Knowledge Bases require instructions.');
                }
                const kbAssoc = new cdk.CustomResource(this, `KBAssoc-${kb.name}`, {
                    serviceToken: crProvider.serviceToken,
                    resourceType: 'Custom::Bedrock-AgentKnowledgeBase',
                    properties: {
                        agentId: this.agentId,
                        knowledgeBaseId: kb.knowledgeBaseId,
                        description: kb.instruction,
                        shouldPrepareAgent: this.shouldPrepareAgent,
                    },
                });
                kbAssoc.node.addDependency(kbAssocCRPolicy);
                kbAssoc.node.addDependency(crProvider);
                this._addAliasDependency(kbAssoc.getAttString('updatedAt'));
            }
        }
        if (props.aliasName) {
            const alias = this.addAlias({
                aliasName: props.aliasName,
            });
            this.aliasId = alias.aliasId;
            this.aliasArn = alias.aliasArn;
            this.aliasName = alias.aliasName;
        }
    }
    /**
     * Add an alias to the agent.
     */
    addAlias(props) {
        const alias = new agent_alias_1.AgentAlias(this, `AgentAlias-${props.aliasName}`, {
            agentId: this.agentId,
            agentVersion: props.agentVersion,
            resourceUpdates: cdk.Lazy.list({ produce: () => this.resourceUpdates }),
            aliasName: props.aliasName,
        });
        return alias;
    }
    /**
     * Add an action group to the agent.
     */
    addActionGroup(props) {
        const actionGroupName = props.actionGroupName ?? (0, utils_1.generatePhysicalNameV2)(this, 'action-group', { maxLength: 100, separator: '-' });
        return new agent_action_group_1.AgentActionGroup(this, `AgentActionGroup-${actionGroupName}`, {
            agent: this,
            actionGroupName,
            description: props.description,
            parentActionGroupSignature: props.parentActionGroupSignature,
            actionGroupExecutor: props.actionGroupExecutor,
            actionGroupState: props.actionGroupState,
            apiSchema: props.apiSchema,
            shouldPrepareAgent: this.shouldPrepareAgent,
        });
    }
    /**
     * Register a dependency for aliases.
     *
     * @param updatedAt - The updatedAt of the resource that will be registered as a dependency.
     *
     * @internal This is an internal core function and should not be called directly.
     */
    _addAliasDependency(updatedAt) {
        if (updatedAt) {
            this.resourceUpdates.push(updatedAt);
        }
    }
}
exports.Agent = Agent;
_a = JSII_RTTI_SYMBOL_1;
Agent[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Agent", version: "0.1.122" };
/**
 * Validate that Bedrock Agents can use the selected model.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateModel(foundationModel) {
    if (!foundationModel.supportsAgents) {
        throw new Error(`The model ${foundationModel} is not supported by Bedrock Agents.`);
    }
}
/**
 * Validate the inferenceConfiguration of a prompt override.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateInferenceConfiguration(inferenceConfiguration) {
    if (inferenceConfiguration.topK < 0 || inferenceConfiguration.topK > 500) {
        throw new Error('topK must be between 0 and 500');
    }
    if (!Number.isInteger(inferenceConfiguration.topK)) {
        throw new Error('topK must be an integer');
    }
    if (inferenceConfiguration.stopSequences.length > 4) {
        throw new Error('stopSequences cannot contain more than 4 elements');
    }
    if (inferenceConfiguration.maximumLength < 0 || inferenceConfiguration.maximumLength > 4096) {
        throw new Error('maximumLength must be between 0 and 4096');
    }
    if (!Number.isInteger(inferenceConfiguration.maximumLength)) {
        throw new Error('maximumLength must be an integer');
    }
    if (inferenceConfiguration.topP < 0 || inferenceConfiguration.topP > 1) {
        throw new Error('topP must be between 0 and 1');
    }
    if (inferenceConfiguration.temperature < 0 || inferenceConfiguration.temperature > 1) {
        throw new Error('temperature must be between 0 and 1');
    }
}
exports.validateInferenceConfiguration = validateInferenceConfiguration;
/**
 * Validate the promptOverrideConfiguration.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validatePromptOverrideConfiguration(promptOverrideConfiguration) {
    if (!promptOverrideConfiguration) {
        return;
    }
    if (promptOverrideConfiguration.overrideLambda &&
        promptOverrideConfiguration.promptConfigurations.some(pc => pc.parserMode !== ParserMode.OVERRIDDEN)) {
        throw new Error('overrideLambda can only be used if all promptConfigurations have a parserMode value of OVERRIDDEN');
    }
    if (!promptOverrideConfiguration.overrideLambda &&
        promptOverrideConfiguration.promptConfigurations.some(pc => pc.parserMode === ParserMode.OVERRIDDEN)) {
        throw new Error('At least one promptConfiguration has a parserMode value of OVERRIDDEN, but no overrideLambda is specified');
    }
    // check inferenceConfiguration number types
    Object.values(promptOverrideConfiguration.promptConfigurations).forEach(pc => {
        validateInferenceConfiguration(pc.inferenceConfiguration);
    });
    return;
}
exports.validatePromptOverrideConfiguration = validatePromptOverrideConfiguration;
//# sourceMappingURL=data:application/json;base64,