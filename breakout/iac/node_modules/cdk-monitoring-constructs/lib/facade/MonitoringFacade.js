"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringFacade = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const MonitoringAspect_1 = require("./MonitoringAspect");
const common_1 = require("../common");
const dashboard_1 = require("../dashboard");
const DynamicDashboardSegment_1 = require("../dashboard/DynamicDashboardSegment");
const monitoring_1 = require("../monitoring");
/**
 * An implementation of a {@link MonitoringScope}.
 *
 * This is a convenient main entrypoint to monitor resources.
 *
 * Provides methods for retrieving and creating alarms based on added segments that are subclasses of
 * {@link Monitoring}.
 */
class MonitoringFacade extends common_1.MonitoringScope {
    constructor(scope, id, props) {
        super(scope, id);
        this.metricFactoryDefaults = props?.metricFactoryDefaults ?? {};
        this.alarmFactoryDefaults = props?.alarmFactoryDefaults ?? {
            alarmNamePrefix: id,
            actionsEnabled: true,
        };
        this.dashboardFactory =
            props?.dashboardFactory ??
                new dashboard_1.DefaultDashboardFactory(this, `${id}-Dashboards`, {
                    dashboardNamePrefix: id,
                });
        this.createdSegments = [];
    }
    // FACTORIES
    // =========
    createAlarmFactory(alarmNamePrefix) {
        return new common_1.AlarmFactory(this, {
            globalAlarmDefaults: this.alarmFactoryDefaults,
            globalMetricDefaults: this.metricFactoryDefaults,
            localAlarmNamePrefix: alarmNamePrefix,
        });
    }
    createAwsConsoleUrlFactory() {
        const stack = aws_cdk_lib_1.Stack.of(this);
        const awsAccountId = this.metricFactoryDefaults.account ?? stack.account;
        const awsAccountRegion = this.metricFactoryDefaults.region ?? stack.region;
        return new common_1.AwsConsoleUrlFactory({ awsAccountRegion, awsAccountId });
    }
    createMetricFactory() {
        return new common_1.MetricFactory({
            globalDefaults: this.metricFactoryDefaults,
        }, this);
    }
    createWidgetFactory() {
        return new dashboard_1.DefaultWidgetFactory();
    }
    // GENERIC
    // =======
    /**
     * Adds a dashboard segment which returns dynamic content depending on dashboard type.
     *
     * @param segment dynamic segment to add.
     */
    addDynamicSegment(segment) {
        this.dashboardFactory?.addDynamicSegment(segment);
        this.createdSegments.push(segment);
        return this;
    }
    /**
     * Adds a dashboard segment to go on one of the {@link DefaultDashboards}.
     *
     * @param segment segment to add
     * @param overrideProps props to specify which default dashboards this segment is added to.
     */
    addSegment(segment, overrideProps) {
        const adaptedSegment = new DynamicDashboardSegment_1.StaticSegmentDynamicAdapter({
            segment,
            overrideProps,
        });
        this.dashboardFactory?.addDynamicSegment(adaptedSegment);
        this.createdSegments.push(segment);
        return this;
    }
    /**
     * @deprecated - prefer calling dashboardFactory.getDashboard directly.
     *
     * @returns default detail dashboard
     */
    createdDashboard() {
        return this.dashboardFactory?.getDashboard(dashboard_1.DefaultDashboards.DETAIL);
    }
    /**
     * @deprecated - prefer calling dashboardFactory.getDashboard directly.
     *
     * @returns default summary dashboard
     */
    createdSummaryDashboard() {
        return this.dashboardFactory?.getDashboard(dashboard_1.DefaultDashboards.SUMMARY);
    }
    /**
     * @deprecated - prefer calling dashboardFactory.getDashboard directly.
     *
     * @returns default alarms dashboard
     */
    createdAlarmDashboard() {
        return this.dashboardFactory?.getDashboard(dashboard_1.DefaultDashboards.ALARMS);
    }
    /**
     * Returns the created alarms across all added segments that subclass {@link Monitoring}
     * added up until now.
     */
    createdAlarms() {
        return this.createdMonitorings().flatMap((monitoring) => monitoring.createdAlarms());
    }
    /**
     * Returns a subset of created alarms that are marked by a specific custom tag.
     *
     * @param customTag tag to filter alarms by
     */
    createdAlarmsWithTag(customTag) {
        return this.createdAlarms().filter((alarm) => alarm.customTags?.includes(customTag));
    }
    /**
     * Returns a subset of created alarms that are marked by a specific disambiguator.
     *
     * @param disambiguator disambiguator to filter alarms by
     */
    createdAlarmsWithDisambiguator(disambiguator) {
        return this.createdAlarms().filter((alarm) => alarm.disambiguator === disambiguator);
    }
    /**
     * Returns the added segments that subclass {@link Monitoring}.
     */
    createdMonitorings() {
        return this.createdSegments
            .filter((s) => s instanceof common_1.Monitoring)
            .map((s) => s);
    }
    // COMPOSITE ALARM CREATORS
    // ========================
    /**
     * Finds a subset of created alarms that are marked by a specific custom tag and creates a composite alarm.
     * This composite alarm is created with an 'OR' condition, so it triggers with any child alarm.
     * NOTE: This composite alarm is not added among other alarms, so it is not returned by createdAlarms() calls.
     *
     * @param customTag tag to filter alarms by
     * @param props customization options
     */
    createCompositeAlarmUsingTag(customTag, props) {
        const alarms = this.createdAlarmsWithTag(customTag);
        if (alarms.length > 0) {
            const disambiguator = props?.disambiguator ?? customTag;
            const alarmFactory = this.createAlarmFactory("Composite");
            return alarmFactory.addCompositeAlarm(alarms, {
                ...(props ?? {}),
                disambiguator,
            });
        }
        return undefined;
    }
    /**
     * Finds a subset of created alarms that are marked by a specific disambiguator and creates a composite alarm.
     * This composite alarm is created with an 'OR' condition, so it triggers with any child alarm.
     * NOTE: This composite alarm is not added among other alarms, so it is not returned by createdAlarms() calls.
     *
     * @param alarmDisambiguator disambiguator to filter alarms by
     * @param props customization options
     */
    createCompositeAlarmUsingDisambiguator(alarmDisambiguator, props) {
        const alarms = this.createdAlarmsWithDisambiguator(alarmDisambiguator);
        if (alarms.length > 0) {
            const disambiguator = props?.disambiguator ?? alarmDisambiguator;
            const alarmFactory = this.createAlarmFactory("Composite");
            return alarmFactory.addCompositeAlarm(alarms, {
                ...(props ?? {}),
                disambiguator,
            });
        }
        return undefined;
    }
    // BASIC WIDGETS
    // =============
    addLargeHeader(text, addToSummary, addToAlarm) {
        this.addWidget(new dashboard_1.HeaderWidget(text, dashboard_1.HeaderLevel.LARGE), addToSummary ?? false, addToAlarm ?? false);
        return this;
    }
    addMediumHeader(text, addToSummary, addToAlarm) {
        this.addWidget(new dashboard_1.HeaderWidget(text, dashboard_1.HeaderLevel.MEDIUM), addToSummary ?? false, addToAlarm ?? false);
        return this;
    }
    addSmallHeader(text, addToSummary, addToAlarm) {
        this.addWidget(new dashboard_1.HeaderWidget(text, dashboard_1.HeaderLevel.SMALL), addToSummary ?? false, addToAlarm ?? false);
        return this;
    }
    addWidget(widget, addToSummary, addToAlarm) {
        this.addSegment(new dashboard_1.SingleWidgetDashboardSegment(widget), {
            addToAlarmDashboard: addToAlarm ?? true,
            addToSummaryDashboard: addToSummary ?? true,
            addToDetailDashboard: true,
        });
        return this;
    }
    // RESOURCE MONITORING
    // ===================
    /**
     * Uses an aspect to automatically monitor all resources in the given scope.
     *
     * @param scope Scope with resources to monitor.
     * @param aspectProps Optional configuration.
     *
     * @experimental
     */
    monitorScope(scope, aspectProps) {
        const aspect = new MonitoringAspect_1.MonitoringAspect(this, aspectProps);
        aws_cdk_lib_1.Aspects.of(scope).add(aspect);
        return this;
    }
    monitorApiGateway(props) {
        const segment = new monitoring_1.ApiGatewayMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorApiGatewayV2HttpApi(props) {
        const segment = new monitoring_1.ApiGatewayV2HttpApiMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorAppSyncApi(props) {
        const segment = new monitoring_1.AppSyncMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorAuroraCluster(props) {
        const segment = new monitoring_1.AuroraClusterMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorCertificate(props) {
        const segment = new monitoring_1.CertificateManagerMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorCloudFrontDistribution(props) {
        const segment = new monitoring_1.CloudFrontDistributionMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorCodeBuildProject(props) {
        const segment = new monitoring_1.CodeBuildProjectMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorDocumentDbCluster(props) {
        const segment = new monitoring_1.DocumentDbMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorDynamoTable(props) {
        const segment = new monitoring_1.DynamoTableMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorDynamoTableGlobalSecondaryIndex(props) {
        const segment = new monitoring_1.DynamoTableGlobalSecondaryIndexMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorEC2Instances(props) {
        const segment = new monitoring_1.EC2Monitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorElasticsearchCluster(props) {
        const segment = new monitoring_1.OpenSearchClusterMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorOpenSearchCluster(props) {
        const segment = new monitoring_1.OpenSearchClusterMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorElastiCacheCluster(props) {
        const segment = new monitoring_1.ElastiCacheClusterMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorGlueJob(props) {
        const segment = new monitoring_1.GlueJobMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorFargateService(props) {
        const segment = new monitoring_1.FargateServiceMonitoring(this, {
            ...props,
            fargateService: props.fargateService.service,
            loadBalancer: props.fargateService.loadBalancer,
            targetGroup: props.fargateService.targetGroup,
        });
        this.addSegment(segment, props);
        return this;
    }
    monitorSimpleFargateService(props) {
        const segment = new monitoring_1.FargateServiceMonitoring(this, {
            ...props,
            fargateService: props.fargateService,
        });
        this.addSegment(segment, props);
        return this;
    }
    monitorFargateNetworkLoadBalancer(props) {
        const segment = new monitoring_1.FargateServiceMonitoring(this, {
            ...props,
            fargateService: props.fargateService,
            loadBalancer: props.networkLoadBalancer,
            targetGroup: props.networkTargetGroup,
        });
        this.addSegment(segment, props);
        return this;
    }
    monitorFargateApplicationLoadBalancer(props) {
        const segment = new monitoring_1.FargateServiceMonitoring(this, {
            ...props,
            fargateService: props.fargateService,
            loadBalancer: props.applicationLoadBalancer,
            targetGroup: props.applicationTargetGroup,
        });
        this.addSegment(segment, props);
        return this;
    }
    monitorEc2Service(props) {
        const segment = new monitoring_1.Ec2ServiceMonitoring(this, {
            ...props,
            ec2Service: props.ec2Service.service,
            loadBalancer: props.ec2Service.loadBalancer,
            targetGroup: props.ec2Service.targetGroup,
        });
        this.addSegment(segment, props);
        return this;
    }
    monitorSimpleEc2Service(props) {
        const segment = new monitoring_1.Ec2ServiceMonitoring(this, {
            ...props,
            ec2Service: props.ec2Service,
        });
        this.addSegment(segment, props);
        return this;
    }
    monitorEc2NetworkLoadBalancer(props) {
        const segment = new monitoring_1.Ec2ServiceMonitoring(this, {
            ...props,
            ec2Service: props.ec2Service,
            loadBalancer: props.networkLoadBalancer,
            targetGroup: props.networkTargetGroup,
        });
        this.addSegment(segment, props);
        return this;
    }
    monitorEc2ApplicationLoadBalancer(props) {
        const segment = new monitoring_1.Ec2ServiceMonitoring(this, {
            ...props,
            ec2Service: props.ec2Service,
            loadBalancer: props.applicationLoadBalancer,
            targetGroup: props.applicationTargetGroup,
        });
        this.addSegment(segment, props);
        return this;
    }
    monitorQueueProcessingFargateService(props) {
        monitoring_1.getQueueProcessingFargateServiceMonitoring(this, props).forEach((segment) => this.addSegment(segment));
        return this;
    }
    monitorQueueProcessingEc2Service(props) {
        monitoring_1.getQueueProcessingEc2ServiceMonitoring(this, props).forEach((segment) => this.addSegment(segment));
        return this;
    }
    monitorAutoScalingGroup(props) {
        const segment = new monitoring_1.AutoScalingGroupMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorKinesisFirehose(props) {
        const segment = new monitoring_1.KinesisFirehoseMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorKinesisDataStream(props) {
        const segment = new monitoring_1.KinesisDataStreamMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorKinesisDataAnalytics(props) {
        const segment = new monitoring_1.KinesisDataAnalyticsMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorLambdaFunction(props) {
        const segment = new monitoring_1.LambdaFunctionMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorNetworkLoadBalancer(props) {
        const segment = new monitoring_1.NetworkLoadBalancerMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorRdsCluster(props) {
        const segment = new monitoring_1.RdsClusterMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorRdsInstance(props) {
        const segment = new monitoring_1.RdsInstanceMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorRedshiftCluster(props) {
        const segment = new monitoring_1.RedshiftClusterMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorSecretsManager(props) {
        const segment = new monitoring_1.SecretsManagerMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorSecretsManagerSecret(props) {
        const segment = new monitoring_1.SecretsManagerSecretMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorSnsTopic(props) {
        const segment = new monitoring_1.SnsTopicMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorSqsQueue(props) {
        const segment = new monitoring_1.SqsQueueMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorSqsQueueWithDlq(props) {
        const segment = new monitoring_1.SqsQueueMonitoringWithDlq(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorStepFunction(props) {
        const segment = new monitoring_1.StepFunctionMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorStepFunctionActivity(props) {
        const segment = new monitoring_1.StepFunctionActivityMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorStepFunctionLambdaIntegration(props) {
        const segment = new monitoring_1.StepFunctionLambdaIntegrationMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorStepFunctionServiceIntegration(props) {
        const segment = new monitoring_1.StepFunctionServiceIntegrationMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorS3Bucket(props) {
        const segment = new monitoring_1.S3BucketMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorLog(props) {
        const segment = new monitoring_1.LogMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorSyntheticsCanary(props) {
        const segment = new monitoring_1.SyntheticsCanaryMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorWebApplicationFirewallAclV2(props) {
        const segment = new monitoring_1.WafV2Monitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorBilling(props) {
        const segment = new monitoring_1.BillingMonitoring(this, props ?? {});
        this.addSegment(segment, props);
        return this;
    }
    monitorCustom(props) {
        const segment = new monitoring_1.CustomMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
    monitorFluentBit(props) {
        const segment = new monitoring_1.FluentBitMonitoring(this, props);
        this.addSegment(segment, props);
        return this;
    }
}
exports.MonitoringFacade = MonitoringFacade;
_a = JSII_RTTI_SYMBOL_1;
MonitoringFacade[_a] = { fqn: "cdk-monitoring-constructs.MonitoringFacade", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,