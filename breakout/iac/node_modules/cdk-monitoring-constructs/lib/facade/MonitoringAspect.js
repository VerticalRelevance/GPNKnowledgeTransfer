"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringAspect = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const apigw = require("aws-cdk-lib/aws-apigateway");
const apigwv2 = require("aws-cdk-lib/aws-apigatewayv2");
const appsync = require("aws-cdk-lib/aws-appsync");
const autoscaling = require("aws-cdk-lib/aws-autoscaling");
const acm = require("aws-cdk-lib/aws-certificatemanager");
const cloudfront = require("aws-cdk-lib/aws-cloudfront");
const codebuild = require("aws-cdk-lib/aws-codebuild");
const docdb = require("aws-cdk-lib/aws-docdb");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const elasticsearch = require("aws-cdk-lib/aws-elasticsearch");
const glue = require("aws-cdk-lib/aws-glue");
const kinesis = require("aws-cdk-lib/aws-kinesis");
const kinesisanalytics = require("aws-cdk-lib/aws-kinesisanalytics");
const kinesisfirehose = require("aws-cdk-lib/aws-kinesisfirehose");
const lambda = require("aws-cdk-lib/aws-lambda");
const opensearch = require("aws-cdk-lib/aws-opensearchservice");
const rds = require("aws-cdk-lib/aws-rds");
const aws_redshift_1 = require("aws-cdk-lib/aws-redshift");
const s3 = require("aws-cdk-lib/aws-s3");
const secretsmanager = require("aws-cdk-lib/aws-secretsmanager");
const sns = require("aws-cdk-lib/aws-sns");
const sqs = require("aws-cdk-lib/aws-sqs");
const stepfunctions = require("aws-cdk-lib/aws-stepfunctions");
const synthetics = require("aws-cdk-lib/aws-synthetics");
const wafv2 = require("aws-cdk-lib/aws-wafv2");
const monitoring_1 = require("../monitoring");
/**
 * A CDK aspect that adds support for monitoring all resources within scope.
 */
class MonitoringAspect {
    constructor(monitoringFacade, props = {}) {
        this.monitoringFacade = monitoringFacade;
        this.props = props;
        /**
         * Whether or not we've added a monitoring to the scope for node independent monitorings.
         */
        this.addedNodeIndependentMonitoringToScope = false;
    }
    visit(node) {
        this.monitorAcm(node);
        this.monitorApiGateway(node);
        this.monitorApiGatewayV2(node);
        this.monitorAppSync(node);
        this.monitorAuroraCluster(node);
        this.monitorAutoScalingGroup(node);
        this.monitorCloudFront(node);
        this.monitorCodeBuild(node);
        this.monitorDocumentDb(node);
        this.monitorDynamoDb(node);
        this.monitorGlue(node);
        this.monitorKinesisAnalytics(node);
        this.monitorKinesisDataStream(node);
        this.monitorKinesisFirehose(node);
        this.monitorLambda(node);
        this.monitorOpenSearch(node);
        this.monitorRdsCluster(node);
        this.monitorRdsInstance(node);
        this.monitorRedshift(node);
        this.monitorS3(node);
        this.monitorSecretsManager(node);
        this.monitorSns(node);
        this.monitorSqs(node);
        this.monitorStepFunctions(node);
        this.monitorSyntheticsCanaries(node);
        this.monitorWebApplicationFirewallV2Acls(node);
        if (!this.addedNodeIndependentMonitoringToScope) {
            this.addedNodeIndependentMonitoringToScope = true;
            this.monitorEc2();
            this.monitorBilling();
            this.monitorElasticCache();
        }
    }
    getMonitoringDetails(aspectOptions) {
        const isEnabled = aspectOptions?.enabled ?? true;
        const props = aspectOptions?.props;
        return [isEnabled, props];
    }
    monitorAcm(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.acm);
        if (isEnabled && node instanceof acm.Certificate) {
            this.monitoringFacade.monitorCertificate({
                certificate: node,
                alarmFriendlyName: node.node.path,
                ...props,
            });
        }
    }
    monitorApiGateway(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.apiGateway);
        if (isEnabled && node instanceof apigw.RestApi) {
            this.monitoringFacade.monitorApiGateway({
                api: node,
                apiStage: node.deploymentStage.stageName,
                ...props,
            });
        }
    }
    monitorApiGatewayV2(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.apiGatewayV2);
        if (isEnabled && node instanceof apigwv2.HttpApi) {
            this.monitoringFacade.monitorApiGatewayV2HttpApi({
                api: node,
                ...props,
            });
        }
    }
    monitorAppSync(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.appSync);
        if (isEnabled && node instanceof appsync.GraphqlApi) {
            this.monitoringFacade.monitorAppSyncApi({
                api: node,
                alarmFriendlyName: node.node.path,
                ...props,
            });
        }
    }
    monitorAuroraCluster(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.auroraCluster);
        if (isEnabled && node instanceof rds.ServerlessCluster) {
            this.monitoringFacade.monitorAuroraCluster({
                cluster: node,
                alarmFriendlyName: node.node.path,
                ...props,
            });
        }
    }
    monitorAutoScalingGroup(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.autoScalingGroup);
        if (isEnabled && node instanceof autoscaling.AutoScalingGroup) {
            this.monitoringFacade.monitorAutoScalingGroup({
                autoScalingGroup: node,
                ...props,
            });
        }
    }
    monitorBilling() {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.billing);
        if (isEnabled) {
            this.monitoringFacade.monitorBilling({
                ...props,
                alarmFriendlyName: "Billing",
            });
        }
    }
    monitorCloudFront(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.cloudFront);
        if (isEnabled && node instanceof cloudfront.Distribution) {
            this.monitoringFacade.monitorCloudFrontDistribution({
                distribution: node,
                ...props,
            });
        }
    }
    monitorCodeBuild(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.codeBuild);
        if (isEnabled && node instanceof codebuild.Project) {
            this.monitoringFacade.monitorCodeBuildProject({
                project: node,
                ...props,
            });
        }
    }
    monitorDocumentDb(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.documentDb);
        if (isEnabled && node instanceof docdb.DatabaseCluster) {
            this.monitoringFacade.monitorDocumentDbCluster({
                cluster: node,
                alarmFriendlyName: node.node.path,
                ...props,
            });
        }
    }
    monitorDynamoDb(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.dynamoDB);
        if (isEnabled && node instanceof dynamodb.Table) {
            this.monitoringFacade.monitorDynamoTable({
                table: node,
                ...props,
            });
        }
    }
    monitorEc2() {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.ec2);
        if (isEnabled) {
            this.monitoringFacade.monitorEC2Instances({
                ...props,
            });
        }
    }
    monitorElasticCache() {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.elasticCache);
        if (isEnabled) {
            this.monitoringFacade.monitorElastiCacheCluster({
                clusterType: monitoring_1.ElastiCacheClusterType.MEMCACHED,
                ...props,
            });
            this.monitoringFacade.monitorElastiCacheCluster({
                clusterType: monitoring_1.ElastiCacheClusterType.REDIS,
                ...props,
            });
        }
    }
    monitorGlue(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.glue);
        if (isEnabled && node instanceof glue.CfnJob) {
            this.monitoringFacade.monitorGlueJob({
                jobName: node.name,
                ...props,
            });
        }
    }
    monitorKinesisAnalytics(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.kinesisDataAnalytics);
        if (isEnabled && node instanceof kinesisanalytics.CfnApplication) {
            this.monitoringFacade.monitorKinesisDataAnalytics({
                application: node.applicationName,
                alarmFriendlyName: node.node.path,
                ...props,
            });
        }
    }
    monitorKinesisDataStream(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.kinesisDataStream);
        if (isEnabled && node instanceof kinesis.CfnStream) {
            this.monitoringFacade.monitorKinesisDataStream({
                streamName: node.name,
                alarmFriendlyName: node.node.path,
                ...props,
            });
        }
    }
    monitorKinesisFirehose(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.kinesisFirehose);
        if (isEnabled && node instanceof kinesisfirehose.CfnDeliveryStream) {
            this.monitoringFacade.monitorKinesisFirehose({
                deliveryStreamName: node.deliveryStreamName,
                alarmFriendlyName: node.node.path,
                ...props,
            });
        }
    }
    monitorLambda(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.lambda);
        if (isEnabled && node instanceof lambda.Function) {
            this.monitoringFacade.monitorLambdaFunction({
                lambdaFunction: node,
                ...props,
            });
        }
    }
    monitorOpenSearch(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.openSearch);
        if (isEnabled &&
            (node instanceof elasticsearch.Domain ||
                node instanceof elasticsearch.CfnDomain ||
                node instanceof opensearch.Domain ||
                node instanceof opensearch.CfnDomain)) {
            this.monitoringFacade.monitorOpenSearchCluster({
                domain: node,
                ...props,
            });
        }
    }
    monitorRdsCluster(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.rdsCluster ?? this.props.rds);
        if (isEnabled && node instanceof rds.DatabaseCluster) {
            this.monitoringFacade.monitorRdsCluster({
                cluster: node,
                alarmFriendlyName: node.node.path,
                ...props,
            });
        }
    }
    monitorRdsInstance(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.rdsInstance);
        if (isEnabled && node instanceof rds.DatabaseInstance) {
            this.monitoringFacade.monitorRdsInstance({
                instance: node,
                alarmFriendlyName: node.node.path,
                ...props,
            });
        }
    }
    monitorRedshift(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.redshift);
        if (isEnabled && this.isProbablyL2RedshiftCluster(node)) {
            const cfnCluster = node.cluster;
            this.monitoringFacade.monitorRedshiftCluster({
                clusterIdentifier: cfnCluster.ref,
                alarmFriendlyName: cfnCluster.node.path,
                ...props,
            });
        }
    }
    isProbablyL2RedshiftCluster(node) {
        return (node.cluster instanceof aws_redshift_1.CfnCluster &&
            !!node.clusterName &&
            !!node.node?.path);
    }
    monitorS3(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.s3);
        if (isEnabled && node instanceof s3.Bucket) {
            this.monitoringFacade.monitorS3Bucket({
                bucket: node,
                ...props,
            });
        }
    }
    monitorSecretsManager(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.secretsManager);
        if (isEnabled && node instanceof secretsmanager.Secret) {
            this.monitoringFacade.monitorSecretsManagerSecret({
                secret: node,
                ...props,
            });
        }
    }
    monitorSns(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.sns);
        if (isEnabled && node instanceof sns.Topic) {
            this.monitoringFacade.monitorSnsTopic({
                topic: node,
                ...props,
            });
        }
    }
    monitorSqs(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.sqs);
        if (isEnabled && node instanceof sqs.Queue) {
            this.monitoringFacade.monitorSqsQueue({
                queue: node,
                ...props,
            });
        }
    }
    monitorStepFunctions(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.stepFunctions);
        if (isEnabled && node instanceof stepfunctions.StateMachine) {
            this.monitoringFacade.monitorStepFunction({
                stateMachine: node,
                ...props,
            });
        }
    }
    monitorSyntheticsCanaries(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.syntheticsCanaries);
        if (isEnabled && node instanceof synthetics.Canary) {
            this.monitoringFacade.monitorSyntheticsCanary({
                canary: node,
                ...props,
            });
        }
    }
    monitorWebApplicationFirewallV2Acls(node) {
        const [isEnabled, props] = this.getMonitoringDetails(this.props.webApplicationFirewallAclV2);
        if (isEnabled && node instanceof wafv2.CfnWebACL) {
            const regionProps = {};
            if (node.scope === "REGIONAL") {
                regionProps.region = aws_cdk_lib_1.Stack.of(node).region;
            }
            this.monitoringFacade.monitorWebApplicationFirewallAclV2({
                acl: node,
                ...regionProps,
                ...props,
            });
        }
    }
}
exports.MonitoringAspect = MonitoringAspect;
_a = JSII_RTTI_SYMBOL_1;
MonitoringAspect[_a] = { fqn: "cdk-monitoring-constructs.MonitoringAspect", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,