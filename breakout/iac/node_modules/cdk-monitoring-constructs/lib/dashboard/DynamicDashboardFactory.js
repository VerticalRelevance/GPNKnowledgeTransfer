"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicDashboardFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const constructs_1 = require("constructs");
const BitmapDashboard_1 = require("./BitmapDashboard");
const DashboardRenderingPreference_1 = require("./DashboardRenderingPreference");
const DashboardWithBitmapCopy_1 = require("./DashboardWithBitmapCopy");
const DefaultDashboardFactory_1 = require("./DefaultDashboardFactory");
class DynamicDashboardFactory extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.dashboards = {};
        props.dashboardConfigs.forEach((dashboardConfig) => {
            if (this.dashboards[dashboardConfig.name]) {
                throw new Error(`Duplicate dashboard name found: ${dashboardConfig.name}`);
            }
            if (Object.values(DefaultDashboardFactory_1.DefaultDashboards).includes(dashboardConfig.name)) {
                throw new Error(`${dashboardConfig.name} is a reserved name and cannot be used`);
            }
            const renderingPreference = dashboardConfig.renderingPreference ??
                DashboardRenderingPreference_1.DashboardRenderingPreference.INTERACTIVE_ONLY;
            const start = "-" +
                (dashboardConfig.range?.toIsoString() ??
                    aws_cdk_lib_1.Duration.hours(8).toIsoString());
            const dashboard = this.createDashboard(renderingPreference, dashboardConfig.name, {
                dashboardName: `${props.dashboardNamePrefix}-${dashboardConfig.name}`,
                start,
                periodOverride: dashboardConfig.periodOverride ?? aws_cloudwatch_1.PeriodOverride.INHERIT,
            });
            this.dashboards[dashboardConfig.name] = dashboard;
        });
    }
    createDashboard(renderingPreference, id, props) {
        switch (renderingPreference) {
            case DashboardRenderingPreference_1.DashboardRenderingPreference.INTERACTIVE_ONLY:
                return new aws_cloudwatch_1.Dashboard(this, id, props);
            case DashboardRenderingPreference_1.DashboardRenderingPreference.BITMAP_ONLY:
                return new BitmapDashboard_1.BitmapDashboard(this, id, props);
            case DashboardRenderingPreference_1.DashboardRenderingPreference.INTERACTIVE_AND_BITMAP:
                return new DashboardWithBitmapCopy_1.DashboardWithBitmapCopy(this, id, props);
        }
    }
    addDynamicSegment(segment) {
        for (const type in this.dashboards) {
            const dashboard = this.dashboards[type];
            dashboard.addWidgets(...segment.widgetsForDashboard(type));
        }
    }
    getDashboard(type) {
        return this.dashboards[type];
    }
}
exports.DynamicDashboardFactory = DynamicDashboardFactory;
_a = JSII_RTTI_SYMBOL_1;
DynamicDashboardFactory[_a] = { fqn: "cdk-monitoring-constructs.DynamicDashboardFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,