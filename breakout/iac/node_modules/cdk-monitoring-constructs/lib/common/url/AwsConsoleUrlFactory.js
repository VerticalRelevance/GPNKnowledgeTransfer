"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsConsoleUrlFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const monitoring_1 = require("../../monitoring");
class AwsConsoleUrlFactory {
    constructor(props) {
        this.awsAccountId = props.awsAccountId;
        this.awsAccountRegion = props.awsAccountRegion;
    }
    getAwsConsoleUrl(destinationUrl) {
        if (this.awsAccountId) {
            return aws_cdk_lib_1.Lazy.uncachedString({
                produce: (context) => {
                    if (destinationUrl) {
                        return this.getResolvedDestinationUrl(context, destinationUrl);
                    }
                    // simply go to the home page of the AWS console
                    return `https://${this.awsAccountRegion}.console.aws.amazon.com`;
                },
            });
        }
        return undefined;
    }
    getApiGatewayUrl(restApiId) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/apigateway/home?region=${region}#/apis/${restApiId}/dashboard`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getCloudFrontDistributionUrl(distributionId) {
        const destinationUrl = `https://console.aws.amazon.com/cloudfront/v2/home#/monitoring/${distributionId}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getCloudWatchLogGroupUrl(logGroupName) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/cloudwatch/home?region=${region}#logsV2:log-groups/log-group/${logGroupName}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getCodeBuildProjectUrl(projectName) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/codebuild/home?region=${region}#/projects/${projectName}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getDocumentDbClusterUrl(clusterId) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/docdb/home?region=${region}#cluster-details/${clusterId}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getDynamoTableUrl(tableName) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/dynamodb/home?region=${region}#tables:selected=${tableName}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getElastiCacheClusterUrl(clusterId, clusterType) {
        const region = this.awsAccountRegion;
        switch (clusterType) {
            case monitoring_1.ElastiCacheClusterType.MEMCACHED:
                const destinationUrlMemcached = `https://${region}.console.aws.amazon.com/elasticache/home?region=${region}#/memcached/${clusterId}`;
                return this.getAwsConsoleUrl(destinationUrlMemcached);
            case monitoring_1.ElastiCacheClusterType.REDIS:
                const destinationUrlRedis = `https://${region}.console.aws.amazon.com/elasticache/home?region=${region}#/redis/${clusterId}`;
                return this.getAwsConsoleUrl(destinationUrlRedis);
            default:
                throw new Error(`Invalid cache type: ${clusterType}`);
        }
    }
    getKinesisAnalyticsUrl(application) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/kinesisanalytics/home?region=${region}#/details?applicationName=${application}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getKinesisDataStreamUrl(streamName) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/kinesis/home?region=${region}#/streams/details/${streamName}/monitoring`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getKinesisFirehoseDeliveryStreamUrl(streamName) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/firehose/home?region=${region}#/details/${streamName}/monitoring`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getLambdaFunctionUrl(functionName) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/lambda/home?region=${region}#/functions/${functionName}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getOpenSearchClusterUrl(domainName) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/es/home?region=${region}#domain:resource=${domainName};action=dashboard;tab=TAB_CLUSTER_HEALTH_ID_V2`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getRdsClusterUrl(clusterId) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/rds/home?region=${region}#database:id=${clusterId};is-cluster=true;tab=monitoring`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getRdsInstanceUrl(instanceId) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/rds/home?region=${region}#database:id=${instanceId};is-cluster=false;tab=monitoring`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getRedshiftClusterUrl(clusterId) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/redshiftv2/home?region=${region}#cluster-details?cluster=${clusterId}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getSnsTopicUrl(topicArn) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/sns/v3/home?region=${region}#/topic/${topicArn}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getStateMachineUrl(stateMachineArn) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/states/home?region=${region}#/statemachines/view/${stateMachineArn}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getSqsQueueUrl(queueUrl) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://${region}.console.aws.amazon.com/sqs/v3/home?region=${region}#/queues/${queueUrl}`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    getS3BucketUrl(bucketName) {
        const region = this.awsAccountRegion;
        const destinationUrl = `https://s3.console.aws.amazon.com/s3/buckets/${bucketName}?region=${region}&tab=metrics`;
        return this.getAwsConsoleUrl(destinationUrl);
    }
    /**
     * Resolves a destination URL within a resolution context.
     * @param context The resolution context.
     * @param destinationUrl The destination URL to resolve since it may contain CDK tokens.
     * @see https://docs.aws.amazon.com/cdk/latest/guide/tokens.html
     */
    getResolvedDestinationUrl(context, destinationUrl) {
        let resolvedDestination = context.resolve(destinationUrl);
        if (typeof resolvedDestination !== "string") {
            // keep unresolved since we do not know how to deal with objects
            resolvedDestination = destinationUrl;
        }
        return resolvedDestination;
    }
}
exports.AwsConsoleUrlFactory = AwsConsoleUrlFactory;
_a = JSII_RTTI_SYMBOL_1;
AwsConsoleUrlFactory[_a] = { fqn: "cdk-monitoring-constructs.AwsConsoleUrlFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,