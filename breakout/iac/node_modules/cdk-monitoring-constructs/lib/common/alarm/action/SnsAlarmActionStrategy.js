"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnsAlarmActionStrategy = exports.notifySns = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_actions_1 = require("aws-cdk-lib/aws-cloudwatch-actions");
function notifySns(onAlarmTopic, onOkTopic, onInsufficientDataTopic) {
    return new SnsAlarmActionStrategy({
        onAlarmTopic,
        onOkTopic,
        onInsufficientDataTopic,
    });
}
exports.notifySns = notifySns;
/**
 * Alarm action strategy that sends a notification to the specified SNS topic.
 */
class SnsAlarmActionStrategy {
    constructor(props) {
        this.onAlarmTopic = props.onAlarmTopic;
        this.onOkTopic = props.onOkTopic;
        this.onInsufficientDataTopic = props.onInsufficientDataTopic;
    }
    addAlarmActions(props) {
        props.alarm.addAlarmAction(new aws_cloudwatch_actions_1.SnsAction(this.onAlarmTopic));
        if (this.onOkTopic) {
            props.alarm.addOkAction(new aws_cloudwatch_actions_1.SnsAction(this.onOkTopic));
        }
        if (this.onInsufficientDataTopic) {
            props.alarm.addInsufficientDataAction(new aws_cloudwatch_actions_1.SnsAction(this.onInsufficientDataTopic));
        }
    }
}
exports.SnsAlarmActionStrategy = SnsAlarmActionStrategy;
_a = JSII_RTTI_SYMBOL_1;
SnsAlarmActionStrategy[_a] = { fqn: "cdk-monitoring-constructs.SnsAlarmActionStrategy", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU25zQWxhcm1BY3Rpb25TdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNuc0FsYXJtQWN0aW9uU3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwrRUFBK0Q7QUFRL0QsU0FBZ0IsU0FBUyxDQUN2QixZQUFvQixFQUNwQixTQUFrQixFQUNsQix1QkFBZ0M7SUFFaEMsT0FBTyxJQUFJLHNCQUFzQixDQUFDO1FBQ2hDLFlBQVk7UUFDWixTQUFTO1FBQ1QsdUJBQXVCO0tBQ3hCLENBQUMsQ0FBQztBQUNMLENBQUM7QUFWRCw4QkFVQztBQXVCRDs7R0FFRztBQUNILE1BQWEsc0JBQXNCO0lBS2pDLFlBQVksS0FBa0M7UUFDNUMsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsS0FBSyxDQUFDLHVCQUF1QixDQUFDO0lBQy9ELENBQUM7SUFFRCxlQUFlLENBQUMsS0FBK0I7UUFDN0MsS0FBSyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxrQ0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBRTdELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixLQUFLLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLGtDQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDeEQ7UUFFRCxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUNoQyxLQUFLLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUNuQyxJQUFJLGtDQUFTLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQzVDLENBQUM7U0FDSDtJQUNILENBQUM7O0FBdkJILHdEQXdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNuc0FjdGlvbiB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2xvdWR3YXRjaC1hY3Rpb25zXCI7XG5pbXBvcnQgeyBJVG9waWMgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNuc1wiO1xuXG5pbXBvcnQge1xuICBBbGFybUFjdGlvblN0cmF0ZWd5UHJvcHMsXG4gIElBbGFybUFjdGlvblN0cmF0ZWd5LFxufSBmcm9tIFwiLi9JQWxhcm1BY3Rpb25TdHJhdGVneVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbm90aWZ5U25zKFxuICBvbkFsYXJtVG9waWM6IElUb3BpYyxcbiAgb25Pa1RvcGljPzogSVRvcGljLFxuICBvbkluc3VmZmljaWVudERhdGFUb3BpYz86IElUb3BpYyxcbik6IElBbGFybUFjdGlvblN0cmF0ZWd5IHtcbiAgcmV0dXJuIG5ldyBTbnNBbGFybUFjdGlvblN0cmF0ZWd5KHtcbiAgICBvbkFsYXJtVG9waWMsXG4gICAgb25Pa1RvcGljLFxuICAgIG9uSW5zdWZmaWNpZW50RGF0YVRvcGljLFxuICB9KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTbnNBbGFybUFjdGlvblN0cmF0ZWd5UHJvcHMge1xuICAvKipcbiAgICogVGFyZ2V0IHRvcGljIHVzZWQgd2hlbiB0aGUgYWxhcm0gaXMgdHJpZ2dlcmVkLlxuICAgKi9cbiAgcmVhZG9ubHkgb25BbGFybVRvcGljOiBJVG9waWM7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIHRhcmdldCB0b3BpYyBmb3Igd2hlbiB0aGUgYWxhcm0gZ29lcyBpbnRvIHRoZSBPSyBzdGF0ZS5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBubyBub3RpZmljYXRpb24gc2VudFxuICAgKi9cbiAgcmVhZG9ubHkgb25Pa1RvcGljPzogSVRvcGljO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCB0YXJnZXQgdG9waWMgZm9yIHdoZW4gdGhlIGFsYXJtIGdvZXMgaW50byB0aGUgSU5TVUZGSUNJRU5UX0RBVEEgc3RhdGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gbm8gbm90aWZpY2F0aW9uIHNlbnRcbiAgICovXG4gIHJlYWRvbmx5IG9uSW5zdWZmaWNpZW50RGF0YVRvcGljPzogSVRvcGljO1xufVxuXG4vKipcbiAqIEFsYXJtIGFjdGlvbiBzdHJhdGVneSB0aGF0IHNlbmRzIGEgbm90aWZpY2F0aW9uIHRvIHRoZSBzcGVjaWZpZWQgU05TIHRvcGljLlxuICovXG5leHBvcnQgY2xhc3MgU25zQWxhcm1BY3Rpb25TdHJhdGVneSBpbXBsZW1lbnRzIElBbGFybUFjdGlvblN0cmF0ZWd5IHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IG9uQWxhcm1Ub3BpYzogSVRvcGljO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgb25Pa1RvcGljPzogSVRvcGljO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgb25JbnN1ZmZpY2llbnREYXRhVG9waWM/OiBJVG9waWM7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFNuc0FsYXJtQWN0aW9uU3RyYXRlZ3lQcm9wcykge1xuICAgIHRoaXMub25BbGFybVRvcGljID0gcHJvcHMub25BbGFybVRvcGljO1xuICAgIHRoaXMub25Pa1RvcGljID0gcHJvcHMub25Pa1RvcGljO1xuICAgIHRoaXMub25JbnN1ZmZpY2llbnREYXRhVG9waWMgPSBwcm9wcy5vbkluc3VmZmljaWVudERhdGFUb3BpYztcbiAgfVxuXG4gIGFkZEFsYXJtQWN0aW9ucyhwcm9wczogQWxhcm1BY3Rpb25TdHJhdGVneVByb3BzKTogdm9pZCB7XG4gICAgcHJvcHMuYWxhcm0uYWRkQWxhcm1BY3Rpb24obmV3IFNuc0FjdGlvbih0aGlzLm9uQWxhcm1Ub3BpYykpO1xuXG4gICAgaWYgKHRoaXMub25Pa1RvcGljKSB7XG4gICAgICBwcm9wcy5hbGFybS5hZGRPa0FjdGlvbihuZXcgU25zQWN0aW9uKHRoaXMub25Pa1RvcGljKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub25JbnN1ZmZpY2llbnREYXRhVG9waWMpIHtcbiAgICAgIHByb3BzLmFsYXJtLmFkZEluc3VmZmljaWVudERhdGFBY3Rpb24oXG4gICAgICAgIG5ldyBTbnNBY3Rpb24odGhpcy5vbkluc3VmZmljaWVudERhdGFUb3BpYyksXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19