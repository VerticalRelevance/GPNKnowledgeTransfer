"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricFactory = exports.DefaultMetricPeriod = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const AnomalyDetectionMathExpression_1 = require("./AnomalyDetectionMathExpression");
const MetricStatistic_1 = require("./MetricStatistic");
const RateComputationMethod_1 = require("./RateComputationMethod");
/**
 * The most common default metric period used at Amazon is currently 5 minutes.
 */
exports.DefaultMetricPeriod = aws_cdk_lib_1.Duration.minutes(5);
class MetricFactory {
    // TODO: make scope required and first. This is for backwards compatability for now.
    constructor(props, scope) {
        this.globalDefaults = props?.globalDefaults ?? {};
        this.scope = scope;
    }
    /**
     * Factory method that creates a metric. The metric properties will already be updated to comply with the global defaults.
     *
     * @param metricName metric name
     * @param statistic aggregation statistic to use
     * @param label metric label; if undefined, metric name is used by CloudWatch
     * @param dimensionsMap additional dimensions to be added
     * @param color metric color; if undefined, uses a CloudWatch provided color (preferred)
     * @param namespace specify a custom namespace; if undefined, uses the global default
     * @param period specify a custom period; if undefined, uses the global default
     * @param region specify a custom region; if undefined, uses the global default
     * @param account specify a custom account; if undefined, uses the global default
     */
    createMetric(metricName, statistic, label, dimensionsMap, color, namespace, period, region, account) {
        return new aws_cloudwatch_1.Metric({
            statistic,
            metricName,
            label,
            color,
            dimensionsMap: dimensionsMap
                ? this.removeUndefinedEntries(dimensionsMap)
                : undefined,
            namespace: this.getNamespaceWithFallback(namespace),
            period: period ?? this.globalDefaults.period ?? exports.DefaultMetricPeriod,
            region: this.resolveRegion(region ?? this.globalDefaults.region),
            account: this.resolveAccount(account ?? this.globalDefaults.account),
        });
    }
    /**
     * Factory method that creates a metric math expression. The metric properties will already be updated to comply with the global defaults.
     *
     * @param expression CloudWatch metric math expression (https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html)
     * @param usingMetrics map of metrics, where keys are expression IDs (used in the expression) and values are metrics
     * @param label metric label (required, as there is no reasonable default)
     * @param color metric color; if undefined, uses a CloudWatch provided color (preferred)
     * @param period specify a custom period; if undefined, uses the global default
     * @param region specify a custom region; if undefined, uses the global default
     * @param account specify a custom account; if undefined, uses the global default
     */
    createMetricMath(expression, usingMetrics, label, color, period, region, account) {
        return new aws_cloudwatch_1.MathExpression({
            label,
            color,
            expression,
            usingMetrics,
            period: period ?? this.globalDefaults.period ?? exports.DefaultMetricPeriod,
            searchRegion: this.resolveRegion(region ?? this.globalDefaults.region),
            searchAccount: this.resolveAccount(account ?? this.globalDefaults.account),
        });
    }
    /**
     * Factory method that creates a metric search query. The metric properties will already be updated to comply with the global defaults.
     * If you want to match "any value" of a specific dimension, please use `undefined` value representation in your consumer language.
     * (For example, `undefined as any as string` in TypeScript, due to JSII typing quirks.)
     *
     * @param query metric search query (the same as the search query prompt in CloudWatch AWS Console), it might also be empty
     * @param dimensionsMap dimensions, further narrowing the search results; use `undefined` if you want to represent "any value" (in TS: `undefined as any as string`)
     * @param statistic aggregation statistic to use
     * @param namespace specify a custom namespace; if undefined, uses the global default
     * @param label specify custom label for search metrics; default is " " as it cannot be empty string
     * @param period specify a custom period; if undefined, uses the global default
     * @param region specify a custom region; if undefined, uses the global default
     * @param account specify a custom account; if undefined, uses the global default
     */
    createMetricSearch(query, dimensionsMap, statistic, namespace, label, period, region, account) {
        const finalPeriod = period ?? this.globalDefaults.period ?? exports.DefaultMetricPeriod;
        const searchNamespace = this.getNamespaceWithFallback(namespace);
        const namespacePlusDimensionKeys = [
            searchNamespace,
            ...Object.keys(dimensionsMap),
        ].join(",");
        const metricSchema = `{${namespacePlusDimensionKeys}}`;
        const dimensionKeysAndValues = Object.entries(this.removeUndefinedEntries(dimensionsMap))
            .map(([key, value]) => `${key}="${value}"`)
            .join(" ");
        const expression = `SEARCH('${metricSchema} ${dimensionKeysAndValues} ${query}', '${statistic}', ${finalPeriod.toSeconds()})`;
        return new aws_cloudwatch_1.MathExpression({
            expression,
            // see https://github.com/aws/aws-cdk/issues/7237
            usingMetrics: {},
            // cannot be an empty string and undefined is no good either
            label: label ?? " ",
            period: finalPeriod,
            searchRegion: this.resolveRegion(region ?? this.globalDefaults.region),
            searchAccount: this.resolveAccount(account ?? this.globalDefaults.account),
        });
    }
    /**
     * Factory method that creates anomaly detection on a metric.
     * Anomaly occurs whenever a metric value falls outside of a precomputed range of predicted values.
     * The detection does not need any setup. The model will start learning automatically and should be ready in a few minutes.
     * Usually, the anomaly detection is paired with an alarm.
     * @see https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Anomaly_Detection.html
     *
     * @param metric metric to detect anomaly detection of
     * @param stdev standard deviation, basically the tolerance / band thickness
     * @param label metric label (required, as there is no reasonable default)
     * @param color metric color; if undefined, uses a CloudWatch provided color (preferred)
     * @param expressionId expression ID of the metric; uses `m1` if undefined
     * @param period specify a custom period; if undefined, uses the global default
     * @param region specify a custom region; if undefined, uses the global default
     * @param account specify a custom account; if undefined, uses the global default
     */
    createMetricAnomalyDetection(metric, stdev, label, color, expressionId, period, region, account) {
        const finalExpressionId = expressionId ?? "m1";
        const usingMetrics = {};
        usingMetrics[finalExpressionId] = metric;
        return new AnomalyDetectionMathExpression_1.AnomalyDetectionMathExpression({
            label,
            color,
            usingMetrics,
            expression: `ANOMALY_DETECTION_BAND(${finalExpressionId},${stdev})`,
            period: period ?? this.globalDefaults.period ?? exports.DefaultMetricPeriod,
            searchRegion: this.resolveRegion(region ?? this.globalDefaults.region),
            searchAccount: this.resolveAccount(account ?? this.globalDefaults.account),
        });
    }
    /**
     * Adapts properties of a foreign metric (metric created outside of this metric factory) to comply with the global defaults.
     * Might modify namespace and metric period.
     *
     * @param metric metric to be adapted
     */
    adaptMetric(metric) {
        return metric.with({
            period: this.globalDefaults.period ?? exports.DefaultMetricPeriod,
        });
    }
    /**
     * Adapts properties of a foreign metric (metric created outside of this metric factory) to comply with the global defaults.
     * Might modify namespace. Preserves metric period.
     *
     * @param metric metric to be adapted
     */
    adaptMetricPreservingPeriod(metric) {
        return metric;
    }
    /**
     * Creates a metric math expression that multiplies the given metric by given coefficient.
     * Does nothing if the multiplier is one. Preserves the metric period.
     *
     * @param metric metric to multiply
     * @param multiplier multiplier (must be > 1)
     * @param label expression label
     * @param expressionId expression ID of the metric; uses `m1` if undefined
     */
    multiplyMetric(metric, multiplier, label, expressionId) {
        if (multiplier == 1) {
            return metric;
        }
        else if (multiplier < 1) {
            throw new Error("Multiplier must be greater than one.");
        }
        else {
            const finalExpressionId = expressionId ?? "m1";
            const usingMetrics = {};
            usingMetrics[finalExpressionId] = metric;
            return this.createMetricMath(`${finalExpressionId} * ${multiplier}`, usingMetrics, label, metric.color, metric.period, this.getRegion(metric), this.getAccount(metric));
        }
    }
    /**
     * Creates a metric math expression that divides the given metric by given coefficient.
     * Does nothing if the divisor is one. Preserves the metric period.
     *
     * @param metric metric to multiply
     * @param divisor divisor (must be > 1)
     * @param label expression label
     * @param expressionId expression ID of the metric; uses `m1` if undefined
     */
    divideMetric(metric, divisor, label, expressionId) {
        if (divisor == 1) {
            return metric;
        }
        else if (divisor < 1) {
            throw new Error("Divisor must be greater than one.");
        }
        else {
            const finalExpressionId = expressionId ?? "m1";
            const usingMetrics = {};
            usingMetrics[finalExpressionId] = metric;
            return this.createMetricMath(`${finalExpressionId} / ${divisor}`, usingMetrics, label, metric.color, metric.period, this.getRegion(metric), this.getAccount(metric));
        }
    }
    /**
     * Creates a metric math expression that computes a rate from a regular metric.
     * For example, it allows you to compute rate per second (TPS), per minute, or just an average of your transactions.
     *
     * @param metric metric to calculate the rate from
     * @param method rate computation method
     * @param addStatsToLabel add detailed statistics (min, max, average) to the label
     * @param expressionId expression ID of the metric; uses `m1` if undefined
     * @param fillWithZeroes if TRUE, the final metric will be zero-filled (0 on no data); false if undefined
     */
    toRate(metric, method, addStatsToLabel, expressionId, fillWithZeroes) {
        const finalExpressionId = expressionId ?? "m1";
        const labelPrefix = metric.label ?? "Rate";
        const statsInLabel = [];
        if (addStatsToLabel ?? false) {
            statsInLabel.push("min: ${MIN}");
            statsInLabel.push("max: ${MAX}");
            if (method !== RateComputationMethod_1.RateComputationMethod.AVERAGE) {
                // only add average if do not have it already
                statsInLabel.push("avg: ${AVG}");
            }
        }
        const finalExpressionIdZeroed = fillWithZeroes ?? false
            ? `FILL(${finalExpressionId},0)`
            : finalExpressionId;
        const labelAppendix = statsInLabel.length > 0 ? ` (${statsInLabel.join(", ")})` : "";
        switch (method) {
            case RateComputationMethod_1.RateComputationMethod.AVERAGE:
                const avgLabel = `${labelPrefix} (avg)${labelAppendix}`;
                const avgMetric = metric.with({
                    label: avgLabel,
                    statistic: MetricStatistic_1.MetricStatistic.AVERAGE,
                });
                if (fillWithZeroes ?? false) {
                    return this.createMetricMath(finalExpressionIdZeroed, { [finalExpressionId]: avgMetric }, avgLabel, avgMetric.color, avgMetric.period, this.getRegion(avgMetric), this.getAccount(avgMetric));
                }
                return avgMetric;
            case RateComputationMethod_1.RateComputationMethod.PER_SECOND:
                let perSecondLabel = `${labelPrefix}/s${labelAppendix}`;
                if (labelPrefix === "Requests" ||
                    labelPrefix === "Invocations" ||
                    labelPrefix === "Transactions") {
                    // currently, kept as "TPS" to reduce number of snapshot changes
                    perSecondLabel = `TPS${labelAppendix}`;
                }
                return this.createMetricMath(`${finalExpressionIdZeroed} / PERIOD(${finalExpressionId})`, { [finalExpressionId]: metric }, perSecondLabel, metric.color, metric.period, this.getRegion(metric), this.getAccount(metric));
            case RateComputationMethod_1.RateComputationMethod.PER_MINUTE:
                return this.createMetricMath(`(60 * ${finalExpressionIdZeroed}) / PERIOD(${finalExpressionId})`, { [finalExpressionId]: metric }, `${labelPrefix}/m${labelAppendix}`, metric.color, metric.period, this.getRegion(metric), this.getAccount(metric));
            case RateComputationMethod_1.RateComputationMethod.PER_HOUR:
                return this.createMetricMath(`(3600 * ${finalExpressionIdZeroed}) / PERIOD(${finalExpressionId})`, { [finalExpressionId]: metric }, `${labelPrefix}/h${labelAppendix}`, metric.color, metric.period, this.getRegion(metric), this.getAccount(metric));
            case RateComputationMethod_1.RateComputationMethod.PER_DAY:
                return this.createMetricMath(`(86400 * ${finalExpressionIdZeroed}) / PERIOD(${finalExpressionId})`, { [finalExpressionId]: metric }, `${labelPrefix}/d${labelAppendix}`, metric.color, metric.period, this.getRegion(metric), this.getAccount(metric));
        }
    }
    /**
     * Returns the given namespace (if defined) or the global namespace as a fallback.
     * If there is no namespace to fallback to (neither the custom or the default one), it will fail.
     * @param value custom namespace
     */
    getNamespaceWithFallback(value) {
        const namespace = value ?? this.globalDefaults.namespace;
        if (!namespace) {
            throw new Error("There is no custom namespace defined. Please specify it in your factory defaults.");
        }
        return namespace;
    }
    /**
     * Helper method that helps to sanitize the given expression ID and removes all invalid characters.
     * Valid expression ID regexp is the following: ^[a-z][a-zA-Z0-9_]*$
     * As this is just to validate a suffix and not the whole ID, we do not have to verify the first lower case letter.
     * @param expressionId expression ID to sanitize
     */
    sanitizeMetricExpressionIdSuffix(expressionId) {
        return expressionId.replace(/[^0-9a-z_]/gi, "");
    }
    /**
     * Merges the given additional dimensions to the given target dimension hash.
     * All existing dimensions with the same key are replaced.
     * @param target target dimension hash to update
     * @param additionalDimensions additional dimensions
     */
    addAdditionalDimensions(target, additionalDimensions) {
        // Add additional dimensions in the search query
        Object.keys(additionalDimensions).forEach((key) => {
            target[key] = additionalDimensions[key];
        });
    }
    /**
     * Removes all entries from the given dimension hash that contain an undefined value.
     * @param dimensionsMap dimensions map to update
     */
    removeUndefinedEntries(dimensionsMap) {
        const copy = {};
        Object.entries(dimensionsMap)
            .filter(([_, value]) => value !== undefined)
            .forEach(([key, value]) => (copy[key] = value));
        return copy;
    }
    /**
     * Attempts to get the account from the metric if it differs from the scope.
     */
    resolveAccount(metricAccount) {
        if (!this.scope) {
            return metricAccount;
        }
        const { account } = aws_cdk_lib_1.Stack.of(this.scope);
        if (metricAccount !== account) {
            return metricAccount;
        }
        return;
    }
    getAccount(metric) {
        let metricAccount;
        if (metric instanceof aws_cloudwatch_1.MathExpression) {
            metricAccount = metric.searchAccount;
        }
        else {
            metricAccount = metric.account;
        }
        return this.resolveAccount(metricAccount);
    }
    /**
     * Attempts to get the region from the metric if it differs from the scope.
     */
    resolveRegion(metricRegion) {
        if (!this.scope) {
            return metricRegion;
        }
        const { region } = aws_cdk_lib_1.Stack.of(this.scope);
        if (metricRegion !== region) {
            return metricRegion;
        }
        return;
    }
    getRegion(metric) {
        let metricRegion;
        if (metric instanceof aws_cloudwatch_1.MathExpression) {
            metricRegion = metric.searchRegion;
        }
        else {
            metricRegion = metric.region;
        }
        return this.resolveRegion(metricRegion);
    }
}
exports.MetricFactory = MetricFactory;
_a = JSII_RTTI_SYMBOL_1;
MetricFactory[_a] = { fqn: "cdk-monitoring-constructs.MetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,