"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedshiftClusterMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const RedshiftNamespace = "AWS/Redshift";
class RedshiftClusterMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.dimensionsMap = {
            ClusterIdentifier: props.clusterIdentifier,
        };
    }
    metricTotalConnectionCount() {
        return this.metric("DatabaseConnections", common_1.MetricStatistic.SUM, "Connections");
    }
    metricAverageDiskSpaceUsageInPercent() {
        return this.metric("PercentageDiskSpaceUsed", common_1.MetricStatistic.AVERAGE, "Disk Usage");
    }
    metricAverageCpuUsageInPercent() {
        return this.metric("CPUUtilization", common_1.MetricStatistic.AVERAGE, "CPU Usage");
    }
    metricShortQueryDurationP90InMillis() {
        const sQueryLatency90 = this.metricQueryDuration("short", common_1.MetricStatistic.P90);
        // need to convert micros to millis
        return this.metricFactory.createMetricMath("sQueryLatency90 / 1000", { sQueryLatency90 }, "Short P90", undefined, undefined, this.region, this.account);
    }
    metricMediumQueryDurationP90InMillis() {
        const mQueryLatency90 = this.metricQueryDuration("medium", common_1.MetricStatistic.P90);
        // need to convert micros to millis
        return this.metricFactory.createMetricMath("mQueryLatency90 / 1000", { mQueryLatency90 }, "Medium P90", undefined, undefined, this.region, this.account);
    }
    metricLongQueryDurationP90InMillis() {
        const lQueryLatency90 = this.metricQueryDuration("long", common_1.MetricStatistic.P90);
        // need to convert micros to millis
        return this.metricFactory.createMetricMath("lQueryLatency90 / 1000", { lQueryLatency90 }, "Long P90", undefined, undefined, this.region, this.account);
    }
    metricMaintenanceModeEnabled() {
        return this.metric("MaintenanceMode", common_1.MetricStatistic.MAX, "Maintenance");
    }
    metricReadLatencyP90InMillis() {
        const readLatency = this.metric("ReadLatency", common_1.MetricStatistic.P90, "Read P90");
        // need to convert seconds to millis
        return this.metricFactory.createMetricMath("readLatency * 1000", { readLatency }, "Read P90", undefined, undefined, this.region, this.account);
    }
    metricWriteLatencyP90InMillis() {
        const writeLatency = this.metric("WriteLatency", common_1.MetricStatistic.P90, "Write P90");
        // need to convert seconds to millis
        return this.metricFactory.createMetricMath("writeLatency * 1000", { writeLatency }, "Write P90", undefined, undefined, this.region, this.account);
    }
    metricQueryDuration(latency, statistic) {
        const dimensions = { ...this.dimensionsMap, latency };
        return this.metricFactory.createMetric("QueryDuration", statistic, latency, dimensions, undefined, RedshiftNamespace, undefined, this.region, this.account);
    }
    metric(metricName, statistic, label) {
        return this.metricFactory.createMetric(metricName, statistic, label, this.dimensionsMap, undefined, RedshiftNamespace, undefined, this.region, this.account);
    }
}
exports.RedshiftClusterMetricFactory = RedshiftClusterMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
RedshiftClusterMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.RedshiftClusterMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,