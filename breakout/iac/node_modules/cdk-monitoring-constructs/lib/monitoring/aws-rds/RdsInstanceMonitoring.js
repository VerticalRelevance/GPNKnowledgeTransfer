"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsInstanceMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const RdsInstanceMetricFactory_1 = require("./RdsInstanceMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class RdsInstanceMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const metricFactory = new RdsInstanceMetricFactory_1.RdsInstanceMetricFactory(scope.createMetricFactory(), props);
        this.connectionsMetric = metricFactory.metricTotalConnectionCount();
        this.freeStorageSpaceMetric = metricFactory.metricMaxFreeStorageSpace();
        this.freeableMemoryMetric = metricFactory.metricAverageFreeableMemory();
        this.cpuUsageMetric = metricFactory.metricAverageCpuUsageInPercent();
        this.readLatencyMetric = metricFactory.metricReadLatencyInMillis(common_1.LatencyType.P90);
        this.readThroughputMetric = metricFactory.metricReadThroughput();
        this.readIopsMetric = metricFactory.metricReadIops();
        this.writeLatencyMetric = metricFactory.metricWriteLatencyInMillis(common_1.LatencyType.P90);
        this.writeThroughputMetric = metricFactory.metricWriteThroughput();
        this.writeIopsMetric = metricFactory.metricWriteIops();
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: metricFactory.instanceIdentifier,
            namedConstruct: props.instance,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.url = scope
            .createAwsConsoleUrlFactory()
            .getRdsInstanceUrl(metricFactory.instanceIdentifier);
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.usageAlarmFactory = new common_1.UsageAlarmFactory(alarmFactory);
        this.connectionAlarmFactory = new common_1.ConnectionAlarmFactory(alarmFactory);
        this.usageAnnotations = [];
        this.connectionAnnotations = [];
        for (const disambiguator in props.addFreeStorageSpaceAlarm) {
            const alarmProps = props.addFreeStorageSpaceAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMinCountAlarm(this.freeStorageSpaceMetric, alarmProps, disambiguator);
            this.usageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addCpuUsageAlarm) {
            const alarmProps = props.addCpuUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxCpuUsagePercentAlarm(this.cpuUsageMetric, alarmProps, disambiguator);
            this.usageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMinConnectionCountAlarm) {
            const alarmProps = props.addMinConnectionCountAlarm[disambiguator];
            const createdAlarm = this.connectionAlarmFactory.addMinConnectionCountAlarm(this.connectionsMetric, alarmProps, disambiguator);
            this.connectionAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxConnectionCountAlarm) {
            const alarmProps = props.addMaxConnectionCountAlarm[disambiguator];
            const createdAlarm = this.connectionAlarmFactory.addMaxConnectionCountAlarm(this.connectionsMetric, alarmProps, disambiguator);
            this.connectionAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createCpuAndDiskUsageWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createConnectionsWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createLatencyWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createCpuAndDiskUsageWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createConnectionsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            this.createLatencyWidget(common_1.HalfWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "RDS Instance",
            title: this.title,
            goToLinkUrl: this.url,
        });
    }
    createCpuAndDiskUsageWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "CPU/Disk Usage",
            left: [
                this.cpuUsageMetric,
                this.freeStorageSpaceMetric,
                this.freeableMemoryMetric,
            ],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
            leftAnnotations: this.usageAnnotations,
        });
    }
    createConnectionsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Connections",
            left: [this.connectionsMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.connectionAnnotations,
        });
    }
    createLatencyWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Query Duration",
            left: [
                this.readLatencyMetric,
                this.readThroughputMetric,
                this.readIopsMetric,
                this.writeLatencyMetric,
                this.writeLatencyMetric,
                this.writeIopsMetric,
            ],
            leftYAxis: common_1.TimeAxisMillisFromZero,
        });
    }
}
exports.RdsInstanceMonitoring = RdsInstanceMonitoring;
_a = JSII_RTTI_SYMBOL_1;
RdsInstanceMonitoring[_a] = { fqn: "cdk-monitoring-constructs.RdsInstanceMonitoring", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,