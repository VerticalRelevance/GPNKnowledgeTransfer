"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsInstanceMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const RdsNamespace = "AWS/RDS";
class RdsInstanceMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.instance = props.instance;
        this.instanceIdentifier = props.instance.instanceIdentifier;
        this.dimensionsMap = {
            DBInstanceIdentifier: this.instanceIdentifier,
        };
    }
    metricTotalConnectionCount() {
        return this.metricFactory.adaptMetric(this.instance.metricDatabaseConnections({
            statistic: common_1.MetricStatistic.SUM,
            label: "Connections: Sum",
            region: this.region,
            account: this.account,
        }));
    }
    metricAverageCpuUsageInPercent() {
        return this.metricFactory.adaptMetric(this.instance.metricCPUUtilization({
            statistic: common_1.MetricStatistic.AVERAGE,
            label: "CPU Usage",
            region: this.region,
            account: this.account,
        }));
    }
    metricMaxFreeStorageSpace() {
        return this.metricFactory.adaptMetric(this.instance.metricFreeStorageSpace({
            statistic: common_1.MetricStatistic.MAX,
            label: "FreeStorageSpace: MAX",
            region: this.region,
            account: this.account,
        }));
    }
    metricAverageFreeableMemory() {
        return this.metricFactory.adaptMetric(this.instance.metricFreeableMemory({
            statistic: common_1.MetricStatistic.AVERAGE,
            label: "FreeStorageSpace: Average",
            region: this.region,
            account: this.account,
        }));
    }
    metricReadLatencyInMillis(latencyType) {
        return this.metric("ReadLatency", common_1.getLatencyTypeStatistic(latencyType), `ReadLatency ${common_1.getLatencyTypeLabel(latencyType)}`);
    }
    metricReadThroughput() {
        return this.metric("ReadThroughput", common_1.MetricStatistic.AVERAGE, "ReadThroughput: Average");
    }
    metricReadIops() {
        return this.metricFactory.adaptMetric(this.instance.metricReadIOPS({
            statistic: common_1.MetricStatistic.AVERAGE,
            label: "ReadIOPS: Average",
            region: this.region,
            account: this.account,
        }));
    }
    metricWriteLatencyInMillis(latencyType) {
        return this.metric("WriteLatency", common_1.getLatencyTypeStatistic(latencyType), `WriteLatency ${common_1.getLatencyTypeLabel(latencyType)}`);
    }
    metricWriteThroughput() {
        return this.metric("WriteThroughput", common_1.MetricStatistic.AVERAGE, "WriteThroughput: Average");
    }
    metricWriteIops() {
        return this.metricFactory.adaptMetric(this.instance.metricWriteIOPS({
            statistic: common_1.MetricStatistic.AVERAGE,
            label: "WriteIOPS: Average",
            region: this.region,
            account: this.account,
        }));
    }
    metric(metricName, statistic, label) {
        return this.metricFactory.createMetric(metricName, statistic, label, this.dimensionsMap, undefined, RdsNamespace, undefined, this.region, this.account);
    }
}
exports.RdsInstanceMetricFactory = RdsInstanceMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
RdsInstanceMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.RdsInstanceMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,