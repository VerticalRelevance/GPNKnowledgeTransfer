"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnsTopicMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const SnsTopicMetricFactory_1 = require("./SnsTopicMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class SnsTopicMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct: props.topic,
            fallbackConstructName: this.resolveTopicName(props.topic),
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.topicUrl = scope
            .createAwsConsoleUrlFactory()
            .getSnsTopicUrl(props.topic.topicArn);
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.topicAlarmFactory = new common_1.TopicAlarmFactory(alarmFactory);
        this.failedDeliveryAnnotations = [];
        this.incomingMessagesAnnotations = [];
        const metricFactory = new SnsTopicMetricFactory_1.SnsTopicMetricFactory(scope.createMetricFactory(), props);
        this.incomingMessagesMetric = metricFactory.metricIncomingMessageCount();
        this.outgoingMessagesMetric = metricFactory.metricOutgoingMessageCount();
        this.messageSizeMetric = metricFactory.metricAverageMessageSizeInBytes();
        this.messagesFailedMetric =
            metricFactory.metricNumberOfNotificationsFailed();
        for (const disambiguator in props.addMessageNotificationsFailedAlarm) {
            const alarmProps = props.addMessageNotificationsFailedAlarm[disambiguator];
            const createdAlarm = this.topicAlarmFactory.addMessageNotificationsFailedAlarm(this.messagesFailedMetric, alarmProps, disambiguator);
            this.failedDeliveryAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMinNumberOfMessagesPublishedAlarm) {
            const alarmProps = props.addMinNumberOfMessagesPublishedAlarm[disambiguator];
            const createdAlarm = this.topicAlarmFactory.addMinMessagesPublishedAlarm(this.incomingMessagesMetric, alarmProps, disambiguator);
            this.incomingMessagesAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxNumberOfMessagesPublishedAlarm) {
            const alarmProps = props.addMaxNumberOfMessagesPublishedAlarm[disambiguator];
            const createdAlarm = this.topicAlarmFactory.addMaxMessagesPublishedAlarm(this.incomingMessagesMetric, alarmProps, disambiguator);
            this.incomingMessagesAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createMessageCountWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
            this.createMessageFailedWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createMessageCountWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
            this.createMessageSizeWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
            this.createMessageFailedWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "SNS Topic",
            title: this.title,
            goToLinkUrl: this.topicUrl,
        });
    }
    createMessageCountWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Message Count",
            left: [this.incomingMessagesMetric, this.outgoingMessagesMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.incomingMessagesAnnotations,
        });
    }
    createMessageSizeWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Message Size",
            left: [this.messageSizeMetric],
            leftYAxis: common_1.SizeAxisBytesFromZero,
        });
    }
    createMessageFailedWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Message Delivery Failed",
            left: [this.messagesFailedMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.failedDeliveryAnnotations,
        });
    }
    resolveTopicName(snsTopic) {
        // try to take the name (if specified) instead of token
        return snsTopic.node.defaultChild?.topicName;
    }
}
exports.SnsTopicMonitoring = SnsTopicMonitoring;
_a = JSII_RTTI_SYMBOL_1;
SnsTopicMonitoring[_a] = { fqn: "cdk-monitoring-constructs.SnsTopicMonitoring", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,