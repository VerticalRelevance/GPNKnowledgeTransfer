"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayV2HttpApiMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const ApiGatewayNamespace = "AWS/ApiGateway";
class ApiGatewayV2HttpApiMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.fillTpsWithZeroes = props.fillTpsWithZeroes ?? true;
        this.rateComputationMethod =
            props.rateComputationMethod ?? common_1.RateComputationMethod.AVERAGE;
        this.dimensionsMap = {
            ApiId: props.api.apiId,
            Stage: props.apiStage ?? "$default",
            ...(props.apiMethod && { Method: props.apiMethod }),
            ...(props.apiResource && { Resource: props.apiResource }),
        };
    }
    /**
     * @deprecated use metricInvocationRate
     */
    metricTps() {
        return this.metricFactory.toRate(this.metricInvocationCount(), common_1.RateComputationMethod.PER_SECOND, false, "requests");
    }
    metricInvocationRate() {
        return this.metricFactory.toRate(this.metricInvocationCount(), this.rateComputationMethod, false, "requests");
    }
    metricInvocationCount() {
        return this.metricFactory.createMetric("Count", common_1.MetricStatistic.SUM, "Invocations", this.dimensionsMap, undefined, ApiGatewayNamespace);
    }
    metric4xxCount() {
        return this.metricFactory.createMetric("4xx", common_1.MetricStatistic.SUM, "4xx", this.dimensionsMap, undefined, ApiGatewayNamespace, undefined, this.region, this.account);
    }
    metric4xxRate() {
        return this.metricFactory.toRate(this.metric4xxCount(), this.rateComputationMethod, false, "errors");
    }
    metric5xxCount() {
        return this.metricFactory.createMetric("5xx", common_1.MetricStatistic.SUM, "5xx", this.dimensionsMap, undefined, ApiGatewayNamespace, undefined, this.region, this.account);
    }
    metric5xxRate() {
        return this.metricFactory.toRate(this.metric5xxCount(), this.rateComputationMethod, false, "faults");
    }
    /**
     * @deprecated Use {@link metricLatencyInMillis} instead.
     */
    metricLatencyP50InMillis() {
        return this.metricLatencyInMillis(common_1.LatencyType.P50);
    }
    /**
     * @deprecated Use {@link metricLatencyInMillis} instead.
     */
    metricLatencyP90InMillis() {
        return this.metricLatencyInMillis(common_1.LatencyType.P90);
    }
    /**
     * @deprecated Use {@link metricLatencyInMillis} instead.
     */
    metricLatencyP99InMillis() {
        return this.metricLatencyInMillis(common_1.LatencyType.P99);
    }
    /**
     * @deprecated Use {@link metricIntegrationLatencyInMillis} instead.
     */
    metricIntegrationLatencyP50InMillis() {
        return this.metricIntegrationLatencyInMillis(common_1.LatencyType.P50);
    }
    /**
     * @deprecated Use {@link metricIntegrationLatencyInMillis} instead.
     */
    metricIntegrationLatencyP90InMillis() {
        return this.metricIntegrationLatencyInMillis(common_1.LatencyType.P90);
    }
    /**
     * @deprecated Use {@link metricIntegrationLatencyInMillis} instead.
     */
    metricIntegrationLatencyP99InMillis() {
        return this.metricIntegrationLatencyInMillis(common_1.LatencyType.P99);
    }
    metricIntegrationLatencyInMillis(latencyType) {
        const label = common_1.getLatencyTypeLabel(latencyType);
        return this.metricFactory.createMetric("IntegrationLatency", common_1.getLatencyTypeStatistic(latencyType), label, this.dimensionsMap, undefined, ApiGatewayNamespace, undefined, this.region, this.account);
    }
    metricLatencyInMillis(latencyType) {
        const label = common_1.getLatencyTypeLabel(latencyType);
        return this.metricFactory.createMetric("Latency", common_1.getLatencyTypeStatistic(latencyType), label, this.dimensionsMap, undefined, ApiGatewayNamespace, undefined, this.region, this.account);
    }
}
exports.ApiGatewayV2HttpApiMetricFactory = ApiGatewayV2HttpApiMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
ApiGatewayV2HttpApiMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.ApiGatewayV2HttpApiMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,