"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretsManagerMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const SecretsManagerMetricFactory_1 = require("./SecretsManagerMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class SecretsManagerMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: "SecretsManager",
        });
        this.title = namingStrategy.resolveHumanReadableName();
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.secretsManagerAlarmFactory = new common_1.SecretsManagerAlarmFactory(alarmFactory);
        this.secretsCountAnnotation = [];
        const metricFactory = new SecretsManagerMetricFactory_1.SecretsManagerMetricFactory(scope.createMetricFactory(), props);
        this.secretsCountMetric = metricFactory.metricSecretCount();
        for (const disambiguator in props.addMaxNumberSecretsAlarm) {
            const alarmProps = props.addMaxNumberSecretsAlarm[disambiguator];
            const createdAlarm = this.secretsManagerAlarmFactory.addMaxSecretCountAlarm(this.secretsCountMetric, alarmProps, disambiguator);
            this.secretsCountAnnotation.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMinNumberSecretsAlarm) {
            const alarmProps = props.addMinNumberSecretsAlarm[disambiguator];
            const createdAlarm = this.secretsManagerAlarmFactory.addMinSecretCountAlarm(this.secretsCountMetric, alarmProps, disambiguator);
            this.secretsCountAnnotation.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addChangeInSecretsAlarm) {
            const alarmProps = props.addChangeInSecretsAlarm[disambiguator];
            const createdAlarm = this.secretsManagerAlarmFactory.addChangeInSecretCountAlarm(this.secretsCountMetric, alarmProps, disambiguator);
            this.secretsCountAnnotation.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createSecretsCountWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            this.createTitleWidget(),
            this.createSecretsCountWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
        ];
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Secrets Manager Secrets",
            title: this.title,
        });
    }
    createSecretsCountWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Secret Count",
            left: [this.secretsCountMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.secretsCountAnnotation,
        });
    }
}
exports.SecretsManagerMonitoring = SecretsManagerMonitoring;
_a = JSII_RTTI_SYMBOL_1;
SecretsManagerMonitoring[_a] = { fqn: "cdk-monitoring-constructs.SecretsManagerMonitoring", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,