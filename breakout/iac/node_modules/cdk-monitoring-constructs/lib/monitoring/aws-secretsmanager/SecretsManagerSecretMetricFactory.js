"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretsManagerSecretMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
class SecretsManagerSecretMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.secret = props.secret;
        this.dimensionsMap = {
            SecretName: props.secret.secretName,
        };
    }
    metricDaysSinceLastChange() {
        return this.metricFactory.createMetric(SecretsManagerSecretMetricFactory.MetricNameDaysSinceLastChange, common_1.MetricStatistic.MAX, "Days", this.dimensionsMap, undefined, SecretsManagerSecretMetricFactory.Namespace, undefined, this.region, this.account);
    }
    metricDaysSinceLastRotation() {
        return this.metricFactory.createMetric(SecretsManagerSecretMetricFactory.MetricNameDaysSinceLastRotation, common_1.MetricStatistic.MAX, "Days", this.dimensionsMap, undefined, SecretsManagerSecretMetricFactory.Namespace, undefined, this.region, this.account);
    }
}
exports.SecretsManagerSecretMetricFactory = SecretsManagerSecretMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
SecretsManagerSecretMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.SecretsManagerSecretMetricFactory", version: "8.1.0" };
SecretsManagerSecretMetricFactory.Namespace = "SecretsManager";
SecretsManagerSecretMetricFactory.MetricNameDaysSinceLastChange = "DaysSinceLastChange";
SecretsManagerSecretMetricFactory.MetricNameDaysSinceLastRotation = "DaysSinceLastRotation";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VjcmV0c01hbmFnZXJTZWNyZXRNZXRyaWNGYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU2VjcmV0c01hbmFnZXJTZWNyZXRNZXRyaWNGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EseUNBS3NCO0FBT3RCLE1BQWEsaUNBQWtDLFNBQVEsMEJBQXlEO0lBTzlHLFlBQ0UsYUFBNEIsRUFDNUIsS0FBNkM7UUFFN0MsS0FBSyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsR0FBRztZQUNuQixVQUFVLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVO1NBQ3BDLENBQUM7SUFDSixDQUFDO0lBRUQseUJBQXlCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQ3BDLGlDQUFpQyxDQUFDLDZCQUE2QixFQUMvRCx3QkFBZSxDQUFDLEdBQUcsRUFDbkIsTUFBTSxFQUNOLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxpQ0FBaUMsQ0FBQyxTQUFTLEVBQzNDLFNBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxPQUFPLENBQ2IsQ0FBQztJQUNKLENBQUM7SUFFRCwyQkFBMkI7UUFDekIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FDcEMsaUNBQWlDLENBQUMsK0JBQStCLEVBQ2pFLHdCQUFlLENBQUMsR0FBRyxFQUNuQixNQUFNLEVBQ04sSUFBSSxDQUFDLGFBQWEsRUFDbEIsU0FBUyxFQUNULGlDQUFpQyxDQUFDLFNBQVMsRUFDM0MsU0FBUyxFQUNULElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FDYixDQUFDO0lBQ0osQ0FBQzs7QUE3Q0gsOEVBOENDOzs7QUE3Q2lCLDJDQUFTLEdBQUcsZ0JBQWdCLENBQUM7QUFDN0IsK0RBQTZCLEdBQUcscUJBQXFCLENBQUM7QUFDdEQsaUVBQStCLEdBQUcsdUJBQXVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaW1lbnNpb25zTWFwIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZHdhdGNoXCI7XG5pbXBvcnQgeyBJU2VjcmV0IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1zZWNyZXRzbWFuYWdlclwiO1xuXG5pbXBvcnQge1xuICBCYXNlTWV0cmljRmFjdG9yeSxcbiAgQmFzZU1ldHJpY0ZhY3RvcnlQcm9wcyxcbiAgTWV0cmljRmFjdG9yeSxcbiAgTWV0cmljU3RhdGlzdGljLFxufSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VjcmV0c01hbmFnZXJTZWNyZXRNZXRyaWNGYWN0b3J5UHJvcHNcbiAgZXh0ZW5kcyBCYXNlTWV0cmljRmFjdG9yeVByb3BzIHtcbiAgcmVhZG9ubHkgc2VjcmV0OiBJU2VjcmV0O1xufVxuXG5leHBvcnQgY2xhc3MgU2VjcmV0c01hbmFnZXJTZWNyZXRNZXRyaWNGYWN0b3J5IGV4dGVuZHMgQmFzZU1ldHJpY0ZhY3Rvcnk8U2VjcmV0c01hbmFnZXJTZWNyZXRNZXRyaWNGYWN0b3J5UHJvcHM+IHtcbiAgc3RhdGljIHJlYWRvbmx5IE5hbWVzcGFjZSA9IFwiU2VjcmV0c01hbmFnZXJcIjtcbiAgc3RhdGljIHJlYWRvbmx5IE1ldHJpY05hbWVEYXlzU2luY2VMYXN0Q2hhbmdlID0gXCJEYXlzU2luY2VMYXN0Q2hhbmdlXCI7XG4gIHN0YXRpYyByZWFkb25seSBNZXRyaWNOYW1lRGF5c1NpbmNlTGFzdFJvdGF0aW9uID0gXCJEYXlzU2luY2VMYXN0Um90YXRpb25cIjtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGRpbWVuc2lvbnNNYXA6IERpbWVuc2lvbnNNYXA7XG4gIHByb3RlY3RlZCByZWFkb25seSBzZWNyZXQ6IElTZWNyZXQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbWV0cmljRmFjdG9yeTogTWV0cmljRmFjdG9yeSxcbiAgICBwcm9wczogU2VjcmV0c01hbmFnZXJTZWNyZXRNZXRyaWNGYWN0b3J5UHJvcHMsXG4gICkge1xuICAgIHN1cGVyKG1ldHJpY0ZhY3RvcnksIHByb3BzKTtcblxuICAgIHRoaXMuc2VjcmV0ID0gcHJvcHMuc2VjcmV0O1xuICAgIHRoaXMuZGltZW5zaW9uc01hcCA9IHtcbiAgICAgIFNlY3JldE5hbWU6IHByb3BzLnNlY3JldC5zZWNyZXROYW1lLFxuICAgIH07XG4gIH1cblxuICBtZXRyaWNEYXlzU2luY2VMYXN0Q2hhbmdlKCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpY0ZhY3RvcnkuY3JlYXRlTWV0cmljKFxuICAgICAgU2VjcmV0c01hbmFnZXJTZWNyZXRNZXRyaWNGYWN0b3J5Lk1ldHJpY05hbWVEYXlzU2luY2VMYXN0Q2hhbmdlLFxuICAgICAgTWV0cmljU3RhdGlzdGljLk1BWCxcbiAgICAgIFwiRGF5c1wiLFxuICAgICAgdGhpcy5kaW1lbnNpb25zTWFwLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgU2VjcmV0c01hbmFnZXJTZWNyZXRNZXRyaWNGYWN0b3J5Lk5hbWVzcGFjZSxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHRoaXMucmVnaW9uLFxuICAgICAgdGhpcy5hY2NvdW50LFxuICAgICk7XG4gIH1cblxuICBtZXRyaWNEYXlzU2luY2VMYXN0Um90YXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljRmFjdG9yeS5jcmVhdGVNZXRyaWMoXG4gICAgICBTZWNyZXRzTWFuYWdlclNlY3JldE1ldHJpY0ZhY3RvcnkuTWV0cmljTmFtZURheXNTaW5jZUxhc3RSb3RhdGlvbixcbiAgICAgIE1ldHJpY1N0YXRpc3RpYy5NQVgsXG4gICAgICBcIkRheXNcIixcbiAgICAgIHRoaXMuZGltZW5zaW9uc01hcCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIFNlY3JldHNNYW5hZ2VyU2VjcmV0TWV0cmljRmFjdG9yeS5OYW1lc3BhY2UsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB0aGlzLnJlZ2lvbixcbiAgICAgIHRoaXMuYWNjb3VudCxcbiAgICApO1xuICB9XG59XG4iXX0=