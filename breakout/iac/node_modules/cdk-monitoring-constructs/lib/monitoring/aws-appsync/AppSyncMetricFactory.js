"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSyncMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const Namespace = "AWS/AppSync";
class AppSyncMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.fillTpsWithZeroes = props.fillTpsWithZeroes ?? true;
        this.rateComputationMethod =
            props.rateComputationMethod ?? common_1.RateComputationMethod.AVERAGE;
        this.dimensionsMap = {
            GraphQLAPIId: props.api.apiId,
        };
    }
    /**
     * @deprecated use metricRequestRate
     */
    metricTps() {
        return this.metricFactory.toRate(this.metricRequestCount(), common_1.RateComputationMethod.PER_SECOND, true, "requests", this.fillTpsWithZeroes);
    }
    metricRequestRate() {
        return this.metricFactory.toRate(this.metricRequestCount(), this.rateComputationMethod, true, "requests", this.fillTpsWithZeroes);
    }
    metricRequestCount() {
        return this.metricFactory.createMetric("Latency", common_1.MetricStatistic.N, "Requests", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricLatencyP50InMillis() {
        return this.metricFactory.createMetric("Latency", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricLatencyP90InMillis() {
        return this.metricFactory.createMetric("Latency", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricLatencyP99InMillis() {
        return this.metricFactory.createMetric("Latency", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metric4XXErrorCount() {
        return this.metricFactory.createMetric("4XXError", common_1.MetricStatistic.SUM, "4XX Error", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metric4XXErrorRate() {
        return this.metricFactory.toRate(this.metric4XXErrorCount(), this.rateComputationMethod, false, "errors");
    }
    metric5XXFaultCount() {
        return this.metricFactory.createMetric("5XXError", common_1.MetricStatistic.SUM, "5XX Fault", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metric5XXFaultRate() {
        return this.metricFactory.toRate(this.metric5XXFaultCount(), this.rateComputationMethod, false, "faults");
    }
}
exports.AppSyncMetricFactory = AppSyncMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
AppSyncMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.AppSyncMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,