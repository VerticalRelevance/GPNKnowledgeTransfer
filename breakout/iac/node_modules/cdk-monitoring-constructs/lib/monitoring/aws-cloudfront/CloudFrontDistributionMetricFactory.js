"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFrontDistributionMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const CloudFrontNamespace = "AWS/CloudFront";
const CloudFrontGlobalRegion = "Global";
const CloudFrontDefaultMetricRegion = "us-east-1";
/**
 * To get the CloudFront metrics from the CloudWatch API, you must use the US East (N. Virginia) Region (us-east-1).
 * https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/programming-cloudwatch-metrics.html
 */
class CloudFrontDistributionMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.fillTpsWithZeroes = props.fillTpsWithZeroes ?? true;
        this.rateComputationMethod =
            props.rateComputationMethod ?? common_1.RateComputationMethod.AVERAGE;
        this.dimensionsMap = {
            DistributionId: props.distribution.distributionId,
            Region: CloudFrontGlobalRegion,
        };
    }
    metricRequestCount() {
        return this.metricFactory.createMetric("Requests", common_1.MetricStatistic.SUM, "Uploaded", this.dimensionsMap, undefined, CloudFrontNamespace, undefined, CloudFrontDefaultMetricRegion, this.account);
    }
    metricRequestRate() {
        return this.metricFactory.toRate(this.metricRequestCount(), this.rateComputationMethod, false, "requests", this.fillTpsWithZeroes);
    }
    /**
     * @deprecated use metricRequestRate
     */
    metricRequestTps() {
        return this.metricFactory.toRate(this.metricRequestCount(), common_1.RateComputationMethod.PER_SECOND, false, "requests", this.fillTpsWithZeroes);
    }
    metricTotalBytesUploaded() {
        return this.metricFactory.createMetric("BytesUploaded", common_1.MetricStatistic.SUM, "Uploaded", this.dimensionsMap, undefined, CloudFrontNamespace, undefined, CloudFrontDefaultMetricRegion, this.account);
    }
    metricTotalBytesDownloaded() {
        return this.metricFactory.createMetric("BytesDownloaded", common_1.MetricStatistic.SUM, "Downloaded", this.dimensionsMap, undefined, CloudFrontNamespace, undefined, CloudFrontDefaultMetricRegion, this.account);
    }
    /**
     * Cache hit rate metric. This is an additional metric that needs to be explicitly enabled for an additional cost.
     *
     * @see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/viewing-cloudfront-metrics.html#monitoring-console.distributions-additional
     */
    metricCacheHitRateAverageInPercent() {
        return this.metricFactory.createMetric("CacheHitRate", common_1.MetricStatistic.AVERAGE, "Hit Rate", this.dimensionsMap, undefined, CloudFrontNamespace, undefined, CloudFrontDefaultMetricRegion, this.account);
    }
    metric4xxErrorRateAverage() {
        return this.metricFactory.createMetric("4xxErrorRate", common_1.MetricStatistic.AVERAGE, "4XX", this.dimensionsMap, undefined, CloudFrontNamespace, undefined, CloudFrontDefaultMetricRegion, this.account);
    }
    metric5xxErrorRateAverage() {
        return this.metricFactory.createMetric("5xxErrorRate", common_1.MetricStatistic.AVERAGE, "5XX", this.dimensionsMap, undefined, CloudFrontNamespace, undefined, CloudFrontDefaultMetricRegion, this.account);
    }
    metricTotalErrorRateAverage() {
        return this.metricFactory.createMetric("TotalErrorRate", common_1.MetricStatistic.AVERAGE, "Total", this.dimensionsMap, undefined, CloudFrontNamespace, undefined, CloudFrontDefaultMetricRegion, this.account);
    }
}
exports.CloudFrontDistributionMetricFactory = CloudFrontDistributionMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
CloudFrontDistributionMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.CloudFrontDistributionMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,