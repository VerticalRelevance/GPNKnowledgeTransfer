"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3BucketMetricFactory = exports.StorageType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const Namespace = "AWS/S3";
var StorageType;
(function (StorageType) {
    StorageType["DEEP_ARCHIVE_OBJECT_OVERHEAD"] = "DeepArchiveObjectOverhead";
    StorageType["DEEP_ARCHIVE_S3_OBJECT_OVERHEAD"] = "DeepArchiveS3ObjectOverhead";
    StorageType["DEEP_ARCHIVE_STAGING_STORAGE"] = "DeepArchiveStagingStorage";
    StorageType["DEEP_ARCHIVE_STORAGE"] = "DeepArchiveStorage";
    StorageType["GLACIER_OBJECT_OVERHEAD"] = "GlacierObjectOverhead";
    StorageType["GLACIER_S3_OBJECT_OVERHEAD"] = "GlacierS3ObjectOverhead";
    StorageType["GLACIER_STAGING_STORAGE"] = "GlacierStagingStorage";
    StorageType["GLACIER_STORAGE"] = "GlacierStorage";
    StorageType["INTELLIGENT_TIERING_FA_STORAGE"] = "IntelligentTieringFAStorage";
    StorageType["INTELLIGENT_TIERING_IA_STORAGE"] = "IntelligentTieringIAStorage";
    StorageType["ONE_ZONE_IA_SIZE_OVERHEAD"] = "OneZoneIASizeOverhead";
    StorageType["ONE_ZONE_IA_STORAGE"] = "OneZoneIAStorage";
    StorageType["REDUCED_REDUNDANCY_STORAGE"] = "ReducedRedundancyStorage";
    StorageType["STANDARD_IA_SIZE_OVERHEAD"] = "StandardIASizeOverhead";
    StorageType["STANDARD_IA_STORAGE"] = "StandardIAStorage";
    StorageType["STANDARD_STORAGE"] = "StandardStorage";
})(StorageType = exports.StorageType || (exports.StorageType = {}));
class S3BucketMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.props = props;
    }
    metricBucketSizeBytes() {
        return this.metricFactory.createMetric("BucketSizeBytes", common_1.MetricStatistic.AVERAGE, "BucketSizeBytes", {
            BucketName: this.props.bucket.bucketName,
            StorageType: this.props.storageType ?? StorageType.STANDARD_STORAGE,
        }, undefined, Namespace, undefined, this.region, this.account);
    }
    metricNumberOfObjects() {
        return this.metricFactory.createMetric("NumberOfObjects", common_1.MetricStatistic.AVERAGE, "NumberOfObjects", {
            BucketName: this.props.bucket.bucketName,
            StorageType: "AllStorageTypes",
        }, undefined, Namespace, undefined, this.region, this.account);
    }
}
exports.S3BucketMetricFactory = S3BucketMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
S3BucketMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.S3BucketMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUzNCdWNrZXRNZXRyaWNGYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUzNCdWNrZXRNZXRyaWNGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEseUNBS3NCO0FBRXRCLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUUzQixJQUFZLFdBaUJYO0FBakJELFdBQVksV0FBVztJQUNyQix5RUFBMEQsQ0FBQTtJQUMxRCw4RUFBK0QsQ0FBQTtJQUMvRCx5RUFBMEQsQ0FBQTtJQUMxRCwwREFBMkMsQ0FBQTtJQUMzQyxnRUFBaUQsQ0FBQTtJQUNqRCxxRUFBc0QsQ0FBQTtJQUN0RCxnRUFBaUQsQ0FBQTtJQUNqRCxpREFBa0MsQ0FBQTtJQUNsQyw2RUFBOEQsQ0FBQTtJQUM5RCw2RUFBOEQsQ0FBQTtJQUM5RCxrRUFBbUQsQ0FBQTtJQUNuRCx1REFBd0MsQ0FBQTtJQUN4QyxzRUFBdUQsQ0FBQTtJQUN2RCxtRUFBb0QsQ0FBQTtJQUNwRCx3REFBeUMsQ0FBQTtJQUN6QyxtREFBb0MsQ0FBQTtBQUN0QyxDQUFDLEVBakJXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBaUJ0QjtBQU9ELE1BQWEscUJBQXNCLFNBQVEsMEJBQTZDO0lBR3RGLFlBQVksYUFBNEIsRUFBRSxLQUFpQztRQUN6RSxLQUFLLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTVCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxxQkFBcUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FDcEMsaUJBQWlCLEVBQ2pCLHdCQUFlLENBQUMsT0FBTyxFQUN2QixpQkFBaUIsRUFDakI7WUFDRSxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVTtZQUN4QyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLGdCQUFnQjtTQUNwRSxFQUNELFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNULElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FDYixDQUFDO0lBQ0osQ0FBQztJQUVELHFCQUFxQjtRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUNwQyxpQkFBaUIsRUFDakIsd0JBQWUsQ0FBQyxPQUFPLEVBQ3ZCLGlCQUFpQixFQUNqQjtZQUNFLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVO1lBQ3hDLFdBQVcsRUFBRSxpQkFBaUI7U0FDL0IsRUFDRCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxPQUFPLENBQ2IsQ0FBQztJQUNKLENBQUM7O0FBekNILHNEQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElCdWNrZXQgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXMzXCI7XG5cbmltcG9ydCB7XG4gIEJhc2VNZXRyaWNGYWN0b3J5LFxuICBCYXNlTWV0cmljRmFjdG9yeVByb3BzLFxuICBNZXRyaWNGYWN0b3J5LFxuICBNZXRyaWNTdGF0aXN0aWMsXG59IGZyb20gXCIuLi8uLi9jb21tb25cIjtcblxuY29uc3QgTmFtZXNwYWNlID0gXCJBV1MvUzNcIjtcblxuZXhwb3J0IGVudW0gU3RvcmFnZVR5cGUge1xuICBERUVQX0FSQ0hJVkVfT0JKRUNUX09WRVJIRUFEID0gXCJEZWVwQXJjaGl2ZU9iamVjdE92ZXJoZWFkXCIsXG4gIERFRVBfQVJDSElWRV9TM19PQkpFQ1RfT1ZFUkhFQUQgPSBcIkRlZXBBcmNoaXZlUzNPYmplY3RPdmVyaGVhZFwiLFxuICBERUVQX0FSQ0hJVkVfU1RBR0lOR19TVE9SQUdFID0gXCJEZWVwQXJjaGl2ZVN0YWdpbmdTdG9yYWdlXCIsXG4gIERFRVBfQVJDSElWRV9TVE9SQUdFID0gXCJEZWVwQXJjaGl2ZVN0b3JhZ2VcIixcbiAgR0xBQ0lFUl9PQkpFQ1RfT1ZFUkhFQUQgPSBcIkdsYWNpZXJPYmplY3RPdmVyaGVhZFwiLFxuICBHTEFDSUVSX1MzX09CSkVDVF9PVkVSSEVBRCA9IFwiR2xhY2llclMzT2JqZWN0T3ZlcmhlYWRcIixcbiAgR0xBQ0lFUl9TVEFHSU5HX1NUT1JBR0UgPSBcIkdsYWNpZXJTdGFnaW5nU3RvcmFnZVwiLFxuICBHTEFDSUVSX1NUT1JBR0UgPSBcIkdsYWNpZXJTdG9yYWdlXCIsXG4gIElOVEVMTElHRU5UX1RJRVJJTkdfRkFfU1RPUkFHRSA9IFwiSW50ZWxsaWdlbnRUaWVyaW5nRkFTdG9yYWdlXCIsXG4gIElOVEVMTElHRU5UX1RJRVJJTkdfSUFfU1RPUkFHRSA9IFwiSW50ZWxsaWdlbnRUaWVyaW5nSUFTdG9yYWdlXCIsXG4gIE9ORV9aT05FX0lBX1NJWkVfT1ZFUkhFQUQgPSBcIk9uZVpvbmVJQVNpemVPdmVyaGVhZFwiLFxuICBPTkVfWk9ORV9JQV9TVE9SQUdFID0gXCJPbmVab25lSUFTdG9yYWdlXCIsXG4gIFJFRFVDRURfUkVEVU5EQU5DWV9TVE9SQUdFID0gXCJSZWR1Y2VkUmVkdW5kYW5jeVN0b3JhZ2VcIixcbiAgU1RBTkRBUkRfSUFfU0laRV9PVkVSSEVBRCA9IFwiU3RhbmRhcmRJQVNpemVPdmVyaGVhZFwiLFxuICBTVEFOREFSRF9JQV9TVE9SQUdFID0gXCJTdGFuZGFyZElBU3RvcmFnZVwiLFxuICBTVEFOREFSRF9TVE9SQUdFID0gXCJTdGFuZGFyZFN0b3JhZ2VcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTM0J1Y2tldE1ldHJpY0ZhY3RvcnlQcm9wcyBleHRlbmRzIEJhc2VNZXRyaWNGYWN0b3J5UHJvcHMge1xuICByZWFkb25seSBidWNrZXQ6IElCdWNrZXQ7XG4gIHJlYWRvbmx5IHN0b3JhZ2VUeXBlPzogU3RvcmFnZVR5cGU7XG59XG5cbmV4cG9ydCBjbGFzcyBTM0J1Y2tldE1ldHJpY0ZhY3RvcnkgZXh0ZW5kcyBCYXNlTWV0cmljRmFjdG9yeTxTM0J1Y2tldE1ldHJpY0ZhY3RvcnlQcm9wcz4ge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgcHJvcHM6IFMzQnVja2V0TWV0cmljRmFjdG9yeVByb3BzO1xuXG4gIGNvbnN0cnVjdG9yKG1ldHJpY0ZhY3Rvcnk6IE1ldHJpY0ZhY3RvcnksIHByb3BzOiBTM0J1Y2tldE1ldHJpY0ZhY3RvcnlQcm9wcykge1xuICAgIHN1cGVyKG1ldHJpY0ZhY3RvcnksIHByb3BzKTtcblxuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgfVxuXG4gIG1ldHJpY0J1Y2tldFNpemVCeXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNGYWN0b3J5LmNyZWF0ZU1ldHJpYyhcbiAgICAgIFwiQnVja2V0U2l6ZUJ5dGVzXCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuQVZFUkFHRSxcbiAgICAgIFwiQnVja2V0U2l6ZUJ5dGVzXCIsXG4gICAgICB7XG4gICAgICAgIEJ1Y2tldE5hbWU6IHRoaXMucHJvcHMuYnVja2V0LmJ1Y2tldE5hbWUsXG4gICAgICAgIFN0b3JhZ2VUeXBlOiB0aGlzLnByb3BzLnN0b3JhZ2VUeXBlID8/IFN0b3JhZ2VUeXBlLlNUQU5EQVJEX1NUT1JBR0UsXG4gICAgICB9LFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgTmFtZXNwYWNlLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgdGhpcy5yZWdpb24sXG4gICAgICB0aGlzLmFjY291bnQsXG4gICAgKTtcbiAgfVxuXG4gIG1ldHJpY051bWJlck9mT2JqZWN0cygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNGYWN0b3J5LmNyZWF0ZU1ldHJpYyhcbiAgICAgIFwiTnVtYmVyT2ZPYmplY3RzXCIsXG4gICAgICBNZXRyaWNTdGF0aXN0aWMuQVZFUkFHRSxcbiAgICAgIFwiTnVtYmVyT2ZPYmplY3RzXCIsXG4gICAgICB7XG4gICAgICAgIEJ1Y2tldE5hbWU6IHRoaXMucHJvcHMuYnVja2V0LmJ1Y2tldE5hbWUsXG4gICAgICAgIFN0b3JhZ2VUeXBlOiBcIkFsbFN0b3JhZ2VUeXBlc1wiLFxuICAgICAgfSxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIE5hbWVzcGFjZSxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHRoaXMucmVnaW9uLFxuICAgICAgdGhpcy5hY2NvdW50LFxuICAgICk7XG4gIH1cbn1cbiJdfQ==