"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaFunctionMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
class LambdaFunctionMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.lambdaFunction = props.lambdaFunction;
        this.fillTpsWithZeroes = props.fillTpsWithZeroes ?? true;
        this.rateComputationMethod =
            props.rateComputationMethod ?? common_1.RateComputationMethod.AVERAGE;
    }
    /**
     * @deprecated Use {@link metricInvocationRate} instead.
     */
    metricTps() {
        return this.metricFactory.toRate(this.metricInvocationCount(), common_1.RateComputationMethod.PER_SECOND, false, "requests", this.fillTpsWithZeroes);
    }
    metricInvocationRate() {
        return this.metricFactory.toRate(this.metricInvocationCount(), this.rateComputationMethod, false, "requests", this.fillTpsWithZeroes);
    }
    metricInvocationCount() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metricInvocations({
            label: "Invocations",
            region: this.region,
            account: this.account,
        }));
    }
    metricThrottlesCount() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metricThrottles({
            label: "Throttles",
            region: this.region,
            account: this.account,
        }));
    }
    metricThrottlesRate() {
        return this.metricFactory.toRate(this.metricThrottlesCount(), this.rateComputationMethod, false, "throttles");
    }
    metricFaultCount() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metricErrors({
            label: "Faults",
            region: this.region,
            account: this.account,
        }));
    }
    metricFaultRate() {
        return this.metricFactory.toRate(this.metricFaultCount(), this.rateComputationMethod, false, "faults");
    }
    metricLatencyInMillis(latencyType) {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metricDuration({
            statistic: common_1.getLatencyTypeStatistic(latencyType),
            label: common_1.getLatencyTypeLabel(latencyType),
            region: this.region,
            account: this.account,
        }));
    }
    /**
     * @deprecated Use {@link metricLatencyInMillis} instead.
     */
    metricLatencyP99InMillis() {
        return this.metricLatencyInMillis(common_1.LatencyType.P99);
    }
    /**
     * @deprecated Use {@link metricLatencyInMillis} instead.
     */
    metricLatencyP90InMillis() {
        return this.metricLatencyInMillis(common_1.LatencyType.P90);
    }
    /**
     * @deprecated Use {@link metricLatencyInMillis} instead.
     */
    metricLatencyP50InMillis() {
        return this.metricLatencyInMillis(common_1.LatencyType.P50);
    }
    metricConcurrentExecutions() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metric("ConcurrentExecutions", {
            statistic: common_1.MetricStatistic.MAX,
            label: "Concurrent",
            region: this.region,
            account: this.account,
        }));
    }
    metricProvisionedConcurrencySpilloverInvocations() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metric("ProvisionedConcurrencySpilloverInvocations", {
            statistic: common_1.MetricStatistic.SUM,
            label: "Provisioned Concurrency Spillovers",
            region: this.region,
            account: this.account,
        }));
    }
    metricProvisionedConcurrencySpilloverRate() {
        return this.metricFactory.toRate(this.metricProvisionedConcurrencySpilloverInvocations(), this.rateComputationMethod, false, "pcsi");
    }
    metricMaxIteratorAgeInMillis() {
        return this.metricFactory.adaptMetric(this.lambdaFunction.metric("IteratorAge", {
            statistic: common_1.MetricStatistic.MAX,
            label: "Iterator Age",
            region: this.region,
            account: this.account,
        }));
    }
}
exports.LambdaFunctionMetricFactory = LambdaFunctionMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
LambdaFunctionMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.LambdaFunctionMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,