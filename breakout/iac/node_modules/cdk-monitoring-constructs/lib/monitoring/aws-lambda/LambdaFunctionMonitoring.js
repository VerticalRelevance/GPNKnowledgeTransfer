"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaFunctionMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const LambdaFunctionEnhancedMetricFactory_1 = require("./LambdaFunctionEnhancedMetricFactory");
const LambdaFunctionMetricFactory_1 = require("./LambdaFunctionMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class LambdaFunctionMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        this.namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct: props.lambdaFunction,
            fallbackConstructName: this.resolveFunctionName(props.lambdaFunction),
        });
        this.title = this.namingStrategy.resolveHumanReadableName();
        this.functionUrl = scope
            .createAwsConsoleUrlFactory()
            .getLambdaFunctionUrl(props.lambdaFunction.functionName);
        this.alarmFactory = this.createAlarmFactory(this.namingStrategy.resolveAlarmFriendlyName());
        this.errorAlarmFactory = new common_1.ErrorAlarmFactory(this.alarmFactory);
        this.latencyAlarmFactory = new common_1.LatencyAlarmFactory(this.alarmFactory);
        this.tpsAlarmFactory = new common_1.TpsAlarmFactory(this.alarmFactory);
        this.taskHealthAlarmFactory = new common_1.TaskHealthAlarmFactory(this.alarmFactory);
        this.ageAlarmFactory = new common_1.AgeAlarmFactory(this.alarmFactory);
        this.usageAlarmFactory = new common_1.UsageAlarmFactory(this.alarmFactory);
        this.latencyAnnotations = [];
        this.errorCountAnnotations = [];
        this.errorRateAnnotations = [];
        this.invocationCountAnnotations = [];
        this.invocationRateAnnotations = [];
        this.tpsAnnotations = [];
        this.cpuTotalTimeAnnotations = [];
        this.memoryUsageAnnotations = [];
        this.maxIteratorAgeAnnotations = [];
        this.metricFactory = new LambdaFunctionMetricFactory_1.LambdaFunctionMetricFactory(scope.createMetricFactory(), props);
        this.tpsMetric = this.metricFactory.metricTps();
        this.p50LatencyMetric = this.metricFactory.metricLatencyInMillis(common_1.LatencyType.P50);
        this.p90LatencyMetric = this.metricFactory.metricLatencyInMillis(common_1.LatencyType.P90);
        this.p99LatencyMetric = this.metricFactory.metricLatencyInMillis(common_1.LatencyType.P99);
        this.maxLatencyMetric = this.metricFactory.metricLatencyInMillis(common_1.LatencyType.MAX);
        this.faultCountMetric = this.metricFactory.metricFaultCount();
        this.faultRateMetric = this.metricFactory.metricFaultRate();
        this.invocationCountMetric = this.metricFactory.metricInvocationCount();
        this.throttlesCountMetric = this.metricFactory.metricThrottlesCount();
        this.throttlesRateMetric = this.metricFactory.metricThrottlesRate();
        this.concurrentExecutionsCountMetric =
            this.metricFactory.metricConcurrentExecutions();
        this.provisionedConcurrencySpilloverInvocationsCountMetric =
            this.metricFactory.metricProvisionedConcurrencySpilloverInvocations();
        this.provisionedConcurrencySpilloverInvocationsRateMetric =
            this.metricFactory.metricProvisionedConcurrencySpilloverRate();
        this.maxIteratorAgeMetric =
            this.metricFactory.metricMaxIteratorAgeInMillis();
        this.lambdaInsightsEnabled = props.lambdaInsightsEnabled ?? false;
        if (props.lambdaInsightsEnabled) {
            this.enhancedMetricFactory = new LambdaFunctionEnhancedMetricFactory_1.LambdaFunctionEnhancedMetricFactory(scope.createMetricFactory(), props);
            this.enhancedMonitoringMaxCpuTotalTimeMetric =
                this.enhancedMetricFactory.enhancedMetricMaxCpuTotalTime();
            this.enhancedMonitoringP90CpuTotalTimeMetric =
                this.enhancedMetricFactory.enhancedMetricP90CpuTotalTime();
            this.enhancedMonitoringAvgCpuTotalTimeMetric =
                this.enhancedMetricFactory.enhancedMetricAvgCpuTotalTime();
            this.enhancedMonitoringMaxMemoryUtilizationMetric =
                this.enhancedMetricFactory.enhancedMetricMaxMemoryUtilization();
            this.enhancedMonitoringP90MemoryUtilizationMetric =
                this.enhancedMetricFactory.enhancedMetricP90MemoryUtilization();
            this.enhancedMonitoringAvgMemoryUtilizationMetric =
                this.enhancedMetricFactory.enhancedMetricAvgMemoryUtilization();
            this.enhancedMetricFunctionCostMetric =
                this.enhancedMetricFactory.enhancedMetricFunctionCost();
            for (const disambiguator in props.addEnhancedMonitoringMaxCpuTotalTimeAlarm) {
                const alarmProps = props.addEnhancedMonitoringMaxCpuTotalTimeAlarm[disambiguator];
                const createdAlarm = this.latencyAlarmFactory.addDurationAlarm(
                /* eslint-disable @typescript-eslint/no-non-null-assertion */
                this.enhancedMonitoringMaxCpuTotalTimeMetric, 
                /* eslint-enable @typescript-eslint/no-non-null-assertion */
                common_1.LatencyType.P100, alarmProps, disambiguator);
                this.cpuTotalTimeAnnotations.push(createdAlarm.annotation);
                this.addAlarm(createdAlarm);
            }
            for (const disambiguator in props.addEnhancedMonitoringP90CpuTotalTimeAlarm) {
                const alarmProps = props.addEnhancedMonitoringP90CpuTotalTimeAlarm[disambiguator];
                const createdAlarm = this.latencyAlarmFactory.addDurationAlarm(
                /* eslint-disable @typescript-eslint/no-non-null-assertion */
                this.enhancedMonitoringP90CpuTotalTimeMetric, 
                /* eslint-enable @typescript-eslint/no-non-null-assertion */
                common_1.LatencyType.P90, alarmProps, disambiguator);
                this.cpuTotalTimeAnnotations.push(createdAlarm.annotation);
                this.addAlarm(createdAlarm);
            }
            for (const disambiguator in props.addEnhancedMonitoringAvgCpuTotalTimeAlarm) {
                const alarmProps = props.addEnhancedMonitoringAvgCpuTotalTimeAlarm[disambiguator];
                const createdAlarm = this.latencyAlarmFactory.addDurationAlarm(
                /* eslint-disable @typescript-eslint/no-non-null-assertion */
                this.enhancedMonitoringAvgCpuTotalTimeMetric, 
                /* eslint-enable @typescript-eslint/no-non-null-assertion */
                common_1.LatencyType.AVERAGE, alarmProps, disambiguator);
                this.cpuTotalTimeAnnotations.push(createdAlarm.annotation);
                this.addAlarm(createdAlarm);
            }
            for (const disambiguator in props.addEnhancedMonitoringMaxMemoryUtilizationAlarm) {
                const alarmProps = props.addEnhancedMonitoringMaxMemoryUtilizationAlarm[disambiguator];
                const createdAlarm = this.usageAlarmFactory.addMaxMemoryUsagePercentAlarm(
                /* eslint-disable @typescript-eslint/no-non-null-assertion */
                this.enhancedMonitoringMaxMemoryUtilizationMetric, 
                /* eslint-enable @typescript-eslint/no-non-null-assertion */
                alarmProps, disambiguator);
                this.memoryUsageAnnotations.push(createdAlarm.annotation);
                this.addAlarm(createdAlarm);
            }
            for (const disambiguator in props.addEnhancedMonitoringP90MemoryUtilizationAlarm) {
                const alarmProps = props.addEnhancedMonitoringP90MemoryUtilizationAlarm[disambiguator];
                const createdAlarm = this.usageAlarmFactory.addMemoryUsagePercentAlarm(
                /* eslint-disable @typescript-eslint/no-non-null-assertion */
                this.enhancedMonitoringP90MemoryUtilizationMetric, 
                /* eslint-enable @typescript-eslint/no-non-null-assertion */
                alarmProps, common_1.UsageType.P90, disambiguator);
                this.memoryUsageAnnotations.push(createdAlarm.annotation);
                this.addAlarm(createdAlarm);
            }
            for (const disambiguator in props.addEnhancedMonitoringAvgMemoryUtilizationAlarm) {
                const alarmProps = props.addEnhancedMonitoringAvgMemoryUtilizationAlarm[disambiguator];
                const createdAlarm = this.usageAlarmFactory.addMemoryUsagePercentAlarm(
                /* eslint-disable @typescript-eslint/no-non-null-assertion */
                this.enhancedMonitoringAvgMemoryUtilizationMetric, 
                /* eslint-enable @typescript-eslint/no-non-null-assertion */
                alarmProps, common_1.UsageType.AVERAGE, disambiguator);
                this.memoryUsageAnnotations.push(createdAlarm.annotation);
                this.addAlarm(createdAlarm);
            }
        }
        for (const disambiguator in props.addLatencyP50Alarm) {
            const alarmProps = props.addLatencyP50Alarm[disambiguator];
            const createdAlarm = this.latencyAlarmFactory.addLatencyAlarm(this.p50LatencyMetric, common_1.LatencyType.P50, alarmProps, disambiguator);
            this.latencyAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addLatencyP90Alarm) {
            const alarmProps = props.addLatencyP90Alarm[disambiguator];
            const createdAlarm = this.latencyAlarmFactory.addLatencyAlarm(this.p90LatencyMetric, common_1.LatencyType.P90, alarmProps, disambiguator);
            this.latencyAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addLatencyP99Alarm) {
            const alarmProps = props.addLatencyP99Alarm[disambiguator];
            const createdAlarm = this.latencyAlarmFactory.addLatencyAlarm(this.p99LatencyMetric, common_1.LatencyType.P99, alarmProps, disambiguator);
            this.latencyAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxLatencyAlarm) {
            const alarmProps = props.addMaxLatencyAlarm[disambiguator];
            const createdAlarm = this.latencyAlarmFactory.addLatencyAlarm(this.maxLatencyMetric, common_1.LatencyType.MAX, alarmProps, disambiguator);
            this.latencyAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addFaultCountAlarm) {
            const alarmProps = props.addFaultCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.faultCountMetric, common_1.ErrorType.FAULT, alarmProps, disambiguator);
            this.errorCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addFaultRateAlarm) {
            const alarmProps = props.addFaultRateAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.faultRateMetric, common_1.ErrorType.FAULT, alarmProps, disambiguator);
            this.errorRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addLowTpsAlarm) {
            const alarmProps = props.addLowTpsAlarm[disambiguator];
            const createdAlarm = this.tpsAlarmFactory.addMinTpsAlarm(this.tpsMetric, alarmProps, disambiguator);
            this.tpsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addHighTpsAlarm) {
            const alarmProps = props.addHighTpsAlarm[disambiguator];
            const createdAlarm = this.tpsAlarmFactory.addMaxTpsAlarm(this.tpsMetric, alarmProps, disambiguator);
            this.tpsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addThrottlesCountAlarm) {
            const alarmProps = props.addThrottlesCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.throttlesCountMetric, common_1.ErrorType.THROTTLED, alarmProps, disambiguator);
            this.invocationCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addThrottlesRateAlarm) {
            const alarmProps = props.addThrottlesRateAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorRateAlarm(this.throttlesRateMetric, common_1.ErrorType.THROTTLED, alarmProps, disambiguator);
            this.invocationRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMinInvocationsCountAlarm) {
            const alarmProps = props.addMinInvocationsCountAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMinUsageCountAlarm(this.invocationCountMetric, alarmProps, disambiguator);
            this.invocationCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addConcurrentExecutionsCountAlarm) {
            const alarmProps = props.addConcurrentExecutionsCountAlarm[disambiguator];
            const createdAlarm = this.taskHealthAlarmFactory.addRunningTaskCountAlarm(this.concurrentExecutionsCountMetric, alarmProps, disambiguator);
            this.invocationCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addProvisionedConcurrencySpilloverInvocationsCountAlarm) {
            const alarmProps = props.addProvisionedConcurrencySpilloverInvocationsCountAlarm[disambiguator];
            const createdAlarm = this.taskHealthAlarmFactory.addRunningTaskCountAlarm(this.provisionedConcurrencySpilloverInvocationsCountMetric, alarmProps, disambiguator);
            this.invocationCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addProvisionedConcurrencySpilloverInvocationsRateAlarm) {
            const alarmProps = props.addProvisionedConcurrencySpilloverInvocationsRateAlarm[disambiguator];
            const createdAlarm = this.taskHealthAlarmFactory.addRunningTaskRateAlarm(this.provisionedConcurrencySpilloverInvocationsRateMetric, alarmProps, disambiguator);
            this.invocationRateAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxIteratorAgeAlarm) {
            const alarmProps = props.addMaxIteratorAgeAlarm[disambiguator];
            const createdAlarm = this.ageAlarmFactory.addIteratorMaxAgeAlarm(this.maxIteratorAgeMetric, alarmProps, disambiguator);
            this.maxIteratorAgeAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createTpsWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createLatencyWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createErrorRateWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        const widgets = [
            this.createTitleWidget(),
            new aws_cloudwatch_1.Row(this.createTpsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight), this.createLatencyWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight), this.createErrorRateWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight), this.createRateWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight)),
            new aws_cloudwatch_1.Row(this.createInvocationWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight), this.createIteratorAgeWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight), this.createErrorCountWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight)),
        ];
        if (this.lambdaInsightsEnabled) {
            widgets.push(new aws_cloudwatch_1.Row(this.createLambdaInsightsCpuWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight), this.createLambdaInsightsMemoryWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight), this.createLambdaInsightsFunctionCostWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight)));
        }
        return widgets;
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Lambda Function",
            title: this.title,
            goToLinkUrl: this.functionUrl,
        });
    }
    createTpsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "TPS",
            left: [this.tpsMetric],
            leftYAxis: common_1.RateAxisFromZero,
            leftAnnotations: this.tpsAnnotations,
        });
    }
    createLatencyWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Latency",
            left: [
                this.p50LatencyMetric,
                this.p90LatencyMetric,
                this.p99LatencyMetric,
            ],
            leftYAxis: common_1.TimeAxisMillisFromZero,
            leftAnnotations: this.latencyAnnotations,
        });
    }
    createErrorCountWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors",
            left: [this.faultCountMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.errorCountAnnotations,
        });
    }
    createErrorRateWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors (rate)",
            left: [this.faultRateMetric],
            leftYAxis: common_1.RateAxisFromZero,
            leftAnnotations: this.errorRateAnnotations,
        });
    }
    createRateWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Rates",
            left: [
                this.throttlesRateMetric,
                this.provisionedConcurrencySpilloverInvocationsRateMetric,
            ],
            leftYAxis: common_1.RateAxisFromZero,
            leftAnnotations: this.invocationRateAnnotations,
        });
    }
    createInvocationWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Invocations",
            left: [
                this.invocationCountMetric,
                this.throttlesCountMetric,
                this.concurrentExecutionsCountMetric,
                this.provisionedConcurrencySpilloverInvocationsCountMetric,
            ],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.invocationCountAnnotations,
        });
    }
    createIteratorAgeWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Iterator",
            left: [this.maxIteratorAgeMetric],
            leftYAxis: common_1.TimeAxisMillisFromZero,
            leftAnnotations: this.maxIteratorAgeAnnotations,
        });
    }
    createLambdaInsightsCpuWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "CPU Total Time",
            left: [
                /* eslint-disable @typescript-eslint/no-non-null-assertion */
                this.enhancedMonitoringMaxCpuTotalTimeMetric,
                this.enhancedMonitoringP90CpuTotalTimeMetric,
                this.enhancedMonitoringAvgCpuTotalTimeMetric,
            ],
            leftYAxis: common_1.TimeAxisMillisFromZero,
            leftAnnotations: this.cpuTotalTimeAnnotations,
        });
    }
    createLambdaInsightsMemoryWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Memory Utilization",
            left: [
                /* eslint-disable @typescript-eslint/no-non-null-assertion */
                this.enhancedMonitoringMaxMemoryUtilizationMetric,
                this.enhancedMonitoringP90MemoryUtilizationMetric,
                this.enhancedMonitoringAvgMemoryUtilizationMetric,
            ],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
            leftAnnotations: this.memoryUsageAnnotations,
        });
    }
    createLambdaInsightsFunctionCostWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Function Cost",
            /* eslint-disable @typescript-eslint/no-non-null-assertion */
            left: [this.enhancedMetricFunctionCostMetric],
            /* eslint-enable @typescript-eslint/no-non-null-assertion */
            leftYAxis: common_1.MegabyteMillisecondAxisFromZero,
        });
    }
    resolveFunctionName(lambdaFunction) {
        // try to take the name (if specified) instead of token
        return lambdaFunction.node.defaultChild?.functionName;
    }
}
exports.LambdaFunctionMonitoring = LambdaFunctionMonitoring;
_a = JSII_RTTI_SYMBOL_1;
LambdaFunctionMonitoring[_a] = { fqn: "cdk-monitoring-constructs.LambdaFunctionMonitoring", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,