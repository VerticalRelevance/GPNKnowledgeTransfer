"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepFunctionServiceIntegrationMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const Namespace = "AWS/States";
class StepFunctionServiceIntegrationMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.rateComputationMethod = common_1.RateComputationMethod.AVERAGE;
        this.dimensionsMap = {
            ServiceIntegrationResourceArn: props.serviceIntegrationResourceArn,
        };
    }
    metricServiceIntegrationRunTimeP99InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationRunTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationRunTimeP90InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationRunTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationRunTimeP50InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationRunTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationScheduleTimeP99InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationScheduleTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationScheduleTimeP90InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationScheduleTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationScheduleTimeP50InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationScheduleTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationTimeP99InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationTimeP90InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationTimeP50InMillis() {
        return this.metricFactory.createMetric("ServiceIntegrationTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationsFailed() {
        return this.metricFactory.createMetric("ServiceIntegrationsFailed", common_1.MetricStatistic.SUM, "Failed", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationsFailedRate() {
        return this.metricFactory.toRate(this.metricServiceIntegrationsFailed(), this.rateComputationMethod, false, "faults");
    }
    metricServiceIntegrationsScheduled() {
        return this.metricFactory.createMetric("ServiceIntegrationsScheduled", common_1.MetricStatistic.SUM, "Scheduled", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationsStarted() {
        return this.metricFactory.createMetric("ServiceIntegrationsStarted", common_1.MetricStatistic.SUM, "Started", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationsSucceeded() {
        return this.metricFactory.createMetric("ServiceIntegrationsSucceeded", common_1.MetricStatistic.SUM, "Succeeded", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricServiceIntegrationsTimedOut() {
        return this.metricFactory.createMetric("ServiceIntegrationsTimedOut", common_1.MetricStatistic.SUM, "Timeout", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
}
exports.StepFunctionServiceIntegrationMetricFactory = StepFunctionServiceIntegrationMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
StepFunctionServiceIntegrationMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.StepFunctionServiceIntegrationMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,