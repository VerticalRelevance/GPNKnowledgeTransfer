"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepFunctionMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const Namespace = "AWS/States";
class StepFunctionMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.rateComputationMethod = common_1.RateComputationMethod.AVERAGE;
        this.dimensionsMap = {
            StateMachineArn: props.stateMachine.stateMachineArn,
        };
    }
    metricExecutionTimeP99InMillis() {
        return this.metricFactory.createMetric("ExecutionTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricExecutionTimeP90InMillis() {
        return this.metricFactory.createMetric("ExecutionTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricExecutionTimeP50InMillis() {
        return this.metricFactory.createMetric("ExecutionTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricExecutionsFailed() {
        return this.metricFactory.createMetric("ExecutionsFailed", common_1.MetricStatistic.SUM, "Failed", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricExecutionsFailedRate() {
        return this.metricFactory.toRate(this.metricExecutionsFailed(), this.rateComputationMethod, false, "faults");
    }
    metricExecutionsTimedOut() {
        return this.metricFactory.createMetric("ExecutionsTimedOut", common_1.MetricStatistic.SUM, "Timeout", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricExecutionThrottled() {
        return this.metricFactory.createMetric("ExecutionThrottled", common_1.MetricStatistic.SUM, "Throttled", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricExecutionsAborted() {
        return this.metricFactory.createMetric("ExecutionsAborted", common_1.MetricStatistic.SUM, "Aborted", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricExecutionsStarted() {
        return this.metricFactory.createMetric("ExecutionsStarted", common_1.MetricStatistic.SUM, "Started", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricExecutionsSucceeded() {
        return this.metricFactory.createMetric("ExecutionsSucceeded", common_1.MetricStatistic.SUM, "Succeeded", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
}
exports.StepFunctionMetricFactory = StepFunctionMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
StepFunctionMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.StepFunctionMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,