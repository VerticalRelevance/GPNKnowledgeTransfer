"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepFunctionActivityMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const Namespace = "AWS/States";
class StepFunctionActivityMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.rateComputationMethod = common_1.RateComputationMethod.AVERAGE;
        this.dimensionsMap = {
            ActivityArn: props.activity.activityArn,
        };
    }
    metricActivityRunTimeP99InMillis() {
        return this.metricFactory.createMetric("ActivityRunTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivityRunTimeP90InMillis() {
        return this.metricFactory.createMetric("ActivityRunTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivityRunTimeP50InMillis() {
        return this.metricFactory.createMetric("ActivityRunTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivityScheduleTimeP99InMillis() {
        return this.metricFactory.createMetric("ActivityScheduleTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivityScheduleTimeP90InMillis() {
        return this.metricFactory.createMetric("ActivityScheduleTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivityScheduleTimeP50InMillis() {
        return this.metricFactory.createMetric("ActivityScheduleTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivityTimeP99InMillis() {
        return this.metricFactory.createMetric("ActivityTime", common_1.MetricStatistic.P99, "P99", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivityTimeP90InMillis() {
        return this.metricFactory.createMetric("ActivityTime", common_1.MetricStatistic.P90, "P90", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivityTimeP50InMillis() {
        return this.metricFactory.createMetric("ActivityTime", common_1.MetricStatistic.P50, "P50", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivitiesFailed() {
        return this.metricFactory.createMetric("ActivitiesFailed", common_1.MetricStatistic.SUM, "Failed", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivitiesFailedRate() {
        const metric = this.metricActivitiesFailed();
        return this.metricFactory.toRate(metric, this.rateComputationMethod, false, "faults");
    }
    metricActivitiesHeartbeatTimedOut() {
        return this.metricFactory.createMetric("ActivitiesHeartbeatTimedOut", common_1.MetricStatistic.SUM, "HeartbeatTimedOut", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivitiesScheduled() {
        return this.metricFactory.createMetric("ActivitiesScheduled", common_1.MetricStatistic.SUM, "Scheduled", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivitiesStarted() {
        return this.metricFactory.createMetric("ActivitiesStarted", common_1.MetricStatistic.SUM, "Started", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivitiesSucceeded() {
        return this.metricFactory.createMetric("ActivitiesSucceeded", common_1.MetricStatistic.SUM, "Succeeded", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricActivitiesTimedOut() {
        return this.metricFactory.createMetric("ActivitiesTimedOut", common_1.MetricStatistic.SUM, "Timeout", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
}
exports.StepFunctionActivityMetricFactory = StepFunctionActivityMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
StepFunctionActivityMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.StepFunctionActivityMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,