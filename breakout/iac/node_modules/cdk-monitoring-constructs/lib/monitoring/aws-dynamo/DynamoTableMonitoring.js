"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoTableMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const DynamoTableMetricFactory_1 = require("./DynamoTableMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
class DynamoTableMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct: props.table,
            fallbackConstructName: this.resolveTableName(props.table),
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.tableUrl = scope
            .createAwsConsoleUrlFactory()
            .getDynamoTableUrl(props.table.tableName);
        this.tableBillingMode =
            props.billingMode ?? this.resolveTableBillingMode(props.table);
        this.alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.errorAlarmFactory = new common_1.ErrorAlarmFactory(this.alarmFactory);
        this.latencyAlarmFactory = new common_1.LatencyAlarmFactory(this.alarmFactory);
        this.dynamoCapacityAlarmFactory = new common_1.DynamoAlarmFactory(this.alarmFactory);
        this.usageAlarmFactory = new common_1.UsageAlarmFactory(this.alarmFactory);
        this.errorCountAnnotations = [];
        this.latencyAnnotations = [];
        this.dynamoReadCapacityAnnotations = [];
        this.dynamoWriteCapacityAnnotations = [];
        this.throttledEventsAnnotations = [];
        const metricFactory = new DynamoTableMetricFactory_1.DynamoTableMetricFactory(scope.createMetricFactory(), props);
        this.provisionedReadUnitsMetric =
            metricFactory.metricProvisionedReadCapacityUnits();
        this.provisionedWriteUnitsMetric =
            metricFactory.metricProvisionedWriteCapacityUnits();
        this.consumedReadUnitsMetric =
            metricFactory.metricConsumedReadCapacityUnits();
        this.consumedWriteUnitsMetric =
            metricFactory.metricConsumedWriteCapacityUnits();
        this.readThrottleCountMetric =
            metricFactory.metricThrottledReadRequestCount();
        this.writeThrottleCountMetric =
            metricFactory.metricThrottledWriteRequestCount();
        this.systemErrorMetric = metricFactory.metricSystemErrorsCount();
        this.timeToLiveDeletedItemCountMetric =
            metricFactory.metricTimeToLiveDeletedItemCount();
        this.latencyAverageSearchMetrics =
            metricFactory.metricSearchAverageSuccessfulRequestLatencyInMillis();
        this.averagePerOperationLatencyMetrics = {
            [aws_dynamodb_1.Operation.GET_RECORDS]: metricFactory.metricAverageSuccessfulRequestLatencyInMillis(aws_dynamodb_1.Operation.GET_RECORDS),
            [aws_dynamodb_1.Operation.QUERY]: metricFactory.metricAverageSuccessfulRequestLatencyInMillis(aws_dynamodb_1.Operation.QUERY),
            [aws_dynamodb_1.Operation.SCAN]: metricFactory.metricAverageSuccessfulRequestLatencyInMillis(aws_dynamodb_1.Operation.SCAN),
            [aws_dynamodb_1.Operation.PUT_ITEM]: metricFactory.metricAverageSuccessfulRequestLatencyInMillis(aws_dynamodb_1.Operation.PUT_ITEM),
            [aws_dynamodb_1.Operation.GET_ITEM]: metricFactory.metricAverageSuccessfulRequestLatencyInMillis(aws_dynamodb_1.Operation.GET_ITEM),
            [aws_dynamodb_1.Operation.UPDATE_ITEM]: metricFactory.metricAverageSuccessfulRequestLatencyInMillis(aws_dynamodb_1.Operation.UPDATE_ITEM),
            [aws_dynamodb_1.Operation.DELETE_ITEM]: metricFactory.metricAverageSuccessfulRequestLatencyInMillis(aws_dynamodb_1.Operation.DELETE_ITEM),
            [aws_dynamodb_1.Operation.BATCH_GET_ITEM]: metricFactory.metricAverageSuccessfulRequestLatencyInMillis(aws_dynamodb_1.Operation.BATCH_GET_ITEM),
            [aws_dynamodb_1.Operation.BATCH_WRITE_ITEM]: metricFactory.metricAverageSuccessfulRequestLatencyInMillis(aws_dynamodb_1.Operation.BATCH_WRITE_ITEM),
        };
        this.readCapacityUsageMetric =
            metricFactory.metricReadCapacityUtilizationPercentage();
        this.writeCapacityUsageMetric =
            metricFactory.metricWriteCapacityUtilizationPercentage();
        for (const disambiguator in props.addConsumedReadCapacityAlarm) {
            const alarmProps = props.addConsumedReadCapacityAlarm[disambiguator];
            const createdAlarm = this.dynamoCapacityAlarmFactory.addConsumedCapacityAlarm(this.consumedReadUnitsMetric, common_1.CapacityType.READ, alarmProps, disambiguator);
            this.dynamoReadCapacityAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addConsumedWriteCapacityAlarm) {
            const alarmProps = props.addConsumedWriteCapacityAlarm[disambiguator];
            const createdAlarm = this.dynamoCapacityAlarmFactory.addConsumedCapacityAlarm(this.consumedWriteUnitsMetric, common_1.CapacityType.WRITE, alarmProps, disambiguator);
            this.dynamoWriteCapacityAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addReadThrottledEventsCountAlarm) {
            const alarmProps = props.addReadThrottledEventsCountAlarm[disambiguator];
            const createdAlarm = this.dynamoCapacityAlarmFactory.addThrottledEventsAlarm(this.readThrottleCountMetric, common_1.CapacityType.READ, alarmProps, disambiguator);
            this.throttledEventsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addWriteThrottledEventsCountAlarm) {
            const alarmProps = props.addWriteThrottledEventsCountAlarm[disambiguator];
            const createdAlarm = this.dynamoCapacityAlarmFactory.addThrottledEventsAlarm(this.writeThrottleCountMetric, common_1.CapacityType.WRITE, alarmProps, disambiguator);
            this.throttledEventsAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addSystemErrorCountAlarm) {
            const alarmProps = props.addSystemErrorCountAlarm[disambiguator];
            const createdAlarm = this.errorAlarmFactory.addErrorCountAlarm(this.systemErrorMetric, common_1.ErrorType.SYSTEM_ERROR, alarmProps, disambiguator);
            this.errorCountAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMinTimeToLiveDeletedItemCountAlarm) {
            const alarmProps = {
                // Missing data is bad if we expect TTL to be enabled
                treatMissingDataOverride: aws_cloudwatch_1.TreatMissingData.BREACHING,
                ...props.addMinTimeToLiveDeletedItemCountAlarm[disambiguator],
            };
            const createdAlarm = this.usageAlarmFactory.addMinCountAlarm(this.timeToLiveDeletedItemCountMetric, alarmProps, disambiguator);
            this.addAlarm(createdAlarm);
        }
        this.forEachOperationLatencyAlarmDefinition(aws_dynamodb_1.Operation.GET_RECORDS, props.addAverageSuccessfulGetRecordsLatencyAlarm);
        this.forEachOperationLatencyAlarmDefinition(aws_dynamodb_1.Operation.QUERY, props.addAverageSuccessfulQueryLatencyAlarm);
        this.forEachOperationLatencyAlarmDefinition(aws_dynamodb_1.Operation.SCAN, props.addAverageSuccessfulScanLatencyAlarm);
        this.forEachOperationLatencyAlarmDefinition(aws_dynamodb_1.Operation.PUT_ITEM, props.addAverageSuccessfulPutItemLatencyAlarm);
        this.forEachOperationLatencyAlarmDefinition(aws_dynamodb_1.Operation.GET_ITEM, props.addAverageSuccessfulGetItemLatencyAlarm);
        this.forEachOperationLatencyAlarmDefinition(aws_dynamodb_1.Operation.UPDATE_ITEM, props.addAverageSuccessfulUpdateItemLatencyAlarm);
        this.forEachOperationLatencyAlarmDefinition(aws_dynamodb_1.Operation.DELETE_ITEM, props.addAverageSuccessfulDeleteItemLatencyAlarm);
        this.forEachOperationLatencyAlarmDefinition(aws_dynamodb_1.Operation.BATCH_GET_ITEM, props.addAverageSuccessfulBatchGetItemLatencyAlarm);
        this.forEachOperationLatencyAlarmDefinition(aws_dynamodb_1.Operation.BATCH_WRITE_ITEM, props.addAverageSuccessfulBatchWriteItemLatencyAlarm);
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    forEachOperationLatencyAlarmDefinition(operation, alarm) {
        for (const disambiguator in alarm) {
            const alarmProps = alarm[disambiguator];
            const createdAlarm = this.latencyAlarmFactory.addLatencyAlarm(
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.averagePerOperationLatencyMetrics[operation], common_1.LatencyType.AVERAGE, alarmProps, disambiguator, operation);
            this.latencyAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
    }
    summaryWidgets() {
        return [
            // Title
            this.createTitleWidget(),
            // Read units
            this.createReadCapacityWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
            // Write units
            this.createWriteCapacityWidget(common_1.HalfWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        return [
            // Title
            this.createTitleWidget(),
            new aws_cloudwatch_1.Column(
            // Read units
            this.createReadCapacityWidget(common_1.QuarterWidth, common_1.DefaultTwoLinerGraphWidgetHalfHeight), 
            // Write units
            this.createWriteCapacityWidget(common_1.QuarterWidth, common_1.DefaultTwoLinerGraphWidgetHalfHeight)),
            // Latency
            this.createLatencyWidget(common_1.QuarterWidth + common_1.HalfQuarterWidth, common_1.DefaultTwoLinerGraphWidgetHeight),
            // Throttles
            this.createThrottlesWidget(common_1.HalfQuarterWidth, common_1.DefaultTwoLinerGraphWidgetHeight),
            // Errors
            this.createErrorsWidget(common_1.QuarterWidth, common_1.DefaultTwoLinerGraphWidgetHeight),
        ];
    }
    createLatencyWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Latency (Average)",
            left: [this.latencyAverageSearchMetrics],
            leftYAxis: common_1.TimeAxisMillisFromZero,
            leftAnnotations: this.latencyAnnotations,
            legendPosition: aws_cloudwatch_1.LegendPosition.RIGHT,
        });
    }
    createThrottlesWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Throttles",
            left: [this.readThrottleCountMetric, this.writeThrottleCountMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.throttledEventsAnnotations,
        });
    }
    createErrorsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Errors",
            left: [this.systemErrorMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.errorCountAnnotations,
        });
    }
    createReadCapacityWidget(width, height) {
        if (this.tableBillingMode === aws_dynamodb_1.BillingMode.PAY_PER_REQUEST) {
            // simplified view for on-demand table
            return new aws_cloudwatch_1.GraphWidget({
                width,
                height,
                title: "Read Usage",
                left: [this.consumedReadUnitsMetric],
                leftYAxis: common_1.CountAxisFromZero,
                leftAnnotations: this.dynamoReadCapacityAnnotations,
            });
        }
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Read Usage",
            left: [this.consumedReadUnitsMetric, this.provisionedReadUnitsMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.dynamoReadCapacityAnnotations,
            right: [this.readCapacityUsageMetric],
            rightYAxis: common_1.PercentageAxisFromZeroToHundred,
            legendPosition: aws_cloudwatch_1.LegendPosition.RIGHT,
        });
    }
    createWriteCapacityWidget(width, height) {
        if (this.tableBillingMode === aws_dynamodb_1.BillingMode.PAY_PER_REQUEST) {
            // simplified view for on-demand table
            return new aws_cloudwatch_1.GraphWidget({
                width,
                height,
                title: "Write Usage",
                left: [this.consumedWriteUnitsMetric],
                leftYAxis: common_1.CountAxisFromZero,
                leftAnnotations: this.dynamoWriteCapacityAnnotations,
            });
        }
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Write Usage",
            left: [this.consumedWriteUnitsMetric, this.provisionedWriteUnitsMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.dynamoWriteCapacityAnnotations,
            right: [this.writeCapacityUsageMetric],
            rightYAxis: common_1.PercentageAxisFromZeroToHundred,
            legendPosition: aws_cloudwatch_1.LegendPosition.RIGHT,
        });
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Dynamo Table",
            title: this.title,
            goToLinkUrl: this.tableUrl,
        });
    }
    resolveTableName(dynamoTable) {
        // try to take the name (if specified) instead of token
        return dynamoTable.node.defaultChild?.tableName;
    }
    resolveTableBillingMode(dynamoTable) {
        const billingMode = dynamoTable.node.defaultChild
            ?.billingMode;
        if (billingMode) {
            return billingMode;
        }
        // fallback to default (for backwards compatibility)
        return aws_dynamodb_1.BillingMode.PROVISIONED;
    }
}
exports.DynamoTableMonitoring = DynamoTableMonitoring;
_a = JSII_RTTI_SYMBOL_1;
DynamoTableMonitoring[_a] = { fqn: "cdk-monitoring-constructs.DynamoTableMonitoring", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,