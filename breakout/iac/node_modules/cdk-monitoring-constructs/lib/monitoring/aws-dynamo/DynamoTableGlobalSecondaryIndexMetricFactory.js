"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoTableGlobalSecondaryIndexMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const DynamoDbNamespace = "AWS/DynamoDB";
class DynamoTableGlobalSecondaryIndexMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.table = props.table;
        this.dimensionsMap = {
            TableName: props.table.tableName,
            GlobalSecondaryIndexName: props.globalSecondaryIndexName,
        };
    }
    metricProvisionedReadCapacityUnits() {
        return this.metricFactory.createMetric("ProvisionedReadCapacityUnits", common_1.MetricStatistic.SUM, "Provisioned", this.dimensionsMap, undefined, DynamoDbNamespace, undefined, this.region, this.account);
    }
    metricProvisionedWriteCapacityUnits() {
        return this.metricFactory.createMetric("ProvisionedWriteCapacityUnits", common_1.MetricStatistic.SUM, "Provisioned", this.dimensionsMap, undefined, DynamoDbNamespace, undefined, this.region, this.account);
    }
    metricConsumedReadCapacityUnits() {
        return this.metricFactory.createMetricMath("consumed_rcu_sum/PERIOD(consumed_rcu_sum)", {
            consumed_rcu_sum: this.table.metricConsumedReadCapacityUnits({
                statistic: common_1.MetricStatistic.SUM,
                dimensionsMap: this.dimensionsMap,
                region: this.region,
                account: this.account,
            }),
        }, "Consumed");
    }
    metricConsumedWriteCapacityUnits() {
        return this.metricFactory.createMetricMath("consumed_wcu_sum/PERIOD(consumed_wcu_sum)", {
            consumed_wcu_sum: this.table.metricConsumedWriteCapacityUnits({
                statistic: common_1.MetricStatistic.SUM,
                dimensionsMap: this.dimensionsMap,
                region: this.region,
                account: this.account,
            }),
        }, "Consumed");
    }
    metricIndexConsumedWriteUnitsMetric() {
        return this.metricFactory.createMetric("OnlineIndexConsumedWriteCapacity", common_1.MetricStatistic.SUM, "Consumed by index", this.dimensionsMap, undefined, DynamoDbNamespace, undefined, this.region, this.account);
    }
    metricThrottledReadRequestCount() {
        const readThrottles = this.metricFactory.createMetric("ReadThrottleEvents", common_1.MetricStatistic.SUM, undefined, this.dimensionsMap, undefined, DynamoDbNamespace, undefined, this.region, this.account);
        return this.metricFactory.createMetricMath("FILL(readThrottles,0)", { readThrottles }, "Read");
    }
    metricThrottledWriteRequestCount() {
        const writeThrottles = this.metricFactory.createMetric("WriteThrottleEvents", common_1.MetricStatistic.SUM, undefined, this.dimensionsMap, undefined, DynamoDbNamespace, undefined, this.region, this.account);
        return this.metricFactory.createMetricMath("FILL(writeThrottles,0)", { writeThrottles }, "Write");
    }
    metricThrottledIndexRequestCount() {
        const indexThrottles = this.metricFactory.createMetric("OnlineIndexThrottleEvents", common_1.MetricStatistic.SUM, undefined, this.dimensionsMap, undefined, DynamoDbNamespace, undefined, this.region, this.account);
        return this.metricFactory.createMetricMath("FILL(indexThrottles,0)", { indexThrottles }, "Index");
    }
}
exports.DynamoTableGlobalSecondaryIndexMetricFactory = DynamoTableGlobalSecondaryIndexMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
DynamoTableGlobalSecondaryIndexMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.DynamoTableGlobalSecondaryIndexMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,