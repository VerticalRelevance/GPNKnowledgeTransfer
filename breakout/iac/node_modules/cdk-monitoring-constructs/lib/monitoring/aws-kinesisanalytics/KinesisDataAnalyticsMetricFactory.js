"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisDataAnalyticsMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
/**
 * @see https://docs.aws.amazon.com/kinesisanalytics/latest/java/metrics-dimensions.html
 */
class KinesisDataAnalyticsMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.dimensionsMap = {
            Application: props.application,
        };
    }
    metricKPUsCount() {
        return this.metric({
            name: "KPUs",
            description: "Kinesis Processing Units",
        });
    }
    metricDowntimeMs() {
        return this.metric({
            name: "downtime",
            description: "Downtime",
        });
    }
    metricUptimeMs() {
        return this.metric({
            name: "uptime",
            description: "Uptime",
        });
    }
    metricFullRestartsCount() {
        return this.metric({
            name: "fullRestarts",
            description: "Restarts",
        });
    }
    metricNumberOfFailedCheckpointsCount() {
        return this.metric({
            name: "numberOfFailedCheckpoints",
            description: "Failed Checkpoints",
            metricStatistic: common_1.MetricStatistic.SUM,
        });
    }
    metricLastCheckpointDurationMs() {
        return this.metric({
            name: "lastCheckpointDuration",
            description: "Last Checkpoint Duration",
        });
    }
    metricLastCheckpointSizeBytes() {
        return this.metric({
            name: "lastCheckpointSize",
            description: "Last Checkpoint Size",
            metricStatistic: common_1.MetricStatistic.SUM,
        });
    }
    metricCpuUtilizationPercent() {
        return this.metric({
            name: "cpuUtilization",
            description: "CPU Utilization",
        });
    }
    metricHeapMemoryUtilizationPercent() {
        return this.metric({
            name: "heapMemoryUtilization",
            description: "Heap Memory Utilization",
        });
    }
    metricOldGenerationGCTimeMs() {
        return this.metric({
            name: "oldGenerationGCTime",
            description: "GC Time",
        });
    }
    metricOldGenerationGCCount() {
        return this.metric({
            name: "oldGenerationGCCount",
            metricStatistic: common_1.MetricStatistic.N,
            description: "GC Count",
        });
    }
    metric(metricsSpec) {
        return this.metricFactory.createMetric(metricsSpec.name, metricsSpec.metricStatistic ?? common_1.MetricStatistic.AVERAGE, metricsSpec.description, this.dimensionsMap, undefined, "AWS/KinesisAnalytics", undefined, this.region, this.account);
    }
}
exports.KinesisDataAnalyticsMetricFactory = KinesisDataAnalyticsMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
KinesisDataAnalyticsMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.KinesisDataAnalyticsMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2luZXNpc0RhdGFBbmFseXRpY3NNZXRyaWNGYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiS2luZXNpc0RhdGFBbmFseXRpY3NNZXRyaWNGYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEseUNBS3NCO0FBZ0J0Qjs7R0FFRztBQUNILE1BQWEsaUNBQWtDLFNBQVEsMEJBQXlEO0lBRzlHLFlBQ0UsYUFBNEIsRUFDNUIsS0FBNkM7UUFFN0MsS0FBSyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsYUFBYSxHQUFHO1lBQ25CLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVztTQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVELGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDakIsSUFBSSxFQUFFLE1BQU07WUFDWixXQUFXLEVBQUUsMEJBQTBCO1NBQ3hDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDakIsSUFBSSxFQUFFLFVBQVU7WUFDaEIsV0FBVyxFQUFFLFVBQVU7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGNBQWM7UUFDWixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDakIsSUFBSSxFQUFFLFFBQVE7WUFDZCxXQUFXLEVBQUUsUUFBUTtTQUN0QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsdUJBQXVCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNqQixJQUFJLEVBQUUsY0FBYztZQUNwQixXQUFXLEVBQUUsVUFBVTtTQUN4QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsb0NBQW9DO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNqQixJQUFJLEVBQUUsMkJBQTJCO1lBQ2pDLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsZUFBZSxFQUFFLHdCQUFlLENBQUMsR0FBRztTQUNyQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsOEJBQThCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNqQixJQUFJLEVBQUUsd0JBQXdCO1lBQzlCLFdBQVcsRUFBRSwwQkFBMEI7U0FDeEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELDZCQUE2QjtRQUMzQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDakIsSUFBSSxFQUFFLG9CQUFvQjtZQUMxQixXQUFXLEVBQUUsc0JBQXNCO1lBQ25DLGVBQWUsRUFBRSx3QkFBZSxDQUFDLEdBQUc7U0FDckMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELDJCQUEyQjtRQUN6QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDakIsSUFBSSxFQUFFLGdCQUFnQjtZQUN0QixXQUFXLEVBQUUsaUJBQWlCO1NBQy9CLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxrQ0FBa0M7UUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ2pCLElBQUksRUFBRSx1QkFBdUI7WUFDN0IsV0FBVyxFQUFFLHlCQUF5QjtTQUN2QyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsMkJBQTJCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNqQixJQUFJLEVBQUUscUJBQXFCO1lBQzNCLFdBQVcsRUFBRSxTQUFTO1NBQ3ZCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCwwQkFBMEI7UUFDeEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ2pCLElBQUksRUFBRSxzQkFBc0I7WUFDNUIsZUFBZSxFQUFFLHdCQUFlLENBQUMsQ0FBQztZQUNsQyxXQUFXLEVBQUUsVUFBVTtTQUN4QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sTUFBTSxDQUFDLFdBQXdCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQ3BDLFdBQVcsQ0FBQyxJQUFJLEVBQ2hCLFdBQVcsQ0FBQyxlQUFlLElBQUksd0JBQWUsQ0FBQyxPQUFPLEVBQ3RELFdBQVcsQ0FBQyxXQUFXLEVBQ3ZCLElBQUksQ0FBQyxhQUFhLEVBQ2xCLFNBQVMsRUFDVCxzQkFBc0IsRUFDdEIsU0FBUyxFQUNULElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FDYixDQUFDO0lBQ0osQ0FBQzs7QUExR0gsOEVBMkdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGltZW5zaW9uc01hcCB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2xvdWR3YXRjaFwiO1xuXG5pbXBvcnQge1xuICBCYXNlTWV0cmljRmFjdG9yeSxcbiAgQmFzZU1ldHJpY0ZhY3RvcnlQcm9wcyxcbiAgTWV0cmljRmFjdG9yeSxcbiAgTWV0cmljU3RhdGlzdGljLFxufSBmcm9tIFwiLi4vLi4vY29tbW9uXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2luZXNpc0RhdGFBbmFseXRpY3NNZXRyaWNGYWN0b3J5UHJvcHNcbiAgZXh0ZW5kcyBCYXNlTWV0cmljRmFjdG9yeVByb3BzIHtcbiAgcmVhZG9ubHkgYXBwbGljYXRpb246IHN0cmluZztcbn1cblxuLyoqXG4gKiBVc2VkIGludGVybmFsbHkgYnkgdGhpcyBjbGFzcyB0byBlYXNlIGdlbmVyYXRpbmcgbWV0cmljc1xuICovXG5pbnRlcmZhY2UgTWV0cmljc1NwZWMge1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHJlYWRvbmx5IG1ldHJpY1N0YXRpc3RpYz86IE1ldHJpY1N0YXRpc3RpYztcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9raW5lc2lzYW5hbHl0aWNzL2xhdGVzdC9qYXZhL21ldHJpY3MtZGltZW5zaW9ucy5odG1sXG4gKi9cbmV4cG9ydCBjbGFzcyBLaW5lc2lzRGF0YUFuYWx5dGljc01ldHJpY0ZhY3RvcnkgZXh0ZW5kcyBCYXNlTWV0cmljRmFjdG9yeTxLaW5lc2lzRGF0YUFuYWx5dGljc01ldHJpY0ZhY3RvcnlQcm9wcz4ge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGltZW5zaW9uc01hcDogRGltZW5zaW9uc01hcDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBtZXRyaWNGYWN0b3J5OiBNZXRyaWNGYWN0b3J5LFxuICAgIHByb3BzOiBLaW5lc2lzRGF0YUFuYWx5dGljc01ldHJpY0ZhY3RvcnlQcm9wcyxcbiAgKSB7XG4gICAgc3VwZXIobWV0cmljRmFjdG9yeSwgcHJvcHMpO1xuXG4gICAgdGhpcy5kaW1lbnNpb25zTWFwID0ge1xuICAgICAgQXBwbGljYXRpb246IHByb3BzLmFwcGxpY2F0aW9uLFxuICAgIH07XG4gIH1cblxuICBtZXRyaWNLUFVzQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljKHtcbiAgICAgIG5hbWU6IFwiS1BVc1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiS2luZXNpcyBQcm9jZXNzaW5nIFVuaXRzXCIsXG4gICAgfSk7XG4gIH1cblxuICBtZXRyaWNEb3dudGltZU1zKCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYyh7XG4gICAgICBuYW1lOiBcImRvd250aW1lXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJEb3dudGltZVwiLFxuICAgIH0pO1xuICB9XG5cbiAgbWV0cmljVXB0aW1lTXMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0cmljKHtcbiAgICAgIG5hbWU6IFwidXB0aW1lXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJVcHRpbWVcIixcbiAgICB9KTtcbiAgfVxuXG4gIG1ldHJpY0Z1bGxSZXN0YXJ0c0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYyh7XG4gICAgICBuYW1lOiBcImZ1bGxSZXN0YXJ0c1wiLFxuICAgICAgZGVzY3JpcHRpb246IFwiUmVzdGFydHNcIixcbiAgICB9KTtcbiAgfVxuXG4gIG1ldHJpY051bWJlck9mRmFpbGVkQ2hlY2twb2ludHNDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoe1xuICAgICAgbmFtZTogXCJudW1iZXJPZkZhaWxlZENoZWNrcG9pbnRzXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJGYWlsZWQgQ2hlY2twb2ludHNcIixcbiAgICAgIG1ldHJpY1N0YXRpc3RpYzogTWV0cmljU3RhdGlzdGljLlNVTSxcbiAgICB9KTtcbiAgfVxuXG4gIG1ldHJpY0xhc3RDaGVja3BvaW50RHVyYXRpb25NcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoe1xuICAgICAgbmFtZTogXCJsYXN0Q2hlY2twb2ludER1cmF0aW9uXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJMYXN0IENoZWNrcG9pbnQgRHVyYXRpb25cIixcbiAgICB9KTtcbiAgfVxuXG4gIG1ldHJpY0xhc3RDaGVja3BvaW50U2l6ZUJ5dGVzKCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYyh7XG4gICAgICBuYW1lOiBcImxhc3RDaGVja3BvaW50U2l6ZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiTGFzdCBDaGVja3BvaW50IFNpemVcIixcbiAgICAgIG1ldHJpY1N0YXRpc3RpYzogTWV0cmljU3RhdGlzdGljLlNVTSxcbiAgICB9KTtcbiAgfVxuXG4gIG1ldHJpY0NwdVV0aWxpemF0aW9uUGVyY2VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoe1xuICAgICAgbmFtZTogXCJjcHVVdGlsaXphdGlvblwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQ1BVIFV0aWxpemF0aW9uXCIsXG4gICAgfSk7XG4gIH1cblxuICBtZXRyaWNIZWFwTWVtb3J5VXRpbGl6YXRpb25QZXJjZW50KCkge1xuICAgIHJldHVybiB0aGlzLm1ldHJpYyh7XG4gICAgICBuYW1lOiBcImhlYXBNZW1vcnlVdGlsaXphdGlvblwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiSGVhcCBNZW1vcnkgVXRpbGl6YXRpb25cIixcbiAgICB9KTtcbiAgfVxuXG4gIG1ldHJpY09sZEdlbmVyYXRpb25HQ1RpbWVNcygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoe1xuICAgICAgbmFtZTogXCJvbGRHZW5lcmF0aW9uR0NUaW1lXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJHQyBUaW1lXCIsXG4gICAgfSk7XG4gIH1cblxuICBtZXRyaWNPbGRHZW5lcmF0aW9uR0NDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWMoe1xuICAgICAgbmFtZTogXCJvbGRHZW5lcmF0aW9uR0NDb3VudFwiLFxuICAgICAgbWV0cmljU3RhdGlzdGljOiBNZXRyaWNTdGF0aXN0aWMuTixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkdDIENvdW50XCIsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIG1ldHJpYyhtZXRyaWNzU3BlYzogTWV0cmljc1NwZWMpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRyaWNGYWN0b3J5LmNyZWF0ZU1ldHJpYyhcbiAgICAgIG1ldHJpY3NTcGVjLm5hbWUsXG4gICAgICBtZXRyaWNzU3BlYy5tZXRyaWNTdGF0aXN0aWMgPz8gTWV0cmljU3RhdGlzdGljLkFWRVJBR0UsXG4gICAgICBtZXRyaWNzU3BlYy5kZXNjcmlwdGlvbixcbiAgICAgIHRoaXMuZGltZW5zaW9uc01hcCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIFwiQVdTL0tpbmVzaXNBbmFseXRpY3NcIixcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHRoaXMucmVnaW9uLFxuICAgICAgdGhpcy5hY2NvdW50LFxuICAgICk7XG4gIH1cbn1cbiJdfQ==