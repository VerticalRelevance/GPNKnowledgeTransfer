"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationLoadBalancerMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
/**
 * Metric factory to create metrics for application load-balanced service.
 */
class ApplicationLoadBalancerMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.applicationLoadBalancer = props.applicationLoadBalancer;
        this.applicationTargetGroup = props.applicationTargetGroup;
        this.invertStatisticsOfTaskCountEnabled =
            props.invertStatisticsOfTaskCountEnabled ?? false;
    }
    metricHealthyTaskCount() {
        return this.metricFactory.adaptMetric(this.applicationTargetGroup.metrics.healthyHostCount({
            label: "Healthy Tasks",
            color: common_1.HealthyMetricColor,
            statistic: this.invertStatisticsOfTaskCountEnabled
                ? common_1.MetricStatistic.MAX
                : common_1.MetricStatistic.MIN,
            region: this.region,
            account: this.account,
        }));
    }
    metricUnhealthyTaskCount() {
        return this.metricFactory.adaptMetric(this.applicationTargetGroup.metrics.unhealthyHostCount({
            label: "Unhealthy Tasks",
            color: common_1.UnhealthyMetricColor,
            statistic: this.invertStatisticsOfTaskCountEnabled
                ? common_1.MetricStatistic.MIN
                : common_1.MetricStatistic.MAX,
            region: this.region,
            account: this.account,
        }));
    }
    metricHealthyTaskInPercent() {
        return this.metricFactory.createMetricMath("(healthyTaskCount / (healthyTaskCount + unhealthyTaskCount)) * 100", {
            healthyTaskCount: this.metricHealthyTaskCount(),
            unhealthyTaskCount: this.metricUnhealthyTaskCount(),
        }, "Healthy Task Percent (avg: ${AVG})");
    }
    metricActiveConnectionCount() {
        return this.metricFactory.adaptMetric(this.applicationLoadBalancer.metrics.activeConnectionCount({
            label: "Active",
            region: this.region,
            account: this.account,
        }));
    }
    metricNewConnectionCount() {
        return this.metricFactory.adaptMetric(this.applicationLoadBalancer.metrics.newConnectionCount({
            label: "New",
            region: this.region,
            account: this.account,
        }));
    }
    metricProcessedBytesMin() {
        return this.metricFactory.adaptMetric(this.applicationLoadBalancer.metrics.processedBytes({
            statistic: common_1.MetricStatistic.MIN,
            label: "Processed Bytes (min)",
            region: this.region,
            account: this.account,
        }));
    }
    metricUnhealthyRoutingCount() {
        const unhealthyRoutingRequestCount = this.metricFactory.adaptMetric(this.applicationTargetGroup.metrics.custom("UnhealthyRoutingRequestCount", {
            statistic: common_1.MetricStatistic.SUM,
            region: this.region,
            account: this.account,
        }));
        return this.metricFactory.createMetricMath("FILL(unhealthyRoutingRequestCount, 0)", { unhealthyRoutingRequestCount }, "Unhealthy routing (fail open)");
    }
}
exports.ApplicationLoadBalancerMetricFactory = ApplicationLoadBalancerMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
ApplicationLoadBalancerMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.ApplicationLoadBalancerMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,