"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkLoadBalancerMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
/**
 * Metric factory to create metrics for network load-balanced service.
 */
class NetworkLoadBalancerMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.networkLoadBalancer = props.networkLoadBalancer;
        this.networkTargetGroup = props.networkTargetGroup;
        this.invertStatisticsOfTaskCountEnabled =
            props.invertStatisticsOfTaskCountEnabled ?? false;
    }
    metricHealthyTaskCount() {
        return this.metricFactory.adaptMetric(this.networkTargetGroup.metrics.healthyHostCount({
            label: "Healthy Tasks",
            color: common_1.HealthyMetricColor,
            statistic: this.invertStatisticsOfTaskCountEnabled
                ? common_1.MetricStatistic.MAX
                : common_1.MetricStatistic.MIN,
            region: this.region,
            account: this.account,
        }));
    }
    metricUnhealthyTaskCount() {
        return this.metricFactory.adaptMetric(this.networkTargetGroup.metrics.unHealthyHostCount({
            label: "Unhealthy Tasks",
            color: common_1.UnhealthyMetricColor,
            statistic: this.invertStatisticsOfTaskCountEnabled
                ? common_1.MetricStatistic.MIN
                : common_1.MetricStatistic.MAX,
            region: this.region,
            account: this.account,
        }));
    }
    metricHealthyTaskInPercent() {
        return this.metricFactory.createMetricMath("(healthyTaskCount / (healthyTaskCount + unhealthyTaskCount)) * 100", {
            healthyTaskCount: this.metricHealthyTaskCount(),
            unhealthyTaskCount: this.metricUnhealthyTaskCount(),
        }, "Healthy Task Percent (avg: ${AVG})");
    }
    metricActiveConnectionCount() {
        return this.metricFactory.adaptMetric(this.networkLoadBalancer.metrics.activeFlowCount({
            label: "Active",
            region: this.region,
            account: this.account,
        }));
    }
    metricNewConnectionCount() {
        return this.metricFactory.adaptMetric(this.networkLoadBalancer.metrics.newFlowCount({
            label: "New",
            region: this.region,
            account: this.account,
        }));
    }
    metricProcessedBytesMin() {
        return this.metricFactory.adaptMetric(this.networkLoadBalancer.metrics.processedBytes({
            statistic: common_1.MetricStatistic.MIN,
            label: "Processed Bytes (min)",
            region: this.region,
            account: this.account,
        }));
    }
    metricUnhealthyRoutingCount() {
        const unhealthyRoutingFlowCount = this.metricFactory.adaptMetric(this.networkLoadBalancer.metrics.custom("UnhealthyRoutingFlowCount", {
            statistic: common_1.MetricStatistic.SUM,
            region: this.region,
            account: this.account,
        }));
        return this.metricFactory.createMetricMath("FILL(unhealthyRoutingFlowCount, 0)", { unhealthyRoutingFlowCount }, "Unhealthy routing (fail open)");
    }
}
exports.NetworkLoadBalancerMetricFactory = NetworkLoadBalancerMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
NetworkLoadBalancerMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.NetworkLoadBalancerMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,