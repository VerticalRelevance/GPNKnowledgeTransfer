"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2ServiceMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const BaseServiceMetricFactory_1 = require("./BaseServiceMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
const aws_loadbalancing_1 = require("../aws-loadbalancing");
class Ec2ServiceMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        this.hasLoadBalancer =
            props.loadBalancer !== undefined && props.targetGroup !== undefined;
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            namedConstruct: props.ec2Service,
        });
        this.title = namingStrategy.resolveHumanReadableName();
        this.metricFactory = scope.createMetricFactory();
        this.baseServiceMetricFactory = new BaseServiceMetricFactory_1.BaseServiceMetricFactory(this.metricFactory, { service: props.ec2Service });
        if (this.hasLoadBalancer) {
            this.loadBalancerMetricFactory = aws_loadbalancing_1.createLoadBalancerMetricFactory(this.metricFactory, props.loadBalancer, props.targetGroup, props.invertLoadBalancerTaskCountMetricsStatistics);
            this.healthyTaskCountMetric =
                this.loadBalancerMetricFactory.metricHealthyTaskCount();
            this.unhealthyTaskCountMetric =
                this.loadBalancerMetricFactory.metricUnhealthyTaskCount();
            this.healthyTaskPercentMetric =
                this.loadBalancerMetricFactory.metricHealthyTaskInPercent();
            this.activeTcpFlowCountMetric =
                this.loadBalancerMetricFactory.metricActiveConnectionCount();
            this.newTcpFlowCountMetric =
                this.loadBalancerMetricFactory.metricNewConnectionCount();
            this.unhealthyRoutingFlowCountMetric =
                this.loadBalancerMetricFactory.metricUnhealthyRoutingCount();
            this.processedBytesMetric =
                this.loadBalancerMetricFactory.metricProcessedBytesMin();
        }
        this.cpuUtilisationMetric =
            this.baseServiceMetricFactory.metricClusterCpuUtilisationInPercent();
        this.memoryUtilisationMetric =
            this.baseServiceMetricFactory.metricClusterMemoryUtilisationInPercent();
        this.runningTaskCountMetric =
            this.baseServiceMetricFactory.metricRunningTaskCount();
        this.ephemeralStorageUsageMetric =
            this.baseServiceMetricFactory.metricEphemeralStorageUsageInPercent();
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.taskHealthAlarmFactory = new common_1.TaskHealthAlarmFactory(alarmFactory);
        this.throughputAlarmFactory = new common_1.ThroughputAlarmFactory(alarmFactory);
        this.taskHealthAnnotations = [];
        this.usageAlarmFactory = new common_1.UsageAlarmFactory(alarmFactory);
        this.cpuUsageAnnotations = [];
        this.memoryUsageAnnotations = [];
        this.processedBytesAnnotations = [];
        if (props.minAutoScalingTaskCount) {
            // TODO: use annotation strategy to create neutral annotation
            this.taskHealthAnnotations.push({
                value: props.minAutoScalingTaskCount,
                label: "AutoScaling: Min",
                color: common_1.NeutralColor,
            });
        }
        if (props.maxAutoScalingTaskCount) {
            // TODO: use annotation strategy to create neutral annotation
            this.taskHealthAnnotations.push({
                value: props.maxAutoScalingTaskCount,
                label: "AutoScaling: Max",
                color: common_1.NeutralColor,
            });
        }
        if (this.hasLoadBalancer) {
            for (const disambiguator in props.addHealthyTaskCountAlarm) {
                const alarmProps = props.addHealthyTaskCountAlarm[disambiguator];
                const createdAlarm = this.taskHealthAlarmFactory.addHealthyTaskCountAlarm(
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this.healthyTaskCountMetric, alarmProps, disambiguator);
                this.taskHealthAnnotations.push(createdAlarm.annotation);
                this.addAlarm(createdAlarm);
            }
            for (const disambiguator in props.addUnhealthyTaskCountAlarm) {
                const alarmProps = props.addUnhealthyTaskCountAlarm[disambiguator];
                const createdAlarm = this.taskHealthAlarmFactory.addUnhealthyTaskCountAlarm(
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this.unhealthyTaskCountMetric, alarmProps, disambiguator);
                this.taskHealthAnnotations.push(createdAlarm.annotation);
                this.addAlarm(createdAlarm);
            }
            for (const disambiguator in props.addHealthyTaskPercentAlarm) {
                const alarmProps = props.addHealthyTaskPercentAlarm[disambiguator];
                const createdAlarm = this.taskHealthAlarmFactory.addHealthyTaskPercentAlarm(
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this.healthyTaskPercentMetric, alarmProps, disambiguator);
                this.addAlarm(createdAlarm);
            }
        }
        for (const disambiguator in props.addCpuUsageAlarm) {
            const alarmProps = props.addCpuUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxCpuUsagePercentAlarm(this.cpuUtilisationMetric, alarmProps, disambiguator);
            this.cpuUsageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMemoryUsageAlarm) {
            const alarmProps = props.addMemoryUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxMemoryUsagePercentAlarm(this.memoryUtilisationMetric, alarmProps, disambiguator);
            this.memoryUsageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addRunningTaskCountAlarm) {
            const alarmProps = props.addRunningTaskCountAlarm[disambiguator];
            const createdAlarm = this.taskHealthAlarmFactory.addRunningTaskCountAlarm(this.runningTaskCountMetric, alarmProps, disambiguator);
            this.taskHealthAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addEphermalStorageUsageAlarm) {
            const alarmProps = props.addEphermalStorageUsageAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxDiskUsagePercentAlarm(this.ephemeralStorageUsageMetric, alarmProps, disambiguator);
            this.addAlarm(createdAlarm);
        }
        if (this.hasLoadBalancer) {
            for (const disambiguator in props.addMinProcessedBytesAlarm) {
                const alarmProps = props.addMinProcessedBytesAlarm[disambiguator];
                const createdAlarm = this.throughputAlarmFactory.addMinProcessedBytesAlarm(
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this.processedBytesMetric, alarmProps, disambiguator);
                this.processedBytesAnnotations.push(createdAlarm.annotation);
                this.addAlarm(createdAlarm);
            }
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createCpuWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createMemoryWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
            this.createTaskHealthWidget(common_1.ThirdWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        const baseWidget = [
            this.createTitleWidget(),
            this.createCpuWidget(this.hasLoadBalancer ? common_1.QuarterWidth : common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
            this.createMemoryWidget(this.hasLoadBalancer ? common_1.QuarterWidth : common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight),
        ];
        if (this.hasLoadBalancer) {
            return baseWidget.concat([
                this.createTcpFlowsWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
                this.createTaskHealthWidget(common_1.QuarterWidth, common_1.DefaultGraphWidgetHeight),
            ]);
        }
        else {
            return baseWidget.concat(this.createTaskHealthWidget(common_1.ThirdWidth, common_1.DefaultGraphWidgetHeight));
        }
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Ec2 Service",
            title: this.title,
        });
    }
    createCpuWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "CPU Utilization",
            left: [this.cpuUtilisationMetric],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
            leftAnnotations: this.cpuUsageAnnotations,
        });
    }
    createMemoryWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Memory Utilization",
            left: [this.memoryUtilisationMetric],
            leftYAxis: common_1.PercentageAxisFromZeroToHundred,
            leftAnnotations: this.memoryUsageAnnotations,
        });
    }
    createTaskHealthWidget(width, height) {
        const left = [this.runningTaskCountMetric];
        if (this.healthyTaskCountMetric) {
            left.push(this.healthyTaskCountMetric);
        }
        if (this.unhealthyTaskCountMetric) {
            left.push(this.unhealthyTaskCountMetric);
        }
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: this.hasLoadBalancer ? "Task Health" : "Task Count",
            left,
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.taskHealthAnnotations,
        });
    }
    createTcpFlowsWidget(width, height) {
        const left = [];
        const right = [];
        if (this.activeTcpFlowCountMetric) {
            left.push(this.activeTcpFlowCountMetric);
        }
        if (this.newTcpFlowCountMetric) {
            left.push(this.newTcpFlowCountMetric);
        }
        if (this.unhealthyRoutingFlowCountMetric) {
            left.push(this.unhealthyRoutingFlowCountMetric);
        }
        if (this.processedBytesMetric) {
            right.push(this.processedBytesMetric);
        }
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "TCP Flows",
            left,
            leftYAxis: common_1.CountAxisFromZero,
            right,
            rightYAxis: common_1.SizeAxisBytesFromZero,
        });
    }
    /**
     * @deprecated use {@see createTcpFlowsWidget} instead.
     */
    createTpcFlowsWidget(width, height) {
        return this.createTcpFlowsWidget(width, height);
    }
}
exports.Ec2ServiceMonitoring = Ec2ServiceMonitoring;
_a = JSII_RTTI_SYMBOL_1;
Ec2ServiceMonitoring[_a] = { fqn: "cdk-monitoring-constructs.Ec2ServiceMonitoring", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,