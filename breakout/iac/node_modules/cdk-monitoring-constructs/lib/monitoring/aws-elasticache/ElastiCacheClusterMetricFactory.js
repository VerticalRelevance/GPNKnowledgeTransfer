"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElastiCacheClusterMetricFactory = exports.ElastiCacheClusterType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const Namespace = "AWS/ElastiCache";
var ElastiCacheClusterType;
(function (ElastiCacheClusterType) {
    ElastiCacheClusterType[ElastiCacheClusterType["MEMCACHED"] = 0] = "MEMCACHED";
    ElastiCacheClusterType[ElastiCacheClusterType["REDIS"] = 1] = "REDIS";
})(ElastiCacheClusterType = exports.ElastiCacheClusterType || (exports.ElastiCacheClusterType = {}));
/**
 * @see https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheMetrics.html
 */
class ElastiCacheClusterMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.dimensionsMap = {};
        if (props.clusterId) {
            this.dimensionsMap.CacheClusterId = props.clusterId;
        }
    }
    metricMaxItemCount() {
        return this.metricFactory.createMetric("CurrItems", common_1.MetricStatistic.MAX, "Count", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricEvictions() {
        return this.metricFactory.createMetric("Evictions", common_1.MetricStatistic.SUM, "Evictions", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricAverageFreeableMemoryInBytes() {
        return this.metricFactory.createMetric("FreeableMemory", common_1.MetricStatistic.AVERAGE, "Freeable", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricAverageUnusedMemoryInBytes() {
        return this.metricFactory.createMetric("UnusedMemory", common_1.MetricStatistic.AVERAGE, "Unused", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricAverageCachedItemsSizeInBytes() {
        return this.metricFactory.createMetric("BytesUsedForCacheItems", common_1.MetricStatistic.AVERAGE, "Items", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricAverageSwapUsageInBytes() {
        return this.metricFactory.createMetric("SwapUsage", common_1.MetricStatistic.AVERAGE, "Swap", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricMaxCpuUtilizationInPercent() {
        return this.metricFactory.createMetric("CPUUtilization", common_1.MetricStatistic.MAX, "Cluster CPU Utilization", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    /**
     * Because Redis is single-threaded, you can use this metric to analyze the load of the Redis process itself.
     * Note that you may want to monitor both Engine CPU Utilization as well as CPU Utilization as background
     * processes can take up a significant portion of the CPU workload. This is especially important for
     * hosts with 2 vCPUs or less.
     *
     * @see https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheMetrics.Redis.html
     */
    metricMaxRedisEngineCpuUtilizationInPercent() {
        return this.metricFactory.createMetric("EngineCPUUtilization", common_1.MetricStatistic.MAX, "Cluster Engine CPU Utilization", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricAverageConnections() {
        return this.metricFactory.createMetric("CurrConnections", common_1.MetricStatistic.AVERAGE, "Current", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricNetworkBytesIn() {
        return this.metricFactory.createMetric("NetworkBytesIn", common_1.MetricStatistic.SUM, "Bytes In", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
    metricNetworkBytesOut() {
        return this.metricFactory.createMetric("NetworkBytesOut", common_1.MetricStatistic.SUM, "Bytes Out", this.dimensionsMap, undefined, Namespace, undefined, this.region, this.account);
    }
}
exports.ElastiCacheClusterMetricFactory = ElastiCacheClusterMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
ElastiCacheClusterMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.ElastiCacheClusterMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,