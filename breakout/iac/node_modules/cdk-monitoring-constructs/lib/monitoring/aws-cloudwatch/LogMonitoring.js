"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogMonitoring = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const CloudWatchLogsMetricFactory_1 = require("./CloudWatchLogsMetricFactory");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
const DefaultLimit = 10;
/**
 * Monitors a CloudWatch log group for various patterns.
 */
class LogMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope);
        this.logGroupName = props.logGroupName;
        this.logGroupUrl = scope
            .createAwsConsoleUrlFactory()
            .getCloudWatchLogGroupUrl(props.logGroupName);
        this.title = props.title;
        this.pattern = props.pattern;
        this.limit = props.limit ?? DefaultLimit;
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({
            ...props,
            fallbackConstructName: this.logGroupName,
        });
        this.alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.usageAlarmFactory = new common_1.UsageAlarmFactory(this.alarmFactory);
        this.usageAnnotations = [];
        const metricFactory = new CloudWatchLogsMetricFactory_1.CloudWatchLogsMetricFactory(scope.createMetricFactory(), props);
        this.incomingLogEventsMetric = metricFactory.metricIncomingLogEvents();
        for (const disambiguator in props.addMinIncomingLogsAlarm) {
            const alarmProps = props.addMinIncomingLogsAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMinUsageCountAlarm(this.incomingLogEventsMetric, alarmProps, disambiguator);
            this.usageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        for (const disambiguator in props.addMaxIncomingLogsAlarm) {
            const alarmProps = props.addMaxIncomingLogsAlarm[disambiguator];
            const createdAlarm = this.usageAlarmFactory.addMaxCountAlarm(this.incomingLogEventsMetric, alarmProps, disambiguator);
            this.usageAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return [
            this.createTitleWidget(),
            this.createIncomingLogsWidget(common_1.FullWidth, common_1.DefaultSummaryWidgetHeight),
        ];
    }
    widgets() {
        if (this.pattern) {
            const height = this.resolveRecommendedHeight(this.limit);
            return [
                this.createTitleWidget(),
                // Log Query Results
                new aws_cloudwatch_1.LogQueryWidget({
                    logGroupNames: [this.logGroupName],
                    height,
                    width: common_1.ThreeQuartersWidth,
                    title: this.title ?? `Find ${this.pattern} (limit = ${this.limit})`,
                    /**
                     * https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html
                     */
                    queryLines: [
                        "fields @timestamp, @logStream, @message",
                        `filter @message like /${this.pattern}/`,
                        "sort @timestamp desc",
                        `limit ${this.limit}`,
                    ],
                }),
                this.createIncomingLogsWidget(common_1.QuarterWidth, height),
            ];
        }
        else {
            return [
                this.createTitleWidget(),
                this.createIncomingLogsWidget(common_1.FullWidth, common_1.DefaultGraphWidgetHeight),
            ];
        }
    }
    createTitleWidget() {
        return new dashboard_1.MonitoringHeaderWidget({
            family: "Log Group",
            title: this.logGroupName,
            goToLinkUrl: this.logGroupUrl,
        });
    }
    createIncomingLogsWidget(width, height) {
        return new aws_cloudwatch_1.GraphWidget({
            width,
            height,
            title: "Incoming logs",
            left: [this.incomingLogEventsMetric],
            leftYAxis: common_1.CountAxisFromZero,
            leftAnnotations: this.usageAnnotations,
        });
    }
    resolveRecommendedHeight(numRows) {
        const heightPerLine = 1;
        const recommendedHeight = heightPerLine * numRows;
        return Math.max(recommendedHeight, common_1.DefaultLogWidgetHeight);
    }
}
exports.LogMonitoring = LogMonitoring;
_a = JSII_RTTI_SYMBOL_1;
LogMonitoring[_a] = { fqn: "cdk-monitoring-constructs.LogMonitoring", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,