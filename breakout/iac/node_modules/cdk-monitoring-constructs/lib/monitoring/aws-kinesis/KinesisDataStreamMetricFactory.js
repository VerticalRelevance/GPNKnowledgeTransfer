"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisDataStreamMetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const DataStreamNamespace = "AWS/Kinesis";
/**
 * @see https://docs.aws.amazon.com/streams/latest/dev/monitoring-with-cloudwatch.html
 */
class KinesisDataStreamMetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.dimensionsMap = {
            StreamName: props.streamName,
        };
    }
    metricGetRecordsSumBytes() {
        return this.metricFactory.createMetric("GetRecords.Bytes", common_1.MetricStatistic.SUM, "GetRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricGetRecordsIteratorAgeMaxMs() {
        return this.metricFactory.createMetric("GetRecords.IteratorAgeMilliseconds", common_1.MetricStatistic.MAX, "Iterator Age", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricGetRecordsLatencyAverageMs() {
        return this.metricFactory.createMetric("GetRecords.Latency", common_1.MetricStatistic.AVERAGE, "GetRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricGetRecordsSumCount() {
        return this.metricFactory.createMetric("GetRecords.Records", common_1.MetricStatistic.SUM, "GetRecords.Records", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricGetRecordsSuccessCount() {
        return this.metricFactory.createMetric("GetRecords.Success", common_1.MetricStatistic.SUM, "GetRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricIncomingDataSumBytes() {
        return this.metricFactory.createMetric("IncomingBytes", common_1.MetricStatistic.SUM, "Incoming Bytes", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricIncomingDataSumCount() {
        return this.metricFactory.createMetric("IncomingRecords", common_1.MetricStatistic.SUM, "Incoming Records", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordSumBytes() {
        return this.metricFactory.createMetric("PutRecord.Bytes", common_1.MetricStatistic.SUM, "PutRecord", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordLatencyAverageMs() {
        return this.metricFactory.createMetric("PutRecord.Latency", common_1.MetricStatistic.AVERAGE, "PutRecord", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordSuccessCount() {
        return this.metricFactory.createMetric("PutRecord.Success", common_1.MetricStatistic.SUM, "PutRecord", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordsSumBytes() {
        return this.metricFactory.createMetric("PutRecords.Bytes", common_1.MetricStatistic.SUM, "PutRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordsLatencyAverageMs() {
        return this.metricFactory.createMetric("PutRecords.Latency", common_1.MetricStatistic.AVERAGE, "PutRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordsSuccessCount() {
        return this.metricFactory.createMetric("PutRecords.Success", common_1.MetricStatistic.SUM, "PutRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordsSuccessfulRecordsCount() {
        return this.metricFactory.createMetric("PutRecords.SuccessfulRecords", common_1.MetricStatistic.SUM, "PutRecords.SuccessfulRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordsTotalRecordsCount() {
        return this.metricFactory.createMetric("PutRecords.TotalRecords", common_1.MetricStatistic.SUM, "PutRecords.TotalRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordsFailedRecordsCount() {
        return this.metricFactory.createMetric("PutRecords.FailedRecords", common_1.MetricStatistic.SUM, "PutRecords.FailedRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricPutRecordsThrottledRecordsCount() {
        return this.metricFactory.createMetric("PutRecords.ThrottledRecords", common_1.MetricStatistic.SUM, "PutRecords.ThrottledRecords", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    /**
     * @deprecated please use `metricReadProvisionedThroughputExceeded` instead
     */
    metricReadProvisionedThroughputExceededPercent() {
        return this.metricReadProvisionedThroughputExceeded();
    }
    /**
     * @deprecated please use `metricWriteProvisionedThroughputExceeded` instead
     */
    metricWriteProvisionedThroughputExceededPercent() {
        return this.metricWriteProvisionedThroughputExceeded();
    }
    metricReadProvisionedThroughputExceeded() {
        return this.metricFactory.createMetric("ReadProvisionedThroughputExceeded", common_1.MetricStatistic.AVERAGE, "Read", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
    metricWriteProvisionedThroughputExceeded() {
        return this.metricFactory.createMetric("WriteProvisionedThroughputExceeded", common_1.MetricStatistic.AVERAGE, "Write", this.dimensionsMap, undefined, DataStreamNamespace, undefined, this.region, this.account);
    }
}
exports.KinesisDataStreamMetricFactory = KinesisDataStreamMetricFactory;
_a = JSII_RTTI_SYMBOL_1;
KinesisDataStreamMetricFactory[_a] = { fqn: "cdk-monitoring-constructs.KinesisDataStreamMetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,