"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EC2MetricFactory = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("../../common");
const EC2Namespace = "AWS/EC2";
/**
 * Creates a single metric for the whole ASG.
 */
class AutoScalingGroupStrategy {
    constructor(autoScalingGroup) {
        this.autoScalingGroup = autoScalingGroup;
    }
    createMetrics(metricFactory, metricName, statistic, region, account) {
        return [
            metricFactory.createMetric(metricName, statistic, undefined, resolveDimensions(this.autoScalingGroup, undefined), undefined, EC2Namespace, undefined, region, account),
        ];
    }
}
/**
 * Creates multiple metrics (one for each instance) with an optional ASG filter.
 */
class SelectedInstancesStrategy {
    constructor(instanceIds, autoScalingGroup) {
        this.instanceIds = instanceIds;
        this.autoScalingGroup = autoScalingGroup;
    }
    createMetrics(metricFactory, metricName, statistic, region, account) {
        return this.instanceIds.map((instanceId) => {
            return metricFactory.createMetric(metricName, statistic, `${metricName} (${instanceId})`, resolveDimensions(this.autoScalingGroup, instanceId), undefined, EC2Namespace, undefined, region, account);
        });
    }
}
/**
 * Creates a single metric search expression for all instances.
 */
class AllInstancesStrategy {
    createMetrics(metricFactory, metricName, statistic, region, account) {
        return [
            metricFactory.createMetricSearch(`MetricName="${metricName}"`, { InstanceId: undefined }, statistic, EC2Namespace, undefined, undefined, region, account),
        ];
    }
}
function resolveDimensions(autoScalingGroup, instanceId) {
    const dimensions = {};
    if (autoScalingGroup) {
        dimensions.AutoScalingGroupName = autoScalingGroup.autoScalingGroupName;
    }
    if (instanceId) {
        dimensions.InstanceId = instanceId;
    }
    return dimensions;
}
function resolveStrategy(props) {
    if (props.instanceIds) {
        // instance filter + optional ASG
        return new SelectedInstancesStrategy(props.instanceIds, props.autoScalingGroup);
    }
    else if (props.autoScalingGroup) {
        // ASG only
        return new AutoScalingGroupStrategy(props.autoScalingGroup);
    }
    else {
        // all instances
        return new AllInstancesStrategy();
    }
}
class EC2MetricFactory extends common_1.BaseMetricFactory {
    constructor(metricFactory, props) {
        super(metricFactory, props);
        this.strategy = resolveStrategy(props);
    }
    /**
     * The percentage of allocated EC2 compute units that are currently in use on the instance.
     * This metric identifies the processing power required to run an application on a selected instance.
     * Depending on the instance type, tools in your operating system can show a lower percentage than
     * CloudWatch when the instance is not allocated a full processor core.
     */
    metricAverageCpuUtilisationPercent() {
        return this.metric("CPUUtilization", common_1.MetricStatistic.AVERAGE);
    }
    /**
     * Bytes read from all instance store volumes available to the instance.
     * This metric is used to determine the volume of the data the application reads from the hard disk of the instance.
     * This can be used to determine the speed of the application.
     */
    metricAverageDiskReadBytes() {
        return this.createDiskMetrics("ReadBytes", common_1.MetricStatistic.AVERAGE);
    }
    /**
     * Bytes written to all instance store volumes available to the instance.
     * This metric is used to determine the volume of the data the application writes onto the hard disk of the instance.
     * This can be used to determine the speed of the application.
     */
    metricAverageDiskWriteBytes() {
        return this.createDiskMetrics("WriteBytes", common_1.MetricStatistic.AVERAGE);
    }
    /**
     * Completed read operations from all instance store volumes available to the instance in a specified period of time.
     */
    metricAverageDiskReadOps() {
        return this.createDiskMetrics("ReadOps", common_1.MetricStatistic.AVERAGE);
    }
    /**
     * Completed write operations to all instance store volumes available to the instance in a specified period of time.
     */
    metricAverageDiskWriteOps() {
        return this.createDiskMetrics("WriteOps", common_1.MetricStatistic.AVERAGE);
    }
    /**
     * The number of bytes received on all network interfaces by the instance.
     * This metric identifies the volume of incoming network traffic to a single instance.
     */
    metricAverageNetworkInRateBytes() {
        return this.metric("NetworkIn", common_1.MetricStatistic.AVERAGE);
    }
    /**
     * The number of bytes sent out on all network interfaces by the instance.
     * This metric identifies the volume of outgoing network traffic from a single instance.
     */
    metricAverageNetworkOutRateBytes() {
        return this.metric("NetworkOut", common_1.MetricStatistic.AVERAGE);
    }
    createDiskMetrics(metricName, statistic) {
        const classicMetrics = this.strategy.createMetrics(this.metricFactory, `Disk${metricName}`, statistic);
        const ebsMetrics = this.strategy.createMetrics(this.metricFactory, `EBS${metricName}`, statistic);
        return classicMetrics.map((classic, i) => {
            const ebs = ebsMetrics[i];
            const usingMetrics = {};
            const classicId = `${metricName.toLowerCase()}_classic_${i}`;
            const ebsId = `${metricName.toLowerCase()}_ebs_${i}`;
            usingMetrics[classicId] = classic;
            usingMetrics[ebsId] = ebs;
            return this.metricFactory.createMetricMath(`AVG(REMOVE_EMPTY([${classicId}, ${ebsId}]))`, usingMetrics, `Disk${metricName}`);
        });
    }
    metric(metricName, statistic) {
        return this.strategy.createMetrics(this.metricFactory, metricName, statistic);
    }
}
exports.EC2MetricFactory = EC2MetricFactory;
_a = JSII_RTTI_SYMBOL_1;
EC2MetricFactory[_a] = { fqn: "cdk-monitoring-constructs.EC2MetricFactory", version: "8.1.0" };
//# sourceMappingURL=data:application/json;base64,