"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomMonitoring = exports.AxisPosition = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const common_1 = require("../../common");
const dashboard_1 = require("../../dashboard");
var AxisPosition;
(function (AxisPosition) {
    AxisPosition["LEFT"] = "left";
    AxisPosition["RIGHT"] = "right";
})(AxisPosition = exports.AxisPosition || (exports.AxisPosition = {}));
/**
 * Custom monitoring is a construct allowing you to monitor your own custom metrics.
 * The entire construct consists of metric groups.
 * Each metric group represents a single graph widget with multiple metrics.
 * Each metric inside the metric group represents a single metric inside a graph.
 * The widgets will be sized automatically to waste as little space as possible.
 */
class CustomMonitoring extends common_1.Monitoring {
    constructor(scope, props) {
        super(scope, props);
        const namingStrategy = new dashboard_1.MonitoringNamingStrategy({ ...props });
        this.title = namingStrategy.resolveHumanReadableName();
        this.description = props.description;
        this.descriptionWidgetHeight = props.descriptionWidgetHeight;
        this.height = props.height;
        this.addToSummaryDashboard = props.addToSummaryDashboard ?? false;
        const alarmFactory = this.createAlarmFactory(namingStrategy.resolveAlarmFriendlyName());
        this.customAlarmFactory = new common_1.CustomAlarmFactory(alarmFactory);
        this.anomalyDetectingAlarmFactory = new common_1.AnomalyDetectingAlarmFactory(alarmFactory);
        this.metricGroups = props.metricGroups.map((metricGroup) => {
            const metricGroupWithAnnotation = {
                metricGroup,
                annotations: [],
                rightAnnotations: [],
                verticalAnnotations: [],
                titleAddons: [],
            };
            if (metricGroup.horizontalAnnotations) {
                metricGroupWithAnnotation.annotations.push(...metricGroup.horizontalAnnotations);
            }
            if (metricGroup.horizontalRightAnnotations) {
                metricGroupWithAnnotation.rightAnnotations.push(...metricGroup.horizontalRightAnnotations);
            }
            if (metricGroup.verticalAnnotations) {
                metricGroupWithAnnotation.verticalAnnotations.push(...metricGroup.verticalAnnotations);
            }
            metricGroup.metrics.forEach((metric) => {
                if (this.hasAlarm(metric) && this.hasAnomalyDetection(metric)) {
                    throw new Error("Adding both a regular alarm and an anomaly detection alarm at the same time is not supported");
                }
                if (this.hasAlarm(metric)) {
                    this.setupAlarm(metricGroupWithAnnotation, metric);
                }
                else if (this.hasAnomalyDetection(metric)) {
                    this.setupAnomalyDetectionAlarm(metricGroupWithAnnotation, metric);
                }
            });
            return metricGroupWithAnnotation;
        });
        props.useCreatedAlarms?.consume(this.createdAlarms());
    }
    summaryWidgets() {
        return this.getAllWidgets(true);
    }
    widgets() {
        return this.getAllWidgets(false);
    }
    getAllWidgets(summary) {
        const filteredMetricGroups = summary
            ? this.metricGroups.filter((group) => group.metricGroup.addToSummaryDashboard ??
                group.metricGroup.important ??
                this.addToSummaryDashboard)
            : this.metricGroups;
        if (filteredMetricGroups.length < 1) {
            // short-circuit if there are no metrics specified
            return [];
        }
        const rows = [];
        // header and description
        rows.push(new aws_cloudwatch_1.Row(new dashboard_1.MonitoringHeaderWidget({ title: this.title })));
        if (this.description && !summary) {
            rows.push(new aws_cloudwatch_1.Row(this.createDescriptionWidget(this.description, this.descriptionWidgetHeight)));
        }
        // graphs
        rows.push(new aws_cloudwatch_1.Row(...this.createCustomMetricGroupWidgets(filteredMetricGroups, summary)));
        return rows;
    }
    createDescriptionWidget(markdown, descriptionWidgetHeight) {
        return new aws_cloudwatch_1.TextWidget({
            markdown,
            width: common_1.FullWidth,
            height: descriptionWidgetHeight ?? 1,
        });
    }
    createCustomMetricGroupWidgets(annotatedGroups, summary) {
        const widgets = [];
        const metricGroupWidgetHeightDefault = summary
            ? common_1.DefaultSummaryWidgetHeight
            : common_1.DefaultGraphWidgetHeight;
        const metricGroupWidgetHeight = this.height ?? metricGroupWidgetHeightDefault;
        annotatedGroups.forEach((annotatedGroup) => {
            const metrics = annotatedGroup.metricGroup.metrics;
            const left = this.toMetrics(metrics.filter((metric) => (metric.position ?? AxisPosition.LEFT) ==
                AxisPosition.LEFT));
            const right = this.toMetrics(metrics.filter((metric) => (metric.position ?? AxisPosition.LEFT) ==
                AxisPosition.RIGHT));
            const hasOneMetricOnly = metrics.length === 1;
            const hasAnomalyDetection = metrics.filter((metric) => this.hasAnomalyDetection(metric)).length > 0;
            const useAnomalyDetectionWidget = hasOneMetricOnly && hasAnomalyDetection;
            let title = annotatedGroup.metricGroup.title;
            if (annotatedGroup.titleAddons.length > 0) {
                title = `${title} (${annotatedGroup.titleAddons.join(", ")})`;
            }
            const graphWidgetProps = {
                title,
                width: annotatedGroup.metricGroup.graphWidgetWidth ??
                    common_1.recommendedWidgetWidth(annotatedGroups.length),
                height: metricGroupWidgetHeight,
                left,
                right,
                leftAnnotations: annotatedGroup.annotations,
                rightAnnotations: annotatedGroup.rightAnnotations,
                leftYAxis: annotatedGroup.metricGroup.graphWidgetAxis,
                rightYAxis: annotatedGroup.metricGroup.graphWidgetRightAxis,
                verticalAnnotations: annotatedGroup.verticalAnnotations,
                legendPosition: annotatedGroup.metricGroup.graphWidgetLegend,
                setPeriodToTimeRange: annotatedGroup.metricGroup.graphWidgetSetPeriodToTimeRange,
            };
            const widget = useAnomalyDetectionWidget
                ? new AnomalyDetectionGraphWidget(graphWidgetProps)
                : common_1.createGraphWidget(annotatedGroup.metricGroup.graphWidgetType ?? common_1.GraphWidgetType.LINE, graphWidgetProps);
            widgets.push(widget);
        });
        return widgets;
    }
    toMetrics(metrics) {
        const metricFactory = this.createMetricFactory();
        return metrics.map((metric) => {
            if (this.hasAlarm(metric)) {
                // metric with alarm
                return metricFactory.adaptMetricPreservingPeriod(metric.metric);
            }
            else if (this.hasAnomalyDetection(metric)) {
                // metric with anomaly detection
                return metricFactory.createMetricAnomalyDetection(metric.metric, metric.anomalyDetectionStandardDeviationToRender, `Expected (stdev = ${metric.anomalyDetectionStandardDeviationToRender})`, undefined, 
                // needs to be unique in the whole widget and start with lowercase
                AnomalyDetectionMetricIdPrefix +
                    common_1.getHashForMetricExpressionId(metric.alarmFriendlyName), 
                // preserve the most specific metric period
                metric.period ?? metric.metric.period);
            }
            else if (this.isSearch(metric)) {
                // metric search
                return metricFactory.createMetricSearch(metric.searchQuery, metric.dimensionsMap, metric.statistic, metric.namespace, metric.label, metric.period, metric.region, metric.account);
            }
            else {
                // general metric
                return metricFactory.adaptMetricPreservingPeriod(metric);
            }
        });
    }
    hasAlarm(metric) {
        // type guard
        return metric.addAlarm !== undefined;
    }
    hasAnomalyDetection(metric) {
        // type guard
        return (metric
            .anomalyDetectionStandardDeviationToRender !== undefined);
    }
    isSearch(metric) {
        // type guard
        return metric.searchQuery !== undefined;
    }
    setupAlarm(metricGroup, metric) {
        if (this.isSearch(metric)) {
            throw new Error("Alarming on search queries is not supported by CloudWatch");
        }
        for (const disambiguator in metric.addAlarm) {
            const alarmProps = metric.addAlarm[disambiguator];
            const createdAlarm = this.customAlarmFactory.addCustomAlarm(metric.metric, metric.alarmFriendlyName, disambiguator, alarmProps);
            const targetAnnotations = (metric.position ?? AxisPosition.LEFT) == AxisPosition.LEFT
                ? metricGroup.annotations
                : metricGroup.rightAnnotations;
            targetAnnotations.push(createdAlarm.annotation);
            this.addAlarm(createdAlarm);
        }
    }
    setupAnomalyDetectionAlarm(metricGroup, metric) {
        if (this.isSearch(metric)) {
            throw new Error("Alarming on search queries is not supported by CloudWatch");
        }
        const alarmStDevs = new Set();
        const metricFactory = this.createMetricFactory();
        for (const disambiguator in metric.addAlarmOnAnomaly) {
            const alarmProps = metric.addAlarmOnAnomaly[disambiguator];
            if (alarmProps.alarmWhenAboveTheBand ||
                alarmProps.alarmWhenBelowTheBand) {
                const anomalyMetric = metricFactory.createMetricAnomalyDetection(
                // Because the metric was provided to us, we use metricFactory.overrideNamespace() to
                // confirm it aligns with any namespace overrides requested for this MonitoringFacade
                metricFactory.adaptMetricPreservingPeriod(metric.metric), alarmProps.standardDeviationForAlarm, `Band (stdev ${alarmProps.standardDeviationForAlarm})`, undefined, 
                // expression ID needs to be unique across the whole widget; needs to start with a lowercase letter
                AnomalyDetectionAlarmIdPrefix +
                    common_1.getHashForMetricExpressionId(metric.alarmFriendlyName + "_" + disambiguator), 
                // preserve the most-specific metric period
                metric.period ?? metric.metric.period);
                const createdAlarm = this.anomalyDetectingAlarmFactory.addAlarmWhenOutOfBand(anomalyMetric, metric.alarmFriendlyName, disambiguator, alarmProps);
                // no need to add annotation since the bands are rendered automatically
                this.addAlarm(createdAlarm);
                alarmStDevs.add(alarmProps.standardDeviationForAlarm);
            }
        }
        if (alarmStDevs.size > 0) {
            const alarmStDevsString = Array.from(alarmStDevs).sort().join(", ");
            metricGroup.titleAddons.push(`alarms with stdev ${alarmStDevsString}`);
        }
    }
}
exports.CustomMonitoring = CustomMonitoring;
_a = JSII_RTTI_SYMBOL_1;
CustomMonitoring[_a] = { fqn: "cdk-monitoring-constructs.CustomMonitoring", version: "8.1.0" };
const AnomalyDetectionAlarmIdPrefix = "alarm_";
const AnomalyDetectionMetricIdPrefix = "anomaly_";
const AnomalyBandMetricIdSuffix = "_band";
/**
 * INTERNAL - PLEASE DO NOT USE
 * This is a hacky solution to make band visible in GraphWidget (default widget only renders lines, not the band).
 * The class makes assumptions about the internal JSON structure but found no other way :(.
 * Ideally, we want to remove this hack once the anomaly detection rendering in CDK gets improved
 */
class AnomalyDetectionGraphWidget extends aws_cloudwatch_1.GraphWidget {
    constructor(props) {
        super(props);
    }
    toJson() {
        const json = super.toJson();
        if (json.length !== 1 || !json?.[0]?.properties?.metrics) {
            throw new Error("The JSON is expected to have exactly one element with properties.metrics property.");
        }
        const metrics = json[0].properties.metrics;
        if (metrics.length < 2) {
            throw new Error("The number of metrics must be at least two (metric + anomaly detection math).");
        }
        const anomalyDetectionMetricPart = metrics[0]?.value;
        if (!anomalyDetectionMetricPart ||
            anomalyDetectionMetricPart.length !== 1) {
            throw new Error("First metric must be a math expression.");
        }
        const evaluatedMetricPart = metrics[1]?.value;
        if (!evaluatedMetricPart ||
            evaluatedMetricPart.length < 1 ||
            !evaluatedMetricPart[evaluatedMetricPart.length - 1].id) {
            throw new Error("Second metric must have an ID.");
        }
        // band rendering requires ID to be set
        anomalyDetectionMetricPart[0].id =
            evaluatedMetricPart[evaluatedMetricPart.length - 1].id +
                AnomalyBandMetricIdSuffix;
        // band rendering requires the evaluated metric to be visible
        evaluatedMetricPart[evaluatedMetricPart.length - 1].visible = true;
        return json;
    }
}
//# sourceMappingURL=data:application/json;base64,