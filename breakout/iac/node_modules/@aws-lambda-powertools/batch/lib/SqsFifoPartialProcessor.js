"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqsFifoPartialProcessor = void 0;
const BatchProcessorSync_1 = require("./BatchProcessorSync");
const constants_1 = require("./constants");
const errors_1 = require("./errors");
/**
 * Process native partial responses from SQS FIFO queues
 * Stops processing records when the first record fails
 * The remaining records are reported as failed items
 */
class SqsFifoPartialProcessor extends BatchProcessorSync_1.BatchProcessorSync {
    constructor() {
        super(constants_1.EventType.SQS);
    }
    /**
     * Call instance's handler for each record.
     * When the first failed message is detected, the process is short-circuited
     * And the remaining messages are reported as failed items
     */
    processSync() {
        this.prepare();
        const processedRecords = [];
        let currentIndex = 0;
        for (const record of this.records) {
            // If we have any failed messages, it means the last message failed
            // We should then short circuit the process and fail remaining messages
            if (this.failureMessages.length != 0) {
                return this.shortCircuitProcessing(currentIndex, processedRecords);
            }
            processedRecords.push(this.processRecordSync(record));
            currentIndex++;
        }
        this.clean();
        return processedRecords;
    }
    /**
     * Starting from the first failure index, fail all remaining messages and append them to the result list
     * @param firstFailureIndex Index of first message that failed
     * @param result List of success and failure responses with remaining messages failed
     */
    shortCircuitProcessing(firstFailureIndex, processedRecords) {
        const remainingRecords = this.records.slice(firstFailureIndex);
        for (const record of remainingRecords) {
            const data = this.toBatchType(record, this.eventType);
            processedRecords.push(this.failureHandler(data, new errors_1.SqsFifoShortCircuitError()));
        }
        this.clean();
        return processedRecords;
    }
}
exports.SqsFifoPartialProcessor = SqsFifoPartialProcessor;
