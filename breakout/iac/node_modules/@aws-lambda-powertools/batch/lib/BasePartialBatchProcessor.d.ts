import type { DynamoDBRecord, KinesisStreamRecord, SQSRecord } from 'aws-lambda';
import { BasePartialProcessor } from './BasePartialProcessor';
import { EventType } from './constants';
import type { EventSourceDataClassTypes, PartialItemFailureResponse, PartialItemFailures } from './types';
/**
 * Process batch and partially report failed items
 */
declare abstract class BasePartialBatchProcessor extends BasePartialProcessor {
    COLLECTOR_MAPPING: {
        SQS: () => PartialItemFailures[];
        KinesisDataStreams: () => PartialItemFailures[];
        DynamoDBStreams: () => PartialItemFailures[];
    };
    batchResponse: PartialItemFailureResponse;
    eventType: keyof typeof EventType;
    /**
     * Initializes base batch processing class
     * @param eventType Whether this is SQS, DynamoDB stream, or Kinesis data stream event
     */
    constructor(eventType: keyof typeof EventType);
    /**
     * Report messages to be deleted in case of partial failures
     */
    clean(): void;
    /**
     * Collects identifiers of failed items for a DynamoDB stream
     * @returns list of identifiers for failed items
     */
    collectDynamoDBFailures(): PartialItemFailures[];
    /**
     * Collects identifiers of failed items for a Kinesis stream
     * @returns list of identifiers for failed items
     */
    collectKinesisFailures(): PartialItemFailures[];
    /**
     * Collects identifiers of failed items for an SQS batch
     * @returns list of identifiers for failed items
     */
    collectSqsFailures(): PartialItemFailures[];
    /**
     * Determines whether all records in a batch failed to process
     * @returns true if all records resulted in exception results
     */
    entireBatchFailed(): boolean;
    /**
     * Collects identifiers for failed batch items
     * @returns formatted messages to use in batch deletion
     */
    getMessagesToReport(): PartialItemFailures[];
    /**
     * Determines if any records failed to process
     * @returns true if any records resulted in exception
     */
    hasMessagesToReport(): boolean;
    /**
     * Remove results from previous execution
     */
    prepare(): void;
    /**
     * @returns Batch items that failed processing, if any
     */
    response(): PartialItemFailureResponse;
    toBatchType(record: EventSourceDataClassTypes, eventType: keyof typeof EventType): SQSRecord | KinesisStreamRecord | DynamoDBRecord;
}
export { BasePartialBatchProcessor };
//# sourceMappingURL=BasePartialBatchProcessor.d.ts.map