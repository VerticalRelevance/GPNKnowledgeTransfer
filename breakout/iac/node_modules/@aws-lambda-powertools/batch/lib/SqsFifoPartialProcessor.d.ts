import { BatchProcessorSync } from './BatchProcessorSync';
import type { FailureResponse, SuccessResponse } from './types';
/**
 * Process native partial responses from SQS FIFO queues
 * Stops processing records when the first record fails
 * The remaining records are reported as failed items
 */
declare class SqsFifoPartialProcessor extends BatchProcessorSync {
    constructor();
    /**
     * Call instance's handler for each record.
     * When the first failed message is detected, the process is short-circuited
     * And the remaining messages are reported as failed items
     */
    processSync(): (SuccessResponse | FailureResponse)[];
    /**
     * Starting from the first failure index, fail all remaining messages and append them to the result list
     * @param firstFailureIndex Index of first message that failed
     * @param result List of success and failure responses with remaining messages failed
     */
    shortCircuitProcessing(firstFailureIndex: number, processedRecords: (SuccessResponse | FailureResponse)[]): (SuccessResponse | FailureResponse)[];
}
export { SqsFifoPartialProcessor };
//# sourceMappingURL=SqsFifoPartialProcessor.d.ts.map