import type { BaseRecord, BatchProcessingOptions, EventSourceDataClassTypes, FailureResponse, ResultType, SuccessResponse } from './types';
/**
 * Abstract class for batch processors.
 */
declare abstract class BasePartialProcessor {
    errors: Error[];
    failureMessages: EventSourceDataClassTypes[];
    handler: CallableFunction;
    options?: BatchProcessingOptions;
    records: BaseRecord[];
    successMessages: EventSourceDataClassTypes[];
    /**
     * Initializes base processor class
     */
    constructor();
    /**
     * Clean class instance after processing
     */
    abstract clean(): void;
    /**
     * Keeps track of batch records that failed processing
     * @param record record that failed processing
     * @param exception exception that was thrown
     * @returns FailureResponse object with ["fail", exception, original record]
     */
    failureHandler(record: EventSourceDataClassTypes, exception: Error): FailureResponse;
    /**
     * Prepare class instance before processing
     */
    abstract prepare(): void;
    /**
     * Call instance's handler for each record
     * @returns List of processed records
     */
    process(): Promise<(SuccessResponse | FailureResponse)[]>;
    /**
     * Process a record with an asyncronous handler
     *
     * @param record Record to be processed
     */
    abstract processRecord(record: BaseRecord): Promise<SuccessResponse | FailureResponse>;
    /**
     * Process a record with the handler
     * @param record Record to be processed
     */
    abstract processRecordSync(record: BaseRecord): SuccessResponse | FailureResponse;
    /**
     * Call instance's handler for each record
     * @returns List of processed records
     */
    processSync(): (SuccessResponse | FailureResponse)[];
    /**
     * Set class instance attributes before execution
     * @param records List of records to be processed
     * @param handler CallableFunction to process entries of "records"
     * @param options Options to be used during processing
     * @returns this object
     */
    register(records: BaseRecord[], handler: CallableFunction, options?: BatchProcessingOptions): BasePartialProcessor;
    /**
     * Keeps track of batch records that were processed successfully
     * @param record record that succeeded processing
     * @param result result from record handler
     * @returns SuccessResponse object with ["success", result, original record]
     */
    successHandler(record: EventSourceDataClassTypes, result: ResultType): SuccessResponse;
}
export { BasePartialProcessor };
//# sourceMappingURL=BasePartialProcessor.d.ts.map